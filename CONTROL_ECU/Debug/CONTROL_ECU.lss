
CONTROL_ECU.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000229a  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000016  00800060  0000229a  0000230e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .stab         000022e0  00000000  00000000  00002324  2**2
                  CONTENTS, READONLY, DEBUGGING
  3 .stabstr      00001221  00000000  00000000  00004604  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_aranges 00000140  00000000  00000000  00005825  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_pubnames 00000170  00000000  00000000  00005965  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001c49  00000000  00000000  00005ad5  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000eeb  00000000  00000000  0000771e  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000dad  00000000  00000000  00008609  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000160  00000000  00000000  000093b8  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000028d  00000000  00000000  00009518  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000007ce  00000000  00000000  000097a5  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000050  00000000  00000000  00009f73  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
       8:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
       c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      10:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      14:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      18:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      1c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      20:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      24:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      28:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      2c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      30:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      34:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      38:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      3c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      40:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      44:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      48:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      4c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      50:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	10 e0       	ldi	r17, 0x00	; 0
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	ea e9       	ldi	r30, 0x9A	; 154
      68:	f2 e2       	ldi	r31, 0x22	; 34
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	a6 37       	cpi	r26, 0x76	; 118
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>
      76:	0e 94 9b 05 	call	0xb36	; 0xb36 <main>
      7a:	0c 94 4b 11 	jmp	0x2296	; 0x2296 <_exit>

0000007e <__bad_interrupt>:
      7e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000082 <__fixunssfsi>:
      82:	ef 92       	push	r14
      84:	ff 92       	push	r15
      86:	0f 93       	push	r16
      88:	1f 93       	push	r17
      8a:	7b 01       	movw	r14, r22
      8c:	8c 01       	movw	r16, r24
      8e:	20 e0       	ldi	r18, 0x00	; 0
      90:	30 e0       	ldi	r19, 0x00	; 0
      92:	40 e0       	ldi	r20, 0x00	; 0
      94:	5f e4       	ldi	r21, 0x4F	; 79
      96:	0e 94 41 03 	call	0x682	; 0x682 <__gesf2>
      9a:	88 23       	and	r24, r24
      9c:	8c f0       	brlt	.+34     	; 0xc0 <__fixunssfsi+0x3e>
      9e:	c8 01       	movw	r24, r16
      a0:	b7 01       	movw	r22, r14
      a2:	20 e0       	ldi	r18, 0x00	; 0
      a4:	30 e0       	ldi	r19, 0x00	; 0
      a6:	40 e0       	ldi	r20, 0x00	; 0
      a8:	5f e4       	ldi	r21, 0x4F	; 79
      aa:	0e 94 b9 01 	call	0x372	; 0x372 <__subsf3>
      ae:	0e 94 a1 03 	call	0x742	; 0x742 <__fixsfsi>
      b2:	9b 01       	movw	r18, r22
      b4:	ac 01       	movw	r20, r24
      b6:	20 50       	subi	r18, 0x00	; 0
      b8:	30 40       	sbci	r19, 0x00	; 0
      ba:	40 40       	sbci	r20, 0x00	; 0
      bc:	50 48       	sbci	r21, 0x80	; 128
      be:	06 c0       	rjmp	.+12     	; 0xcc <__fixunssfsi+0x4a>
      c0:	c8 01       	movw	r24, r16
      c2:	b7 01       	movw	r22, r14
      c4:	0e 94 a1 03 	call	0x742	; 0x742 <__fixsfsi>
      c8:	9b 01       	movw	r18, r22
      ca:	ac 01       	movw	r20, r24
      cc:	b9 01       	movw	r22, r18
      ce:	ca 01       	movw	r24, r20
      d0:	1f 91       	pop	r17
      d2:	0f 91       	pop	r16
      d4:	ff 90       	pop	r15
      d6:	ef 90       	pop	r14
      d8:	08 95       	ret

000000da <_fpadd_parts>:
      da:	a0 e0       	ldi	r26, 0x00	; 0
      dc:	b0 e0       	ldi	r27, 0x00	; 0
      de:	e3 e7       	ldi	r30, 0x73	; 115
      e0:	f0 e0       	ldi	r31, 0x00	; 0
      e2:	0c 94 14 11 	jmp	0x2228	; 0x2228 <__prologue_saves__>
      e6:	dc 01       	movw	r26, r24
      e8:	2b 01       	movw	r4, r22
      ea:	fa 01       	movw	r30, r20
      ec:	9c 91       	ld	r25, X
      ee:	92 30       	cpi	r25, 0x02	; 2
      f0:	08 f4       	brcc	.+2      	; 0xf4 <_fpadd_parts+0x1a>
      f2:	39 c1       	rjmp	.+626    	; 0x366 <_fpadd_parts+0x28c>
      f4:	eb 01       	movw	r28, r22
      f6:	88 81       	ld	r24, Y
      f8:	82 30       	cpi	r24, 0x02	; 2
      fa:	08 f4       	brcc	.+2      	; 0xfe <_fpadd_parts+0x24>
      fc:	33 c1       	rjmp	.+614    	; 0x364 <_fpadd_parts+0x28a>
      fe:	94 30       	cpi	r25, 0x04	; 4
     100:	69 f4       	brne	.+26     	; 0x11c <_fpadd_parts+0x42>
     102:	84 30       	cpi	r24, 0x04	; 4
     104:	09 f0       	breq	.+2      	; 0x108 <_fpadd_parts+0x2e>
     106:	2f c1       	rjmp	.+606    	; 0x366 <_fpadd_parts+0x28c>
     108:	11 96       	adiw	r26, 0x01	; 1
     10a:	9c 91       	ld	r25, X
     10c:	11 97       	sbiw	r26, 0x01	; 1
     10e:	89 81       	ldd	r24, Y+1	; 0x01
     110:	98 17       	cp	r25, r24
     112:	09 f4       	brne	.+2      	; 0x116 <_fpadd_parts+0x3c>
     114:	28 c1       	rjmp	.+592    	; 0x366 <_fpadd_parts+0x28c>
     116:	a0 e6       	ldi	r26, 0x60	; 96
     118:	b0 e0       	ldi	r27, 0x00	; 0
     11a:	25 c1       	rjmp	.+586    	; 0x366 <_fpadd_parts+0x28c>
     11c:	84 30       	cpi	r24, 0x04	; 4
     11e:	09 f4       	brne	.+2      	; 0x122 <_fpadd_parts+0x48>
     120:	21 c1       	rjmp	.+578    	; 0x364 <_fpadd_parts+0x28a>
     122:	82 30       	cpi	r24, 0x02	; 2
     124:	a9 f4       	brne	.+42     	; 0x150 <_fpadd_parts+0x76>
     126:	92 30       	cpi	r25, 0x02	; 2
     128:	09 f0       	breq	.+2      	; 0x12c <_fpadd_parts+0x52>
     12a:	1d c1       	rjmp	.+570    	; 0x366 <_fpadd_parts+0x28c>
     12c:	9a 01       	movw	r18, r20
     12e:	ad 01       	movw	r20, r26
     130:	88 e0       	ldi	r24, 0x08	; 8
     132:	ea 01       	movw	r28, r20
     134:	09 90       	ld	r0, Y+
     136:	ae 01       	movw	r20, r28
     138:	e9 01       	movw	r28, r18
     13a:	09 92       	st	Y+, r0
     13c:	9e 01       	movw	r18, r28
     13e:	81 50       	subi	r24, 0x01	; 1
     140:	c1 f7       	brne	.-16     	; 0x132 <_fpadd_parts+0x58>
     142:	e2 01       	movw	r28, r4
     144:	89 81       	ldd	r24, Y+1	; 0x01
     146:	11 96       	adiw	r26, 0x01	; 1
     148:	9c 91       	ld	r25, X
     14a:	89 23       	and	r24, r25
     14c:	81 83       	std	Z+1, r24	; 0x01
     14e:	08 c1       	rjmp	.+528    	; 0x360 <_fpadd_parts+0x286>
     150:	92 30       	cpi	r25, 0x02	; 2
     152:	09 f4       	brne	.+2      	; 0x156 <_fpadd_parts+0x7c>
     154:	07 c1       	rjmp	.+526    	; 0x364 <_fpadd_parts+0x28a>
     156:	12 96       	adiw	r26, 0x02	; 2
     158:	2d 90       	ld	r2, X+
     15a:	3c 90       	ld	r3, X
     15c:	13 97       	sbiw	r26, 0x03	; 3
     15e:	eb 01       	movw	r28, r22
     160:	8a 81       	ldd	r24, Y+2	; 0x02
     162:	9b 81       	ldd	r25, Y+3	; 0x03
     164:	14 96       	adiw	r26, 0x04	; 4
     166:	ad 90       	ld	r10, X+
     168:	bd 90       	ld	r11, X+
     16a:	cd 90       	ld	r12, X+
     16c:	dc 90       	ld	r13, X
     16e:	17 97       	sbiw	r26, 0x07	; 7
     170:	ec 80       	ldd	r14, Y+4	; 0x04
     172:	fd 80       	ldd	r15, Y+5	; 0x05
     174:	0e 81       	ldd	r16, Y+6	; 0x06
     176:	1f 81       	ldd	r17, Y+7	; 0x07
     178:	91 01       	movw	r18, r2
     17a:	28 1b       	sub	r18, r24
     17c:	39 0b       	sbc	r19, r25
     17e:	b9 01       	movw	r22, r18
     180:	37 ff       	sbrs	r19, 7
     182:	04 c0       	rjmp	.+8      	; 0x18c <_fpadd_parts+0xb2>
     184:	66 27       	eor	r22, r22
     186:	77 27       	eor	r23, r23
     188:	62 1b       	sub	r22, r18
     18a:	73 0b       	sbc	r23, r19
     18c:	60 32       	cpi	r22, 0x20	; 32
     18e:	71 05       	cpc	r23, r1
     190:	0c f0       	brlt	.+2      	; 0x194 <_fpadd_parts+0xba>
     192:	61 c0       	rjmp	.+194    	; 0x256 <_fpadd_parts+0x17c>
     194:	12 16       	cp	r1, r18
     196:	13 06       	cpc	r1, r19
     198:	6c f5       	brge	.+90     	; 0x1f4 <_fpadd_parts+0x11a>
     19a:	37 01       	movw	r6, r14
     19c:	48 01       	movw	r8, r16
     19e:	06 2e       	mov	r0, r22
     1a0:	04 c0       	rjmp	.+8      	; 0x1aa <_fpadd_parts+0xd0>
     1a2:	96 94       	lsr	r9
     1a4:	87 94       	ror	r8
     1a6:	77 94       	ror	r7
     1a8:	67 94       	ror	r6
     1aa:	0a 94       	dec	r0
     1ac:	d2 f7       	brpl	.-12     	; 0x1a2 <_fpadd_parts+0xc8>
     1ae:	21 e0       	ldi	r18, 0x01	; 1
     1b0:	30 e0       	ldi	r19, 0x00	; 0
     1b2:	40 e0       	ldi	r20, 0x00	; 0
     1b4:	50 e0       	ldi	r21, 0x00	; 0
     1b6:	04 c0       	rjmp	.+8      	; 0x1c0 <_fpadd_parts+0xe6>
     1b8:	22 0f       	add	r18, r18
     1ba:	33 1f       	adc	r19, r19
     1bc:	44 1f       	adc	r20, r20
     1be:	55 1f       	adc	r21, r21
     1c0:	6a 95       	dec	r22
     1c2:	d2 f7       	brpl	.-12     	; 0x1b8 <_fpadd_parts+0xde>
     1c4:	21 50       	subi	r18, 0x01	; 1
     1c6:	30 40       	sbci	r19, 0x00	; 0
     1c8:	40 40       	sbci	r20, 0x00	; 0
     1ca:	50 40       	sbci	r21, 0x00	; 0
     1cc:	2e 21       	and	r18, r14
     1ce:	3f 21       	and	r19, r15
     1d0:	40 23       	and	r20, r16
     1d2:	51 23       	and	r21, r17
     1d4:	21 15       	cp	r18, r1
     1d6:	31 05       	cpc	r19, r1
     1d8:	41 05       	cpc	r20, r1
     1da:	51 05       	cpc	r21, r1
     1dc:	21 f0       	breq	.+8      	; 0x1e6 <_fpadd_parts+0x10c>
     1de:	21 e0       	ldi	r18, 0x01	; 1
     1e0:	30 e0       	ldi	r19, 0x00	; 0
     1e2:	40 e0       	ldi	r20, 0x00	; 0
     1e4:	50 e0       	ldi	r21, 0x00	; 0
     1e6:	79 01       	movw	r14, r18
     1e8:	8a 01       	movw	r16, r20
     1ea:	e6 28       	or	r14, r6
     1ec:	f7 28       	or	r15, r7
     1ee:	08 29       	or	r16, r8
     1f0:	19 29       	or	r17, r9
     1f2:	3c c0       	rjmp	.+120    	; 0x26c <_fpadd_parts+0x192>
     1f4:	23 2b       	or	r18, r19
     1f6:	d1 f1       	breq	.+116    	; 0x26c <_fpadd_parts+0x192>
     1f8:	26 0e       	add	r2, r22
     1fa:	37 1e       	adc	r3, r23
     1fc:	35 01       	movw	r6, r10
     1fe:	46 01       	movw	r8, r12
     200:	06 2e       	mov	r0, r22
     202:	04 c0       	rjmp	.+8      	; 0x20c <_fpadd_parts+0x132>
     204:	96 94       	lsr	r9
     206:	87 94       	ror	r8
     208:	77 94       	ror	r7
     20a:	67 94       	ror	r6
     20c:	0a 94       	dec	r0
     20e:	d2 f7       	brpl	.-12     	; 0x204 <_fpadd_parts+0x12a>
     210:	21 e0       	ldi	r18, 0x01	; 1
     212:	30 e0       	ldi	r19, 0x00	; 0
     214:	40 e0       	ldi	r20, 0x00	; 0
     216:	50 e0       	ldi	r21, 0x00	; 0
     218:	04 c0       	rjmp	.+8      	; 0x222 <_fpadd_parts+0x148>
     21a:	22 0f       	add	r18, r18
     21c:	33 1f       	adc	r19, r19
     21e:	44 1f       	adc	r20, r20
     220:	55 1f       	adc	r21, r21
     222:	6a 95       	dec	r22
     224:	d2 f7       	brpl	.-12     	; 0x21a <_fpadd_parts+0x140>
     226:	21 50       	subi	r18, 0x01	; 1
     228:	30 40       	sbci	r19, 0x00	; 0
     22a:	40 40       	sbci	r20, 0x00	; 0
     22c:	50 40       	sbci	r21, 0x00	; 0
     22e:	2a 21       	and	r18, r10
     230:	3b 21       	and	r19, r11
     232:	4c 21       	and	r20, r12
     234:	5d 21       	and	r21, r13
     236:	21 15       	cp	r18, r1
     238:	31 05       	cpc	r19, r1
     23a:	41 05       	cpc	r20, r1
     23c:	51 05       	cpc	r21, r1
     23e:	21 f0       	breq	.+8      	; 0x248 <_fpadd_parts+0x16e>
     240:	21 e0       	ldi	r18, 0x01	; 1
     242:	30 e0       	ldi	r19, 0x00	; 0
     244:	40 e0       	ldi	r20, 0x00	; 0
     246:	50 e0       	ldi	r21, 0x00	; 0
     248:	59 01       	movw	r10, r18
     24a:	6a 01       	movw	r12, r20
     24c:	a6 28       	or	r10, r6
     24e:	b7 28       	or	r11, r7
     250:	c8 28       	or	r12, r8
     252:	d9 28       	or	r13, r9
     254:	0b c0       	rjmp	.+22     	; 0x26c <_fpadd_parts+0x192>
     256:	82 15       	cp	r24, r2
     258:	93 05       	cpc	r25, r3
     25a:	2c f0       	brlt	.+10     	; 0x266 <_fpadd_parts+0x18c>
     25c:	1c 01       	movw	r2, r24
     25e:	aa 24       	eor	r10, r10
     260:	bb 24       	eor	r11, r11
     262:	65 01       	movw	r12, r10
     264:	03 c0       	rjmp	.+6      	; 0x26c <_fpadd_parts+0x192>
     266:	ee 24       	eor	r14, r14
     268:	ff 24       	eor	r15, r15
     26a:	87 01       	movw	r16, r14
     26c:	11 96       	adiw	r26, 0x01	; 1
     26e:	9c 91       	ld	r25, X
     270:	d2 01       	movw	r26, r4
     272:	11 96       	adiw	r26, 0x01	; 1
     274:	8c 91       	ld	r24, X
     276:	98 17       	cp	r25, r24
     278:	09 f4       	brne	.+2      	; 0x27c <_fpadd_parts+0x1a2>
     27a:	45 c0       	rjmp	.+138    	; 0x306 <_fpadd_parts+0x22c>
     27c:	99 23       	and	r25, r25
     27e:	39 f0       	breq	.+14     	; 0x28e <_fpadd_parts+0x1b4>
     280:	a8 01       	movw	r20, r16
     282:	97 01       	movw	r18, r14
     284:	2a 19       	sub	r18, r10
     286:	3b 09       	sbc	r19, r11
     288:	4c 09       	sbc	r20, r12
     28a:	5d 09       	sbc	r21, r13
     28c:	06 c0       	rjmp	.+12     	; 0x29a <_fpadd_parts+0x1c0>
     28e:	a6 01       	movw	r20, r12
     290:	95 01       	movw	r18, r10
     292:	2e 19       	sub	r18, r14
     294:	3f 09       	sbc	r19, r15
     296:	40 0b       	sbc	r20, r16
     298:	51 0b       	sbc	r21, r17
     29a:	57 fd       	sbrc	r21, 7
     29c:	08 c0       	rjmp	.+16     	; 0x2ae <_fpadd_parts+0x1d4>
     29e:	11 82       	std	Z+1, r1	; 0x01
     2a0:	33 82       	std	Z+3, r3	; 0x03
     2a2:	22 82       	std	Z+2, r2	; 0x02
     2a4:	24 83       	std	Z+4, r18	; 0x04
     2a6:	35 83       	std	Z+5, r19	; 0x05
     2a8:	46 83       	std	Z+6, r20	; 0x06
     2aa:	57 83       	std	Z+7, r21	; 0x07
     2ac:	1d c0       	rjmp	.+58     	; 0x2e8 <_fpadd_parts+0x20e>
     2ae:	81 e0       	ldi	r24, 0x01	; 1
     2b0:	81 83       	std	Z+1, r24	; 0x01
     2b2:	33 82       	std	Z+3, r3	; 0x03
     2b4:	22 82       	std	Z+2, r2	; 0x02
     2b6:	88 27       	eor	r24, r24
     2b8:	99 27       	eor	r25, r25
     2ba:	dc 01       	movw	r26, r24
     2bc:	82 1b       	sub	r24, r18
     2be:	93 0b       	sbc	r25, r19
     2c0:	a4 0b       	sbc	r26, r20
     2c2:	b5 0b       	sbc	r27, r21
     2c4:	84 83       	std	Z+4, r24	; 0x04
     2c6:	95 83       	std	Z+5, r25	; 0x05
     2c8:	a6 83       	std	Z+6, r26	; 0x06
     2ca:	b7 83       	std	Z+7, r27	; 0x07
     2cc:	0d c0       	rjmp	.+26     	; 0x2e8 <_fpadd_parts+0x20e>
     2ce:	22 0f       	add	r18, r18
     2d0:	33 1f       	adc	r19, r19
     2d2:	44 1f       	adc	r20, r20
     2d4:	55 1f       	adc	r21, r21
     2d6:	24 83       	std	Z+4, r18	; 0x04
     2d8:	35 83       	std	Z+5, r19	; 0x05
     2da:	46 83       	std	Z+6, r20	; 0x06
     2dc:	57 83       	std	Z+7, r21	; 0x07
     2de:	82 81       	ldd	r24, Z+2	; 0x02
     2e0:	93 81       	ldd	r25, Z+3	; 0x03
     2e2:	01 97       	sbiw	r24, 0x01	; 1
     2e4:	93 83       	std	Z+3, r25	; 0x03
     2e6:	82 83       	std	Z+2, r24	; 0x02
     2e8:	24 81       	ldd	r18, Z+4	; 0x04
     2ea:	35 81       	ldd	r19, Z+5	; 0x05
     2ec:	46 81       	ldd	r20, Z+6	; 0x06
     2ee:	57 81       	ldd	r21, Z+7	; 0x07
     2f0:	da 01       	movw	r26, r20
     2f2:	c9 01       	movw	r24, r18
     2f4:	01 97       	sbiw	r24, 0x01	; 1
     2f6:	a1 09       	sbc	r26, r1
     2f8:	b1 09       	sbc	r27, r1
     2fa:	8f 5f       	subi	r24, 0xFF	; 255
     2fc:	9f 4f       	sbci	r25, 0xFF	; 255
     2fe:	af 4f       	sbci	r26, 0xFF	; 255
     300:	bf 43       	sbci	r27, 0x3F	; 63
     302:	28 f3       	brcs	.-54     	; 0x2ce <_fpadd_parts+0x1f4>
     304:	0b c0       	rjmp	.+22     	; 0x31c <_fpadd_parts+0x242>
     306:	91 83       	std	Z+1, r25	; 0x01
     308:	33 82       	std	Z+3, r3	; 0x03
     30a:	22 82       	std	Z+2, r2	; 0x02
     30c:	ea 0c       	add	r14, r10
     30e:	fb 1c       	adc	r15, r11
     310:	0c 1d       	adc	r16, r12
     312:	1d 1d       	adc	r17, r13
     314:	e4 82       	std	Z+4, r14	; 0x04
     316:	f5 82       	std	Z+5, r15	; 0x05
     318:	06 83       	std	Z+6, r16	; 0x06
     31a:	17 83       	std	Z+7, r17	; 0x07
     31c:	83 e0       	ldi	r24, 0x03	; 3
     31e:	80 83       	st	Z, r24
     320:	24 81       	ldd	r18, Z+4	; 0x04
     322:	35 81       	ldd	r19, Z+5	; 0x05
     324:	46 81       	ldd	r20, Z+6	; 0x06
     326:	57 81       	ldd	r21, Z+7	; 0x07
     328:	57 ff       	sbrs	r21, 7
     32a:	1a c0       	rjmp	.+52     	; 0x360 <_fpadd_parts+0x286>
     32c:	c9 01       	movw	r24, r18
     32e:	aa 27       	eor	r26, r26
     330:	97 fd       	sbrc	r25, 7
     332:	a0 95       	com	r26
     334:	ba 2f       	mov	r27, r26
     336:	81 70       	andi	r24, 0x01	; 1
     338:	90 70       	andi	r25, 0x00	; 0
     33a:	a0 70       	andi	r26, 0x00	; 0
     33c:	b0 70       	andi	r27, 0x00	; 0
     33e:	56 95       	lsr	r21
     340:	47 95       	ror	r20
     342:	37 95       	ror	r19
     344:	27 95       	ror	r18
     346:	82 2b       	or	r24, r18
     348:	93 2b       	or	r25, r19
     34a:	a4 2b       	or	r26, r20
     34c:	b5 2b       	or	r27, r21
     34e:	84 83       	std	Z+4, r24	; 0x04
     350:	95 83       	std	Z+5, r25	; 0x05
     352:	a6 83       	std	Z+6, r26	; 0x06
     354:	b7 83       	std	Z+7, r27	; 0x07
     356:	82 81       	ldd	r24, Z+2	; 0x02
     358:	93 81       	ldd	r25, Z+3	; 0x03
     35a:	01 96       	adiw	r24, 0x01	; 1
     35c:	93 83       	std	Z+3, r25	; 0x03
     35e:	82 83       	std	Z+2, r24	; 0x02
     360:	df 01       	movw	r26, r30
     362:	01 c0       	rjmp	.+2      	; 0x366 <_fpadd_parts+0x28c>
     364:	d2 01       	movw	r26, r4
     366:	cd 01       	movw	r24, r26
     368:	cd b7       	in	r28, 0x3d	; 61
     36a:	de b7       	in	r29, 0x3e	; 62
     36c:	e2 e1       	ldi	r30, 0x12	; 18
     36e:	0c 94 30 11 	jmp	0x2260	; 0x2260 <__epilogue_restores__>

00000372 <__subsf3>:
     372:	a0 e2       	ldi	r26, 0x20	; 32
     374:	b0 e0       	ldi	r27, 0x00	; 0
     376:	ef eb       	ldi	r30, 0xBF	; 191
     378:	f1 e0       	ldi	r31, 0x01	; 1
     37a:	0c 94 20 11 	jmp	0x2240	; 0x2240 <__prologue_saves__+0x18>
     37e:	69 83       	std	Y+1, r22	; 0x01
     380:	7a 83       	std	Y+2, r23	; 0x02
     382:	8b 83       	std	Y+3, r24	; 0x03
     384:	9c 83       	std	Y+4, r25	; 0x04
     386:	2d 83       	std	Y+5, r18	; 0x05
     388:	3e 83       	std	Y+6, r19	; 0x06
     38a:	4f 83       	std	Y+7, r20	; 0x07
     38c:	58 87       	std	Y+8, r21	; 0x08
     38e:	e9 e0       	ldi	r30, 0x09	; 9
     390:	ee 2e       	mov	r14, r30
     392:	f1 2c       	mov	r15, r1
     394:	ec 0e       	add	r14, r28
     396:	fd 1e       	adc	r15, r29
     398:	ce 01       	movw	r24, r28
     39a:	01 96       	adiw	r24, 0x01	; 1
     39c:	b7 01       	movw	r22, r14
     39e:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     3a2:	8e 01       	movw	r16, r28
     3a4:	0f 5e       	subi	r16, 0xEF	; 239
     3a6:	1f 4f       	sbci	r17, 0xFF	; 255
     3a8:	ce 01       	movw	r24, r28
     3aa:	05 96       	adiw	r24, 0x05	; 5
     3ac:	b8 01       	movw	r22, r16
     3ae:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     3b2:	8a 89       	ldd	r24, Y+18	; 0x12
     3b4:	91 e0       	ldi	r25, 0x01	; 1
     3b6:	89 27       	eor	r24, r25
     3b8:	8a 8b       	std	Y+18, r24	; 0x12
     3ba:	c7 01       	movw	r24, r14
     3bc:	b8 01       	movw	r22, r16
     3be:	ae 01       	movw	r20, r28
     3c0:	47 5e       	subi	r20, 0xE7	; 231
     3c2:	5f 4f       	sbci	r21, 0xFF	; 255
     3c4:	0e 94 6d 00 	call	0xda	; 0xda <_fpadd_parts>
     3c8:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__pack_f>
     3cc:	a0 96       	adiw	r28, 0x20	; 32
     3ce:	e6 e0       	ldi	r30, 0x06	; 6
     3d0:	0c 94 3c 11 	jmp	0x2278	; 0x2278 <__epilogue_restores__+0x18>

000003d4 <__addsf3>:
     3d4:	a0 e2       	ldi	r26, 0x20	; 32
     3d6:	b0 e0       	ldi	r27, 0x00	; 0
     3d8:	e0 ef       	ldi	r30, 0xF0	; 240
     3da:	f1 e0       	ldi	r31, 0x01	; 1
     3dc:	0c 94 20 11 	jmp	0x2240	; 0x2240 <__prologue_saves__+0x18>
     3e0:	69 83       	std	Y+1, r22	; 0x01
     3e2:	7a 83       	std	Y+2, r23	; 0x02
     3e4:	8b 83       	std	Y+3, r24	; 0x03
     3e6:	9c 83       	std	Y+4, r25	; 0x04
     3e8:	2d 83       	std	Y+5, r18	; 0x05
     3ea:	3e 83       	std	Y+6, r19	; 0x06
     3ec:	4f 83       	std	Y+7, r20	; 0x07
     3ee:	58 87       	std	Y+8, r21	; 0x08
     3f0:	f9 e0       	ldi	r31, 0x09	; 9
     3f2:	ef 2e       	mov	r14, r31
     3f4:	f1 2c       	mov	r15, r1
     3f6:	ec 0e       	add	r14, r28
     3f8:	fd 1e       	adc	r15, r29
     3fa:	ce 01       	movw	r24, r28
     3fc:	01 96       	adiw	r24, 0x01	; 1
     3fe:	b7 01       	movw	r22, r14
     400:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     404:	8e 01       	movw	r16, r28
     406:	0f 5e       	subi	r16, 0xEF	; 239
     408:	1f 4f       	sbci	r17, 0xFF	; 255
     40a:	ce 01       	movw	r24, r28
     40c:	05 96       	adiw	r24, 0x05	; 5
     40e:	b8 01       	movw	r22, r16
     410:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     414:	c7 01       	movw	r24, r14
     416:	b8 01       	movw	r22, r16
     418:	ae 01       	movw	r20, r28
     41a:	47 5e       	subi	r20, 0xE7	; 231
     41c:	5f 4f       	sbci	r21, 0xFF	; 255
     41e:	0e 94 6d 00 	call	0xda	; 0xda <_fpadd_parts>
     422:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__pack_f>
     426:	a0 96       	adiw	r28, 0x20	; 32
     428:	e6 e0       	ldi	r30, 0x06	; 6
     42a:	0c 94 3c 11 	jmp	0x2278	; 0x2278 <__epilogue_restores__+0x18>

0000042e <__mulsf3>:
     42e:	a0 e2       	ldi	r26, 0x20	; 32
     430:	b0 e0       	ldi	r27, 0x00	; 0
     432:	ed e1       	ldi	r30, 0x1D	; 29
     434:	f2 e0       	ldi	r31, 0x02	; 2
     436:	0c 94 14 11 	jmp	0x2228	; 0x2228 <__prologue_saves__>
     43a:	69 83       	std	Y+1, r22	; 0x01
     43c:	7a 83       	std	Y+2, r23	; 0x02
     43e:	8b 83       	std	Y+3, r24	; 0x03
     440:	9c 83       	std	Y+4, r25	; 0x04
     442:	2d 83       	std	Y+5, r18	; 0x05
     444:	3e 83       	std	Y+6, r19	; 0x06
     446:	4f 83       	std	Y+7, r20	; 0x07
     448:	58 87       	std	Y+8, r21	; 0x08
     44a:	ce 01       	movw	r24, r28
     44c:	01 96       	adiw	r24, 0x01	; 1
     44e:	be 01       	movw	r22, r28
     450:	67 5f       	subi	r22, 0xF7	; 247
     452:	7f 4f       	sbci	r23, 0xFF	; 255
     454:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     458:	ce 01       	movw	r24, r28
     45a:	05 96       	adiw	r24, 0x05	; 5
     45c:	be 01       	movw	r22, r28
     45e:	6f 5e       	subi	r22, 0xEF	; 239
     460:	7f 4f       	sbci	r23, 0xFF	; 255
     462:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     466:	99 85       	ldd	r25, Y+9	; 0x09
     468:	92 30       	cpi	r25, 0x02	; 2
     46a:	88 f0       	brcs	.+34     	; 0x48e <__mulsf3+0x60>
     46c:	89 89       	ldd	r24, Y+17	; 0x11
     46e:	82 30       	cpi	r24, 0x02	; 2
     470:	c8 f0       	brcs	.+50     	; 0x4a4 <__mulsf3+0x76>
     472:	94 30       	cpi	r25, 0x04	; 4
     474:	19 f4       	brne	.+6      	; 0x47c <__mulsf3+0x4e>
     476:	82 30       	cpi	r24, 0x02	; 2
     478:	51 f4       	brne	.+20     	; 0x48e <__mulsf3+0x60>
     47a:	04 c0       	rjmp	.+8      	; 0x484 <__mulsf3+0x56>
     47c:	84 30       	cpi	r24, 0x04	; 4
     47e:	29 f4       	brne	.+10     	; 0x48a <__mulsf3+0x5c>
     480:	92 30       	cpi	r25, 0x02	; 2
     482:	81 f4       	brne	.+32     	; 0x4a4 <__mulsf3+0x76>
     484:	80 e6       	ldi	r24, 0x60	; 96
     486:	90 e0       	ldi	r25, 0x00	; 0
     488:	c6 c0       	rjmp	.+396    	; 0x616 <__mulsf3+0x1e8>
     48a:	92 30       	cpi	r25, 0x02	; 2
     48c:	49 f4       	brne	.+18     	; 0x4a0 <__mulsf3+0x72>
     48e:	20 e0       	ldi	r18, 0x00	; 0
     490:	9a 85       	ldd	r25, Y+10	; 0x0a
     492:	8a 89       	ldd	r24, Y+18	; 0x12
     494:	98 13       	cpse	r25, r24
     496:	21 e0       	ldi	r18, 0x01	; 1
     498:	2a 87       	std	Y+10, r18	; 0x0a
     49a:	ce 01       	movw	r24, r28
     49c:	09 96       	adiw	r24, 0x09	; 9
     49e:	bb c0       	rjmp	.+374    	; 0x616 <__mulsf3+0x1e8>
     4a0:	82 30       	cpi	r24, 0x02	; 2
     4a2:	49 f4       	brne	.+18     	; 0x4b6 <__mulsf3+0x88>
     4a4:	20 e0       	ldi	r18, 0x00	; 0
     4a6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a8:	8a 89       	ldd	r24, Y+18	; 0x12
     4aa:	98 13       	cpse	r25, r24
     4ac:	21 e0       	ldi	r18, 0x01	; 1
     4ae:	2a 8b       	std	Y+18, r18	; 0x12
     4b0:	ce 01       	movw	r24, r28
     4b2:	41 96       	adiw	r24, 0x11	; 17
     4b4:	b0 c0       	rjmp	.+352    	; 0x616 <__mulsf3+0x1e8>
     4b6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4b8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ba:	4f 84       	ldd	r4, Y+15	; 0x0f
     4bc:	58 88       	ldd	r5, Y+16	; 0x10
     4be:	6d 88       	ldd	r6, Y+21	; 0x15
     4c0:	7e 88       	ldd	r7, Y+22	; 0x16
     4c2:	8f 88       	ldd	r8, Y+23	; 0x17
     4c4:	98 8c       	ldd	r9, Y+24	; 0x18
     4c6:	ee 24       	eor	r14, r14
     4c8:	ff 24       	eor	r15, r15
     4ca:	87 01       	movw	r16, r14
     4cc:	aa 24       	eor	r10, r10
     4ce:	bb 24       	eor	r11, r11
     4d0:	65 01       	movw	r12, r10
     4d2:	40 e0       	ldi	r20, 0x00	; 0
     4d4:	50 e0       	ldi	r21, 0x00	; 0
     4d6:	60 e0       	ldi	r22, 0x00	; 0
     4d8:	70 e0       	ldi	r23, 0x00	; 0
     4da:	e0 e0       	ldi	r30, 0x00	; 0
     4dc:	f0 e0       	ldi	r31, 0x00	; 0
     4de:	c1 01       	movw	r24, r2
     4e0:	81 70       	andi	r24, 0x01	; 1
     4e2:	90 70       	andi	r25, 0x00	; 0
     4e4:	89 2b       	or	r24, r25
     4e6:	e9 f0       	breq	.+58     	; 0x522 <__mulsf3+0xf4>
     4e8:	e6 0c       	add	r14, r6
     4ea:	f7 1c       	adc	r15, r7
     4ec:	08 1d       	adc	r16, r8
     4ee:	19 1d       	adc	r17, r9
     4f0:	9a 01       	movw	r18, r20
     4f2:	ab 01       	movw	r20, r22
     4f4:	2a 0d       	add	r18, r10
     4f6:	3b 1d       	adc	r19, r11
     4f8:	4c 1d       	adc	r20, r12
     4fa:	5d 1d       	adc	r21, r13
     4fc:	80 e0       	ldi	r24, 0x00	; 0
     4fe:	90 e0       	ldi	r25, 0x00	; 0
     500:	a0 e0       	ldi	r26, 0x00	; 0
     502:	b0 e0       	ldi	r27, 0x00	; 0
     504:	e6 14       	cp	r14, r6
     506:	f7 04       	cpc	r15, r7
     508:	08 05       	cpc	r16, r8
     50a:	19 05       	cpc	r17, r9
     50c:	20 f4       	brcc	.+8      	; 0x516 <__mulsf3+0xe8>
     50e:	81 e0       	ldi	r24, 0x01	; 1
     510:	90 e0       	ldi	r25, 0x00	; 0
     512:	a0 e0       	ldi	r26, 0x00	; 0
     514:	b0 e0       	ldi	r27, 0x00	; 0
     516:	ba 01       	movw	r22, r20
     518:	a9 01       	movw	r20, r18
     51a:	48 0f       	add	r20, r24
     51c:	59 1f       	adc	r21, r25
     51e:	6a 1f       	adc	r22, r26
     520:	7b 1f       	adc	r23, r27
     522:	aa 0c       	add	r10, r10
     524:	bb 1c       	adc	r11, r11
     526:	cc 1c       	adc	r12, r12
     528:	dd 1c       	adc	r13, r13
     52a:	97 fe       	sbrs	r9, 7
     52c:	08 c0       	rjmp	.+16     	; 0x53e <__mulsf3+0x110>
     52e:	81 e0       	ldi	r24, 0x01	; 1
     530:	90 e0       	ldi	r25, 0x00	; 0
     532:	a0 e0       	ldi	r26, 0x00	; 0
     534:	b0 e0       	ldi	r27, 0x00	; 0
     536:	a8 2a       	or	r10, r24
     538:	b9 2a       	or	r11, r25
     53a:	ca 2a       	or	r12, r26
     53c:	db 2a       	or	r13, r27
     53e:	31 96       	adiw	r30, 0x01	; 1
     540:	e0 32       	cpi	r30, 0x20	; 32
     542:	f1 05       	cpc	r31, r1
     544:	49 f0       	breq	.+18     	; 0x558 <__mulsf3+0x12a>
     546:	66 0c       	add	r6, r6
     548:	77 1c       	adc	r7, r7
     54a:	88 1c       	adc	r8, r8
     54c:	99 1c       	adc	r9, r9
     54e:	56 94       	lsr	r5
     550:	47 94       	ror	r4
     552:	37 94       	ror	r3
     554:	27 94       	ror	r2
     556:	c3 cf       	rjmp	.-122    	; 0x4de <__mulsf3+0xb0>
     558:	fa 85       	ldd	r31, Y+10	; 0x0a
     55a:	ea 89       	ldd	r30, Y+18	; 0x12
     55c:	2b 89       	ldd	r18, Y+19	; 0x13
     55e:	3c 89       	ldd	r19, Y+20	; 0x14
     560:	8b 85       	ldd	r24, Y+11	; 0x0b
     562:	9c 85       	ldd	r25, Y+12	; 0x0c
     564:	28 0f       	add	r18, r24
     566:	39 1f       	adc	r19, r25
     568:	2e 5f       	subi	r18, 0xFE	; 254
     56a:	3f 4f       	sbci	r19, 0xFF	; 255
     56c:	17 c0       	rjmp	.+46     	; 0x59c <__mulsf3+0x16e>
     56e:	ca 01       	movw	r24, r20
     570:	81 70       	andi	r24, 0x01	; 1
     572:	90 70       	andi	r25, 0x00	; 0
     574:	89 2b       	or	r24, r25
     576:	61 f0       	breq	.+24     	; 0x590 <__mulsf3+0x162>
     578:	16 95       	lsr	r17
     57a:	07 95       	ror	r16
     57c:	f7 94       	ror	r15
     57e:	e7 94       	ror	r14
     580:	80 e0       	ldi	r24, 0x00	; 0
     582:	90 e0       	ldi	r25, 0x00	; 0
     584:	a0 e0       	ldi	r26, 0x00	; 0
     586:	b0 e8       	ldi	r27, 0x80	; 128
     588:	e8 2a       	or	r14, r24
     58a:	f9 2a       	or	r15, r25
     58c:	0a 2b       	or	r16, r26
     58e:	1b 2b       	or	r17, r27
     590:	76 95       	lsr	r23
     592:	67 95       	ror	r22
     594:	57 95       	ror	r21
     596:	47 95       	ror	r20
     598:	2f 5f       	subi	r18, 0xFF	; 255
     59a:	3f 4f       	sbci	r19, 0xFF	; 255
     59c:	77 fd       	sbrc	r23, 7
     59e:	e7 cf       	rjmp	.-50     	; 0x56e <__mulsf3+0x140>
     5a0:	0c c0       	rjmp	.+24     	; 0x5ba <__mulsf3+0x18c>
     5a2:	44 0f       	add	r20, r20
     5a4:	55 1f       	adc	r21, r21
     5a6:	66 1f       	adc	r22, r22
     5a8:	77 1f       	adc	r23, r23
     5aa:	17 fd       	sbrc	r17, 7
     5ac:	41 60       	ori	r20, 0x01	; 1
     5ae:	ee 0c       	add	r14, r14
     5b0:	ff 1c       	adc	r15, r15
     5b2:	00 1f       	adc	r16, r16
     5b4:	11 1f       	adc	r17, r17
     5b6:	21 50       	subi	r18, 0x01	; 1
     5b8:	30 40       	sbci	r19, 0x00	; 0
     5ba:	40 30       	cpi	r20, 0x00	; 0
     5bc:	90 e0       	ldi	r25, 0x00	; 0
     5be:	59 07       	cpc	r21, r25
     5c0:	90 e0       	ldi	r25, 0x00	; 0
     5c2:	69 07       	cpc	r22, r25
     5c4:	90 e4       	ldi	r25, 0x40	; 64
     5c6:	79 07       	cpc	r23, r25
     5c8:	60 f3       	brcs	.-40     	; 0x5a2 <__mulsf3+0x174>
     5ca:	2b 8f       	std	Y+27, r18	; 0x1b
     5cc:	3c 8f       	std	Y+28, r19	; 0x1c
     5ce:	db 01       	movw	r26, r22
     5d0:	ca 01       	movw	r24, r20
     5d2:	8f 77       	andi	r24, 0x7F	; 127
     5d4:	90 70       	andi	r25, 0x00	; 0
     5d6:	a0 70       	andi	r26, 0x00	; 0
     5d8:	b0 70       	andi	r27, 0x00	; 0
     5da:	80 34       	cpi	r24, 0x40	; 64
     5dc:	91 05       	cpc	r25, r1
     5de:	a1 05       	cpc	r26, r1
     5e0:	b1 05       	cpc	r27, r1
     5e2:	61 f4       	brne	.+24     	; 0x5fc <__mulsf3+0x1ce>
     5e4:	47 fd       	sbrc	r20, 7
     5e6:	0a c0       	rjmp	.+20     	; 0x5fc <__mulsf3+0x1ce>
     5e8:	e1 14       	cp	r14, r1
     5ea:	f1 04       	cpc	r15, r1
     5ec:	01 05       	cpc	r16, r1
     5ee:	11 05       	cpc	r17, r1
     5f0:	29 f0       	breq	.+10     	; 0x5fc <__mulsf3+0x1ce>
     5f2:	40 5c       	subi	r20, 0xC0	; 192
     5f4:	5f 4f       	sbci	r21, 0xFF	; 255
     5f6:	6f 4f       	sbci	r22, 0xFF	; 255
     5f8:	7f 4f       	sbci	r23, 0xFF	; 255
     5fa:	40 78       	andi	r20, 0x80	; 128
     5fc:	1a 8e       	std	Y+26, r1	; 0x1a
     5fe:	fe 17       	cp	r31, r30
     600:	11 f0       	breq	.+4      	; 0x606 <__mulsf3+0x1d8>
     602:	81 e0       	ldi	r24, 0x01	; 1
     604:	8a 8f       	std	Y+26, r24	; 0x1a
     606:	4d 8f       	std	Y+29, r20	; 0x1d
     608:	5e 8f       	std	Y+30, r21	; 0x1e
     60a:	6f 8f       	std	Y+31, r22	; 0x1f
     60c:	78 a3       	std	Y+32, r23	; 0x20
     60e:	83 e0       	ldi	r24, 0x03	; 3
     610:	89 8f       	std	Y+25, r24	; 0x19
     612:	ce 01       	movw	r24, r28
     614:	49 96       	adiw	r24, 0x19	; 25
     616:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__pack_f>
     61a:	a0 96       	adiw	r28, 0x20	; 32
     61c:	e2 e1       	ldi	r30, 0x12	; 18
     61e:	0c 94 30 11 	jmp	0x2260	; 0x2260 <__epilogue_restores__>

00000622 <__gtsf2>:
     622:	a8 e1       	ldi	r26, 0x18	; 24
     624:	b0 e0       	ldi	r27, 0x00	; 0
     626:	e7 e1       	ldi	r30, 0x17	; 23
     628:	f3 e0       	ldi	r31, 0x03	; 3
     62a:	0c 94 20 11 	jmp	0x2240	; 0x2240 <__prologue_saves__+0x18>
     62e:	69 83       	std	Y+1, r22	; 0x01
     630:	7a 83       	std	Y+2, r23	; 0x02
     632:	8b 83       	std	Y+3, r24	; 0x03
     634:	9c 83       	std	Y+4, r25	; 0x04
     636:	2d 83       	std	Y+5, r18	; 0x05
     638:	3e 83       	std	Y+6, r19	; 0x06
     63a:	4f 83       	std	Y+7, r20	; 0x07
     63c:	58 87       	std	Y+8, r21	; 0x08
     63e:	89 e0       	ldi	r24, 0x09	; 9
     640:	e8 2e       	mov	r14, r24
     642:	f1 2c       	mov	r15, r1
     644:	ec 0e       	add	r14, r28
     646:	fd 1e       	adc	r15, r29
     648:	ce 01       	movw	r24, r28
     64a:	01 96       	adiw	r24, 0x01	; 1
     64c:	b7 01       	movw	r22, r14
     64e:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     652:	8e 01       	movw	r16, r28
     654:	0f 5e       	subi	r16, 0xEF	; 239
     656:	1f 4f       	sbci	r17, 0xFF	; 255
     658:	ce 01       	movw	r24, r28
     65a:	05 96       	adiw	r24, 0x05	; 5
     65c:	b8 01       	movw	r22, r16
     65e:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     662:	89 85       	ldd	r24, Y+9	; 0x09
     664:	82 30       	cpi	r24, 0x02	; 2
     666:	40 f0       	brcs	.+16     	; 0x678 <__gtsf2+0x56>
     668:	89 89       	ldd	r24, Y+17	; 0x11
     66a:	82 30       	cpi	r24, 0x02	; 2
     66c:	28 f0       	brcs	.+10     	; 0x678 <__gtsf2+0x56>
     66e:	c7 01       	movw	r24, r14
     670:	b8 01       	movw	r22, r16
     672:	0e 94 42 05 	call	0xa84	; 0xa84 <__fpcmp_parts_f>
     676:	01 c0       	rjmp	.+2      	; 0x67a <__gtsf2+0x58>
     678:	8f ef       	ldi	r24, 0xFF	; 255
     67a:	68 96       	adiw	r28, 0x18	; 24
     67c:	e6 e0       	ldi	r30, 0x06	; 6
     67e:	0c 94 3c 11 	jmp	0x2278	; 0x2278 <__epilogue_restores__+0x18>

00000682 <__gesf2>:
     682:	a8 e1       	ldi	r26, 0x18	; 24
     684:	b0 e0       	ldi	r27, 0x00	; 0
     686:	e7 e4       	ldi	r30, 0x47	; 71
     688:	f3 e0       	ldi	r31, 0x03	; 3
     68a:	0c 94 20 11 	jmp	0x2240	; 0x2240 <__prologue_saves__+0x18>
     68e:	69 83       	std	Y+1, r22	; 0x01
     690:	7a 83       	std	Y+2, r23	; 0x02
     692:	8b 83       	std	Y+3, r24	; 0x03
     694:	9c 83       	std	Y+4, r25	; 0x04
     696:	2d 83       	std	Y+5, r18	; 0x05
     698:	3e 83       	std	Y+6, r19	; 0x06
     69a:	4f 83       	std	Y+7, r20	; 0x07
     69c:	58 87       	std	Y+8, r21	; 0x08
     69e:	89 e0       	ldi	r24, 0x09	; 9
     6a0:	e8 2e       	mov	r14, r24
     6a2:	f1 2c       	mov	r15, r1
     6a4:	ec 0e       	add	r14, r28
     6a6:	fd 1e       	adc	r15, r29
     6a8:	ce 01       	movw	r24, r28
     6aa:	01 96       	adiw	r24, 0x01	; 1
     6ac:	b7 01       	movw	r22, r14
     6ae:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     6b2:	8e 01       	movw	r16, r28
     6b4:	0f 5e       	subi	r16, 0xEF	; 239
     6b6:	1f 4f       	sbci	r17, 0xFF	; 255
     6b8:	ce 01       	movw	r24, r28
     6ba:	05 96       	adiw	r24, 0x05	; 5
     6bc:	b8 01       	movw	r22, r16
     6be:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     6c2:	89 85       	ldd	r24, Y+9	; 0x09
     6c4:	82 30       	cpi	r24, 0x02	; 2
     6c6:	40 f0       	brcs	.+16     	; 0x6d8 <__gesf2+0x56>
     6c8:	89 89       	ldd	r24, Y+17	; 0x11
     6ca:	82 30       	cpi	r24, 0x02	; 2
     6cc:	28 f0       	brcs	.+10     	; 0x6d8 <__gesf2+0x56>
     6ce:	c7 01       	movw	r24, r14
     6d0:	b8 01       	movw	r22, r16
     6d2:	0e 94 42 05 	call	0xa84	; 0xa84 <__fpcmp_parts_f>
     6d6:	01 c0       	rjmp	.+2      	; 0x6da <__gesf2+0x58>
     6d8:	8f ef       	ldi	r24, 0xFF	; 255
     6da:	68 96       	adiw	r28, 0x18	; 24
     6dc:	e6 e0       	ldi	r30, 0x06	; 6
     6de:	0c 94 3c 11 	jmp	0x2278	; 0x2278 <__epilogue_restores__+0x18>

000006e2 <__ltsf2>:
     6e2:	a8 e1       	ldi	r26, 0x18	; 24
     6e4:	b0 e0       	ldi	r27, 0x00	; 0
     6e6:	e7 e7       	ldi	r30, 0x77	; 119
     6e8:	f3 e0       	ldi	r31, 0x03	; 3
     6ea:	0c 94 20 11 	jmp	0x2240	; 0x2240 <__prologue_saves__+0x18>
     6ee:	69 83       	std	Y+1, r22	; 0x01
     6f0:	7a 83       	std	Y+2, r23	; 0x02
     6f2:	8b 83       	std	Y+3, r24	; 0x03
     6f4:	9c 83       	std	Y+4, r25	; 0x04
     6f6:	2d 83       	std	Y+5, r18	; 0x05
     6f8:	3e 83       	std	Y+6, r19	; 0x06
     6fa:	4f 83       	std	Y+7, r20	; 0x07
     6fc:	58 87       	std	Y+8, r21	; 0x08
     6fe:	89 e0       	ldi	r24, 0x09	; 9
     700:	e8 2e       	mov	r14, r24
     702:	f1 2c       	mov	r15, r1
     704:	ec 0e       	add	r14, r28
     706:	fd 1e       	adc	r15, r29
     708:	ce 01       	movw	r24, r28
     70a:	01 96       	adiw	r24, 0x01	; 1
     70c:	b7 01       	movw	r22, r14
     70e:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     712:	8e 01       	movw	r16, r28
     714:	0f 5e       	subi	r16, 0xEF	; 239
     716:	1f 4f       	sbci	r17, 0xFF	; 255
     718:	ce 01       	movw	r24, r28
     71a:	05 96       	adiw	r24, 0x05	; 5
     71c:	b8 01       	movw	r22, r16
     71e:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     722:	89 85       	ldd	r24, Y+9	; 0x09
     724:	82 30       	cpi	r24, 0x02	; 2
     726:	40 f0       	brcs	.+16     	; 0x738 <__ltsf2+0x56>
     728:	89 89       	ldd	r24, Y+17	; 0x11
     72a:	82 30       	cpi	r24, 0x02	; 2
     72c:	28 f0       	brcs	.+10     	; 0x738 <__ltsf2+0x56>
     72e:	c7 01       	movw	r24, r14
     730:	b8 01       	movw	r22, r16
     732:	0e 94 42 05 	call	0xa84	; 0xa84 <__fpcmp_parts_f>
     736:	01 c0       	rjmp	.+2      	; 0x73a <__ltsf2+0x58>
     738:	81 e0       	ldi	r24, 0x01	; 1
     73a:	68 96       	adiw	r28, 0x18	; 24
     73c:	e6 e0       	ldi	r30, 0x06	; 6
     73e:	0c 94 3c 11 	jmp	0x2278	; 0x2278 <__epilogue_restores__+0x18>

00000742 <__fixsfsi>:
     742:	ac e0       	ldi	r26, 0x0C	; 12
     744:	b0 e0       	ldi	r27, 0x00	; 0
     746:	e7 ea       	ldi	r30, 0xA7	; 167
     748:	f3 e0       	ldi	r31, 0x03	; 3
     74a:	0c 94 24 11 	jmp	0x2248	; 0x2248 <__prologue_saves__+0x20>
     74e:	69 83       	std	Y+1, r22	; 0x01
     750:	7a 83       	std	Y+2, r23	; 0x02
     752:	8b 83       	std	Y+3, r24	; 0x03
     754:	9c 83       	std	Y+4, r25	; 0x04
     756:	ce 01       	movw	r24, r28
     758:	01 96       	adiw	r24, 0x01	; 1
     75a:	be 01       	movw	r22, r28
     75c:	6b 5f       	subi	r22, 0xFB	; 251
     75e:	7f 4f       	sbci	r23, 0xFF	; 255
     760:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     764:	8d 81       	ldd	r24, Y+5	; 0x05
     766:	82 30       	cpi	r24, 0x02	; 2
     768:	61 f1       	breq	.+88     	; 0x7c2 <__fixsfsi+0x80>
     76a:	82 30       	cpi	r24, 0x02	; 2
     76c:	50 f1       	brcs	.+84     	; 0x7c2 <__fixsfsi+0x80>
     76e:	84 30       	cpi	r24, 0x04	; 4
     770:	21 f4       	brne	.+8      	; 0x77a <__fixsfsi+0x38>
     772:	8e 81       	ldd	r24, Y+6	; 0x06
     774:	88 23       	and	r24, r24
     776:	51 f1       	breq	.+84     	; 0x7cc <__fixsfsi+0x8a>
     778:	2e c0       	rjmp	.+92     	; 0x7d6 <__fixsfsi+0x94>
     77a:	2f 81       	ldd	r18, Y+7	; 0x07
     77c:	38 85       	ldd	r19, Y+8	; 0x08
     77e:	37 fd       	sbrc	r19, 7
     780:	20 c0       	rjmp	.+64     	; 0x7c2 <__fixsfsi+0x80>
     782:	6e 81       	ldd	r22, Y+6	; 0x06
     784:	2f 31       	cpi	r18, 0x1F	; 31
     786:	31 05       	cpc	r19, r1
     788:	1c f0       	brlt	.+6      	; 0x790 <__fixsfsi+0x4e>
     78a:	66 23       	and	r22, r22
     78c:	f9 f0       	breq	.+62     	; 0x7cc <__fixsfsi+0x8a>
     78e:	23 c0       	rjmp	.+70     	; 0x7d6 <__fixsfsi+0x94>
     790:	8e e1       	ldi	r24, 0x1E	; 30
     792:	90 e0       	ldi	r25, 0x00	; 0
     794:	82 1b       	sub	r24, r18
     796:	93 0b       	sbc	r25, r19
     798:	29 85       	ldd	r18, Y+9	; 0x09
     79a:	3a 85       	ldd	r19, Y+10	; 0x0a
     79c:	4b 85       	ldd	r20, Y+11	; 0x0b
     79e:	5c 85       	ldd	r21, Y+12	; 0x0c
     7a0:	04 c0       	rjmp	.+8      	; 0x7aa <__fixsfsi+0x68>
     7a2:	56 95       	lsr	r21
     7a4:	47 95       	ror	r20
     7a6:	37 95       	ror	r19
     7a8:	27 95       	ror	r18
     7aa:	8a 95       	dec	r24
     7ac:	d2 f7       	brpl	.-12     	; 0x7a2 <__fixsfsi+0x60>
     7ae:	66 23       	and	r22, r22
     7b0:	b1 f0       	breq	.+44     	; 0x7de <__fixsfsi+0x9c>
     7b2:	50 95       	com	r21
     7b4:	40 95       	com	r20
     7b6:	30 95       	com	r19
     7b8:	21 95       	neg	r18
     7ba:	3f 4f       	sbci	r19, 0xFF	; 255
     7bc:	4f 4f       	sbci	r20, 0xFF	; 255
     7be:	5f 4f       	sbci	r21, 0xFF	; 255
     7c0:	0e c0       	rjmp	.+28     	; 0x7de <__fixsfsi+0x9c>
     7c2:	20 e0       	ldi	r18, 0x00	; 0
     7c4:	30 e0       	ldi	r19, 0x00	; 0
     7c6:	40 e0       	ldi	r20, 0x00	; 0
     7c8:	50 e0       	ldi	r21, 0x00	; 0
     7ca:	09 c0       	rjmp	.+18     	; 0x7de <__fixsfsi+0x9c>
     7cc:	2f ef       	ldi	r18, 0xFF	; 255
     7ce:	3f ef       	ldi	r19, 0xFF	; 255
     7d0:	4f ef       	ldi	r20, 0xFF	; 255
     7d2:	5f e7       	ldi	r21, 0x7F	; 127
     7d4:	04 c0       	rjmp	.+8      	; 0x7de <__fixsfsi+0x9c>
     7d6:	20 e0       	ldi	r18, 0x00	; 0
     7d8:	30 e0       	ldi	r19, 0x00	; 0
     7da:	40 e0       	ldi	r20, 0x00	; 0
     7dc:	50 e8       	ldi	r21, 0x80	; 128
     7de:	b9 01       	movw	r22, r18
     7e0:	ca 01       	movw	r24, r20
     7e2:	2c 96       	adiw	r28, 0x0c	; 12
     7e4:	e2 e0       	ldi	r30, 0x02	; 2
     7e6:	0c 94 40 11 	jmp	0x2280	; 0x2280 <__epilogue_restores__+0x20>

000007ea <__pack_f>:
     7ea:	df 92       	push	r13
     7ec:	ef 92       	push	r14
     7ee:	ff 92       	push	r15
     7f0:	0f 93       	push	r16
     7f2:	1f 93       	push	r17
     7f4:	fc 01       	movw	r30, r24
     7f6:	e4 80       	ldd	r14, Z+4	; 0x04
     7f8:	f5 80       	ldd	r15, Z+5	; 0x05
     7fa:	06 81       	ldd	r16, Z+6	; 0x06
     7fc:	17 81       	ldd	r17, Z+7	; 0x07
     7fe:	d1 80       	ldd	r13, Z+1	; 0x01
     800:	80 81       	ld	r24, Z
     802:	82 30       	cpi	r24, 0x02	; 2
     804:	48 f4       	brcc	.+18     	; 0x818 <__pack_f+0x2e>
     806:	80 e0       	ldi	r24, 0x00	; 0
     808:	90 e0       	ldi	r25, 0x00	; 0
     80a:	a0 e1       	ldi	r26, 0x10	; 16
     80c:	b0 e0       	ldi	r27, 0x00	; 0
     80e:	e8 2a       	or	r14, r24
     810:	f9 2a       	or	r15, r25
     812:	0a 2b       	or	r16, r26
     814:	1b 2b       	or	r17, r27
     816:	a5 c0       	rjmp	.+330    	; 0x962 <__stack+0x103>
     818:	84 30       	cpi	r24, 0x04	; 4
     81a:	09 f4       	brne	.+2      	; 0x81e <__pack_f+0x34>
     81c:	9f c0       	rjmp	.+318    	; 0x95c <__stack+0xfd>
     81e:	82 30       	cpi	r24, 0x02	; 2
     820:	21 f4       	brne	.+8      	; 0x82a <__pack_f+0x40>
     822:	ee 24       	eor	r14, r14
     824:	ff 24       	eor	r15, r15
     826:	87 01       	movw	r16, r14
     828:	05 c0       	rjmp	.+10     	; 0x834 <__pack_f+0x4a>
     82a:	e1 14       	cp	r14, r1
     82c:	f1 04       	cpc	r15, r1
     82e:	01 05       	cpc	r16, r1
     830:	11 05       	cpc	r17, r1
     832:	19 f4       	brne	.+6      	; 0x83a <__pack_f+0x50>
     834:	e0 e0       	ldi	r30, 0x00	; 0
     836:	f0 e0       	ldi	r31, 0x00	; 0
     838:	96 c0       	rjmp	.+300    	; 0x966 <__stack+0x107>
     83a:	62 81       	ldd	r22, Z+2	; 0x02
     83c:	73 81       	ldd	r23, Z+3	; 0x03
     83e:	9f ef       	ldi	r25, 0xFF	; 255
     840:	62 38       	cpi	r22, 0x82	; 130
     842:	79 07       	cpc	r23, r25
     844:	0c f0       	brlt	.+2      	; 0x848 <__pack_f+0x5e>
     846:	5b c0       	rjmp	.+182    	; 0x8fe <__stack+0x9f>
     848:	22 e8       	ldi	r18, 0x82	; 130
     84a:	3f ef       	ldi	r19, 0xFF	; 255
     84c:	26 1b       	sub	r18, r22
     84e:	37 0b       	sbc	r19, r23
     850:	2a 31       	cpi	r18, 0x1A	; 26
     852:	31 05       	cpc	r19, r1
     854:	2c f0       	brlt	.+10     	; 0x860 <__stack+0x1>
     856:	20 e0       	ldi	r18, 0x00	; 0
     858:	30 e0       	ldi	r19, 0x00	; 0
     85a:	40 e0       	ldi	r20, 0x00	; 0
     85c:	50 e0       	ldi	r21, 0x00	; 0
     85e:	2a c0       	rjmp	.+84     	; 0x8b4 <__stack+0x55>
     860:	b8 01       	movw	r22, r16
     862:	a7 01       	movw	r20, r14
     864:	02 2e       	mov	r0, r18
     866:	04 c0       	rjmp	.+8      	; 0x870 <__stack+0x11>
     868:	76 95       	lsr	r23
     86a:	67 95       	ror	r22
     86c:	57 95       	ror	r21
     86e:	47 95       	ror	r20
     870:	0a 94       	dec	r0
     872:	d2 f7       	brpl	.-12     	; 0x868 <__stack+0x9>
     874:	81 e0       	ldi	r24, 0x01	; 1
     876:	90 e0       	ldi	r25, 0x00	; 0
     878:	a0 e0       	ldi	r26, 0x00	; 0
     87a:	b0 e0       	ldi	r27, 0x00	; 0
     87c:	04 c0       	rjmp	.+8      	; 0x886 <__stack+0x27>
     87e:	88 0f       	add	r24, r24
     880:	99 1f       	adc	r25, r25
     882:	aa 1f       	adc	r26, r26
     884:	bb 1f       	adc	r27, r27
     886:	2a 95       	dec	r18
     888:	d2 f7       	brpl	.-12     	; 0x87e <__stack+0x1f>
     88a:	01 97       	sbiw	r24, 0x01	; 1
     88c:	a1 09       	sbc	r26, r1
     88e:	b1 09       	sbc	r27, r1
     890:	8e 21       	and	r24, r14
     892:	9f 21       	and	r25, r15
     894:	a0 23       	and	r26, r16
     896:	b1 23       	and	r27, r17
     898:	00 97       	sbiw	r24, 0x00	; 0
     89a:	a1 05       	cpc	r26, r1
     89c:	b1 05       	cpc	r27, r1
     89e:	21 f0       	breq	.+8      	; 0x8a8 <__stack+0x49>
     8a0:	81 e0       	ldi	r24, 0x01	; 1
     8a2:	90 e0       	ldi	r25, 0x00	; 0
     8a4:	a0 e0       	ldi	r26, 0x00	; 0
     8a6:	b0 e0       	ldi	r27, 0x00	; 0
     8a8:	9a 01       	movw	r18, r20
     8aa:	ab 01       	movw	r20, r22
     8ac:	28 2b       	or	r18, r24
     8ae:	39 2b       	or	r19, r25
     8b0:	4a 2b       	or	r20, r26
     8b2:	5b 2b       	or	r21, r27
     8b4:	da 01       	movw	r26, r20
     8b6:	c9 01       	movw	r24, r18
     8b8:	8f 77       	andi	r24, 0x7F	; 127
     8ba:	90 70       	andi	r25, 0x00	; 0
     8bc:	a0 70       	andi	r26, 0x00	; 0
     8be:	b0 70       	andi	r27, 0x00	; 0
     8c0:	80 34       	cpi	r24, 0x40	; 64
     8c2:	91 05       	cpc	r25, r1
     8c4:	a1 05       	cpc	r26, r1
     8c6:	b1 05       	cpc	r27, r1
     8c8:	39 f4       	brne	.+14     	; 0x8d8 <__stack+0x79>
     8ca:	27 ff       	sbrs	r18, 7
     8cc:	09 c0       	rjmp	.+18     	; 0x8e0 <__stack+0x81>
     8ce:	20 5c       	subi	r18, 0xC0	; 192
     8d0:	3f 4f       	sbci	r19, 0xFF	; 255
     8d2:	4f 4f       	sbci	r20, 0xFF	; 255
     8d4:	5f 4f       	sbci	r21, 0xFF	; 255
     8d6:	04 c0       	rjmp	.+8      	; 0x8e0 <__stack+0x81>
     8d8:	21 5c       	subi	r18, 0xC1	; 193
     8da:	3f 4f       	sbci	r19, 0xFF	; 255
     8dc:	4f 4f       	sbci	r20, 0xFF	; 255
     8de:	5f 4f       	sbci	r21, 0xFF	; 255
     8e0:	e0 e0       	ldi	r30, 0x00	; 0
     8e2:	f0 e0       	ldi	r31, 0x00	; 0
     8e4:	20 30       	cpi	r18, 0x00	; 0
     8e6:	a0 e0       	ldi	r26, 0x00	; 0
     8e8:	3a 07       	cpc	r19, r26
     8ea:	a0 e0       	ldi	r26, 0x00	; 0
     8ec:	4a 07       	cpc	r20, r26
     8ee:	a0 e4       	ldi	r26, 0x40	; 64
     8f0:	5a 07       	cpc	r21, r26
     8f2:	10 f0       	brcs	.+4      	; 0x8f8 <__stack+0x99>
     8f4:	e1 e0       	ldi	r30, 0x01	; 1
     8f6:	f0 e0       	ldi	r31, 0x00	; 0
     8f8:	79 01       	movw	r14, r18
     8fa:	8a 01       	movw	r16, r20
     8fc:	27 c0       	rjmp	.+78     	; 0x94c <__stack+0xed>
     8fe:	60 38       	cpi	r22, 0x80	; 128
     900:	71 05       	cpc	r23, r1
     902:	64 f5       	brge	.+88     	; 0x95c <__stack+0xfd>
     904:	fb 01       	movw	r30, r22
     906:	e1 58       	subi	r30, 0x81	; 129
     908:	ff 4f       	sbci	r31, 0xFF	; 255
     90a:	d8 01       	movw	r26, r16
     90c:	c7 01       	movw	r24, r14
     90e:	8f 77       	andi	r24, 0x7F	; 127
     910:	90 70       	andi	r25, 0x00	; 0
     912:	a0 70       	andi	r26, 0x00	; 0
     914:	b0 70       	andi	r27, 0x00	; 0
     916:	80 34       	cpi	r24, 0x40	; 64
     918:	91 05       	cpc	r25, r1
     91a:	a1 05       	cpc	r26, r1
     91c:	b1 05       	cpc	r27, r1
     91e:	39 f4       	brne	.+14     	; 0x92e <__stack+0xcf>
     920:	e7 fe       	sbrs	r14, 7
     922:	0d c0       	rjmp	.+26     	; 0x93e <__stack+0xdf>
     924:	80 e4       	ldi	r24, 0x40	; 64
     926:	90 e0       	ldi	r25, 0x00	; 0
     928:	a0 e0       	ldi	r26, 0x00	; 0
     92a:	b0 e0       	ldi	r27, 0x00	; 0
     92c:	04 c0       	rjmp	.+8      	; 0x936 <__stack+0xd7>
     92e:	8f e3       	ldi	r24, 0x3F	; 63
     930:	90 e0       	ldi	r25, 0x00	; 0
     932:	a0 e0       	ldi	r26, 0x00	; 0
     934:	b0 e0       	ldi	r27, 0x00	; 0
     936:	e8 0e       	add	r14, r24
     938:	f9 1e       	adc	r15, r25
     93a:	0a 1f       	adc	r16, r26
     93c:	1b 1f       	adc	r17, r27
     93e:	17 ff       	sbrs	r17, 7
     940:	05 c0       	rjmp	.+10     	; 0x94c <__stack+0xed>
     942:	16 95       	lsr	r17
     944:	07 95       	ror	r16
     946:	f7 94       	ror	r15
     948:	e7 94       	ror	r14
     94a:	31 96       	adiw	r30, 0x01	; 1
     94c:	87 e0       	ldi	r24, 0x07	; 7
     94e:	16 95       	lsr	r17
     950:	07 95       	ror	r16
     952:	f7 94       	ror	r15
     954:	e7 94       	ror	r14
     956:	8a 95       	dec	r24
     958:	d1 f7       	brne	.-12     	; 0x94e <__stack+0xef>
     95a:	05 c0       	rjmp	.+10     	; 0x966 <__stack+0x107>
     95c:	ee 24       	eor	r14, r14
     95e:	ff 24       	eor	r15, r15
     960:	87 01       	movw	r16, r14
     962:	ef ef       	ldi	r30, 0xFF	; 255
     964:	f0 e0       	ldi	r31, 0x00	; 0
     966:	6e 2f       	mov	r22, r30
     968:	67 95       	ror	r22
     96a:	66 27       	eor	r22, r22
     96c:	67 95       	ror	r22
     96e:	90 2f       	mov	r25, r16
     970:	9f 77       	andi	r25, 0x7F	; 127
     972:	d7 94       	ror	r13
     974:	dd 24       	eor	r13, r13
     976:	d7 94       	ror	r13
     978:	8e 2f       	mov	r24, r30
     97a:	86 95       	lsr	r24
     97c:	49 2f       	mov	r20, r25
     97e:	46 2b       	or	r20, r22
     980:	58 2f       	mov	r21, r24
     982:	5d 29       	or	r21, r13
     984:	b7 01       	movw	r22, r14
     986:	ca 01       	movw	r24, r20
     988:	1f 91       	pop	r17
     98a:	0f 91       	pop	r16
     98c:	ff 90       	pop	r15
     98e:	ef 90       	pop	r14
     990:	df 90       	pop	r13
     992:	08 95       	ret

00000994 <__unpack_f>:
     994:	fc 01       	movw	r30, r24
     996:	db 01       	movw	r26, r22
     998:	40 81       	ld	r20, Z
     99a:	51 81       	ldd	r21, Z+1	; 0x01
     99c:	22 81       	ldd	r18, Z+2	; 0x02
     99e:	62 2f       	mov	r22, r18
     9a0:	6f 77       	andi	r22, 0x7F	; 127
     9a2:	70 e0       	ldi	r23, 0x00	; 0
     9a4:	22 1f       	adc	r18, r18
     9a6:	22 27       	eor	r18, r18
     9a8:	22 1f       	adc	r18, r18
     9aa:	93 81       	ldd	r25, Z+3	; 0x03
     9ac:	89 2f       	mov	r24, r25
     9ae:	88 0f       	add	r24, r24
     9b0:	82 2b       	or	r24, r18
     9b2:	28 2f       	mov	r18, r24
     9b4:	30 e0       	ldi	r19, 0x00	; 0
     9b6:	99 1f       	adc	r25, r25
     9b8:	99 27       	eor	r25, r25
     9ba:	99 1f       	adc	r25, r25
     9bc:	11 96       	adiw	r26, 0x01	; 1
     9be:	9c 93       	st	X, r25
     9c0:	11 97       	sbiw	r26, 0x01	; 1
     9c2:	21 15       	cp	r18, r1
     9c4:	31 05       	cpc	r19, r1
     9c6:	a9 f5       	brne	.+106    	; 0xa32 <__unpack_f+0x9e>
     9c8:	41 15       	cp	r20, r1
     9ca:	51 05       	cpc	r21, r1
     9cc:	61 05       	cpc	r22, r1
     9ce:	71 05       	cpc	r23, r1
     9d0:	11 f4       	brne	.+4      	; 0x9d6 <__unpack_f+0x42>
     9d2:	82 e0       	ldi	r24, 0x02	; 2
     9d4:	37 c0       	rjmp	.+110    	; 0xa44 <__unpack_f+0xb0>
     9d6:	82 e8       	ldi	r24, 0x82	; 130
     9d8:	9f ef       	ldi	r25, 0xFF	; 255
     9da:	13 96       	adiw	r26, 0x03	; 3
     9dc:	9c 93       	st	X, r25
     9de:	8e 93       	st	-X, r24
     9e0:	12 97       	sbiw	r26, 0x02	; 2
     9e2:	9a 01       	movw	r18, r20
     9e4:	ab 01       	movw	r20, r22
     9e6:	67 e0       	ldi	r22, 0x07	; 7
     9e8:	22 0f       	add	r18, r18
     9ea:	33 1f       	adc	r19, r19
     9ec:	44 1f       	adc	r20, r20
     9ee:	55 1f       	adc	r21, r21
     9f0:	6a 95       	dec	r22
     9f2:	d1 f7       	brne	.-12     	; 0x9e8 <__unpack_f+0x54>
     9f4:	83 e0       	ldi	r24, 0x03	; 3
     9f6:	8c 93       	st	X, r24
     9f8:	0d c0       	rjmp	.+26     	; 0xa14 <__unpack_f+0x80>
     9fa:	22 0f       	add	r18, r18
     9fc:	33 1f       	adc	r19, r19
     9fe:	44 1f       	adc	r20, r20
     a00:	55 1f       	adc	r21, r21
     a02:	12 96       	adiw	r26, 0x02	; 2
     a04:	8d 91       	ld	r24, X+
     a06:	9c 91       	ld	r25, X
     a08:	13 97       	sbiw	r26, 0x03	; 3
     a0a:	01 97       	sbiw	r24, 0x01	; 1
     a0c:	13 96       	adiw	r26, 0x03	; 3
     a0e:	9c 93       	st	X, r25
     a10:	8e 93       	st	-X, r24
     a12:	12 97       	sbiw	r26, 0x02	; 2
     a14:	20 30       	cpi	r18, 0x00	; 0
     a16:	80 e0       	ldi	r24, 0x00	; 0
     a18:	38 07       	cpc	r19, r24
     a1a:	80 e0       	ldi	r24, 0x00	; 0
     a1c:	48 07       	cpc	r20, r24
     a1e:	80 e4       	ldi	r24, 0x40	; 64
     a20:	58 07       	cpc	r21, r24
     a22:	58 f3       	brcs	.-42     	; 0x9fa <__unpack_f+0x66>
     a24:	14 96       	adiw	r26, 0x04	; 4
     a26:	2d 93       	st	X+, r18
     a28:	3d 93       	st	X+, r19
     a2a:	4d 93       	st	X+, r20
     a2c:	5c 93       	st	X, r21
     a2e:	17 97       	sbiw	r26, 0x07	; 7
     a30:	08 95       	ret
     a32:	2f 3f       	cpi	r18, 0xFF	; 255
     a34:	31 05       	cpc	r19, r1
     a36:	79 f4       	brne	.+30     	; 0xa56 <__unpack_f+0xc2>
     a38:	41 15       	cp	r20, r1
     a3a:	51 05       	cpc	r21, r1
     a3c:	61 05       	cpc	r22, r1
     a3e:	71 05       	cpc	r23, r1
     a40:	19 f4       	brne	.+6      	; 0xa48 <__unpack_f+0xb4>
     a42:	84 e0       	ldi	r24, 0x04	; 4
     a44:	8c 93       	st	X, r24
     a46:	08 95       	ret
     a48:	64 ff       	sbrs	r22, 4
     a4a:	03 c0       	rjmp	.+6      	; 0xa52 <__unpack_f+0xbe>
     a4c:	81 e0       	ldi	r24, 0x01	; 1
     a4e:	8c 93       	st	X, r24
     a50:	12 c0       	rjmp	.+36     	; 0xa76 <__unpack_f+0xe2>
     a52:	1c 92       	st	X, r1
     a54:	10 c0       	rjmp	.+32     	; 0xa76 <__unpack_f+0xe2>
     a56:	2f 57       	subi	r18, 0x7F	; 127
     a58:	30 40       	sbci	r19, 0x00	; 0
     a5a:	13 96       	adiw	r26, 0x03	; 3
     a5c:	3c 93       	st	X, r19
     a5e:	2e 93       	st	-X, r18
     a60:	12 97       	sbiw	r26, 0x02	; 2
     a62:	83 e0       	ldi	r24, 0x03	; 3
     a64:	8c 93       	st	X, r24
     a66:	87 e0       	ldi	r24, 0x07	; 7
     a68:	44 0f       	add	r20, r20
     a6a:	55 1f       	adc	r21, r21
     a6c:	66 1f       	adc	r22, r22
     a6e:	77 1f       	adc	r23, r23
     a70:	8a 95       	dec	r24
     a72:	d1 f7       	brne	.-12     	; 0xa68 <__unpack_f+0xd4>
     a74:	70 64       	ori	r23, 0x40	; 64
     a76:	14 96       	adiw	r26, 0x04	; 4
     a78:	4d 93       	st	X+, r20
     a7a:	5d 93       	st	X+, r21
     a7c:	6d 93       	st	X+, r22
     a7e:	7c 93       	st	X, r23
     a80:	17 97       	sbiw	r26, 0x07	; 7
     a82:	08 95       	ret

00000a84 <__fpcmp_parts_f>:
     a84:	1f 93       	push	r17
     a86:	dc 01       	movw	r26, r24
     a88:	fb 01       	movw	r30, r22
     a8a:	9c 91       	ld	r25, X
     a8c:	92 30       	cpi	r25, 0x02	; 2
     a8e:	08 f4       	brcc	.+2      	; 0xa92 <__fpcmp_parts_f+0xe>
     a90:	47 c0       	rjmp	.+142    	; 0xb20 <__fpcmp_parts_f+0x9c>
     a92:	80 81       	ld	r24, Z
     a94:	82 30       	cpi	r24, 0x02	; 2
     a96:	08 f4       	brcc	.+2      	; 0xa9a <__fpcmp_parts_f+0x16>
     a98:	43 c0       	rjmp	.+134    	; 0xb20 <__fpcmp_parts_f+0x9c>
     a9a:	94 30       	cpi	r25, 0x04	; 4
     a9c:	51 f4       	brne	.+20     	; 0xab2 <__fpcmp_parts_f+0x2e>
     a9e:	11 96       	adiw	r26, 0x01	; 1
     aa0:	1c 91       	ld	r17, X
     aa2:	84 30       	cpi	r24, 0x04	; 4
     aa4:	99 f5       	brne	.+102    	; 0xb0c <__fpcmp_parts_f+0x88>
     aa6:	81 81       	ldd	r24, Z+1	; 0x01
     aa8:	68 2f       	mov	r22, r24
     aaa:	70 e0       	ldi	r23, 0x00	; 0
     aac:	61 1b       	sub	r22, r17
     aae:	71 09       	sbc	r23, r1
     ab0:	3f c0       	rjmp	.+126    	; 0xb30 <__fpcmp_parts_f+0xac>
     ab2:	84 30       	cpi	r24, 0x04	; 4
     ab4:	21 f0       	breq	.+8      	; 0xabe <__fpcmp_parts_f+0x3a>
     ab6:	92 30       	cpi	r25, 0x02	; 2
     ab8:	31 f4       	brne	.+12     	; 0xac6 <__fpcmp_parts_f+0x42>
     aba:	82 30       	cpi	r24, 0x02	; 2
     abc:	b9 f1       	breq	.+110    	; 0xb2c <__fpcmp_parts_f+0xa8>
     abe:	81 81       	ldd	r24, Z+1	; 0x01
     ac0:	88 23       	and	r24, r24
     ac2:	89 f1       	breq	.+98     	; 0xb26 <__fpcmp_parts_f+0xa2>
     ac4:	2d c0       	rjmp	.+90     	; 0xb20 <__fpcmp_parts_f+0x9c>
     ac6:	11 96       	adiw	r26, 0x01	; 1
     ac8:	1c 91       	ld	r17, X
     aca:	11 97       	sbiw	r26, 0x01	; 1
     acc:	82 30       	cpi	r24, 0x02	; 2
     ace:	f1 f0       	breq	.+60     	; 0xb0c <__fpcmp_parts_f+0x88>
     ad0:	81 81       	ldd	r24, Z+1	; 0x01
     ad2:	18 17       	cp	r17, r24
     ad4:	d9 f4       	brne	.+54     	; 0xb0c <__fpcmp_parts_f+0x88>
     ad6:	12 96       	adiw	r26, 0x02	; 2
     ad8:	2d 91       	ld	r18, X+
     ada:	3c 91       	ld	r19, X
     adc:	13 97       	sbiw	r26, 0x03	; 3
     ade:	82 81       	ldd	r24, Z+2	; 0x02
     ae0:	93 81       	ldd	r25, Z+3	; 0x03
     ae2:	82 17       	cp	r24, r18
     ae4:	93 07       	cpc	r25, r19
     ae6:	94 f0       	brlt	.+36     	; 0xb0c <__fpcmp_parts_f+0x88>
     ae8:	28 17       	cp	r18, r24
     aea:	39 07       	cpc	r19, r25
     aec:	bc f0       	brlt	.+46     	; 0xb1c <__fpcmp_parts_f+0x98>
     aee:	14 96       	adiw	r26, 0x04	; 4
     af0:	8d 91       	ld	r24, X+
     af2:	9d 91       	ld	r25, X+
     af4:	0d 90       	ld	r0, X+
     af6:	bc 91       	ld	r27, X
     af8:	a0 2d       	mov	r26, r0
     afa:	24 81       	ldd	r18, Z+4	; 0x04
     afc:	35 81       	ldd	r19, Z+5	; 0x05
     afe:	46 81       	ldd	r20, Z+6	; 0x06
     b00:	57 81       	ldd	r21, Z+7	; 0x07
     b02:	28 17       	cp	r18, r24
     b04:	39 07       	cpc	r19, r25
     b06:	4a 07       	cpc	r20, r26
     b08:	5b 07       	cpc	r21, r27
     b0a:	18 f4       	brcc	.+6      	; 0xb12 <__fpcmp_parts_f+0x8e>
     b0c:	11 23       	and	r17, r17
     b0e:	41 f0       	breq	.+16     	; 0xb20 <__fpcmp_parts_f+0x9c>
     b10:	0a c0       	rjmp	.+20     	; 0xb26 <__fpcmp_parts_f+0xa2>
     b12:	82 17       	cp	r24, r18
     b14:	93 07       	cpc	r25, r19
     b16:	a4 07       	cpc	r26, r20
     b18:	b5 07       	cpc	r27, r21
     b1a:	40 f4       	brcc	.+16     	; 0xb2c <__fpcmp_parts_f+0xa8>
     b1c:	11 23       	and	r17, r17
     b1e:	19 f0       	breq	.+6      	; 0xb26 <__fpcmp_parts_f+0xa2>
     b20:	61 e0       	ldi	r22, 0x01	; 1
     b22:	70 e0       	ldi	r23, 0x00	; 0
     b24:	05 c0       	rjmp	.+10     	; 0xb30 <__fpcmp_parts_f+0xac>
     b26:	6f ef       	ldi	r22, 0xFF	; 255
     b28:	7f ef       	ldi	r23, 0xFF	; 255
     b2a:	02 c0       	rjmp	.+4      	; 0xb30 <__fpcmp_parts_f+0xac>
     b2c:	60 e0       	ldi	r22, 0x00	; 0
     b2e:	70 e0       	ldi	r23, 0x00	; 0
     b30:	cb 01       	movw	r24, r22
     b32:	1f 91       	pop	r17
     b34:	08 95       	ret

00000b36 <main>:
#include "twi.h"
#include <util/delay.h>

#define MEM_ADDRESS	0x0011

int main(void){
     b36:	0f 93       	push	r16
     b38:	1f 93       	push	r17
     b3a:	df 93       	push	r29
     b3c:	cf 93       	push	r28
     b3e:	cd b7       	in	r28, 0x3d	; 61
     b40:	de b7       	in	r29, 0x3e	; 62
     b42:	c8 57       	subi	r28, 0x78	; 120
     b44:	d0 40       	sbci	r29, 0x00	; 0
     b46:	0f b6       	in	r0, 0x3f	; 63
     b48:	f8 94       	cli
     b4a:	de bf       	out	0x3e, r29	; 62
     b4c:	0f be       	out	0x3f, r0	; 63
     b4e:	cd bf       	out	0x3d, r28	; 61
	/* Initializing modules */
	Buzzer_init();
     b50:	0e 94 fe 09 	call	0x13fc	; 0x13fc <Buzzer_init>
	DcMotor_init();
     b54:	0e 94 06 0e 	call	0x1c0c	; 0x1c0c <DcMotor_init>
	UART_ConfigType uart_configs = {9600,DISABLED,ONE_BIT,BIT_8};
     b58:	ce 01       	movw	r24, r28
     b5a:	89 5a       	subi	r24, 0xA9	; 169
     b5c:	9f 4f       	sbci	r25, 0xFF	; 255
     b5e:	e1 96       	adiw	r28, 0x31	; 49
     b60:	9f af       	std	Y+63, r25	; 0x3f
     b62:	8e af       	std	Y+62, r24	; 0x3e
     b64:	e1 97       	sbiw	r28, 0x31	; 49
     b66:	2b e6       	ldi	r18, 0x6B	; 107
     b68:	30 e0       	ldi	r19, 0x00	; 0
     b6a:	e3 96       	adiw	r28, 0x33	; 51
     b6c:	3f af       	std	Y+63, r19	; 0x3f
     b6e:	2e af       	std	Y+62, r18	; 0x3e
     b70:	e3 97       	sbiw	r28, 0x33	; 51
     b72:	37 e0       	ldi	r19, 0x07	; 7
     b74:	e4 96       	adiw	r28, 0x34	; 52
     b76:	3f af       	std	Y+63, r19	; 0x3f
     b78:	e4 97       	sbiw	r28, 0x34	; 52
     b7a:	e3 96       	adiw	r28, 0x33	; 51
     b7c:	ee ad       	ldd	r30, Y+62	; 0x3e
     b7e:	ff ad       	ldd	r31, Y+63	; 0x3f
     b80:	e3 97       	sbiw	r28, 0x33	; 51
     b82:	00 80       	ld	r0, Z
     b84:	e3 96       	adiw	r28, 0x33	; 51
     b86:	2e ad       	ldd	r18, Y+62	; 0x3e
     b88:	3f ad       	ldd	r19, Y+63	; 0x3f
     b8a:	e3 97       	sbiw	r28, 0x33	; 51
     b8c:	2f 5f       	subi	r18, 0xFF	; 255
     b8e:	3f 4f       	sbci	r19, 0xFF	; 255
     b90:	e3 96       	adiw	r28, 0x33	; 51
     b92:	3f af       	std	Y+63, r19	; 0x3f
     b94:	2e af       	std	Y+62, r18	; 0x3e
     b96:	e3 97       	sbiw	r28, 0x33	; 51
     b98:	e1 96       	adiw	r28, 0x31	; 49
     b9a:	ee ad       	ldd	r30, Y+62	; 0x3e
     b9c:	ff ad       	ldd	r31, Y+63	; 0x3f
     b9e:	e1 97       	sbiw	r28, 0x31	; 49
     ba0:	00 82       	st	Z, r0
     ba2:	e1 96       	adiw	r28, 0x31	; 49
     ba4:	2e ad       	ldd	r18, Y+62	; 0x3e
     ba6:	3f ad       	ldd	r19, Y+63	; 0x3f
     ba8:	e1 97       	sbiw	r28, 0x31	; 49
     baa:	2f 5f       	subi	r18, 0xFF	; 255
     bac:	3f 4f       	sbci	r19, 0xFF	; 255
     bae:	e1 96       	adiw	r28, 0x31	; 49
     bb0:	3f af       	std	Y+63, r19	; 0x3f
     bb2:	2e af       	std	Y+62, r18	; 0x3e
     bb4:	e1 97       	sbiw	r28, 0x31	; 49
     bb6:	e4 96       	adiw	r28, 0x34	; 52
     bb8:	3f ad       	ldd	r19, Y+63	; 0x3f
     bba:	e4 97       	sbiw	r28, 0x34	; 52
     bbc:	31 50       	subi	r19, 0x01	; 1
     bbe:	e4 96       	adiw	r28, 0x34	; 52
     bc0:	3f af       	std	Y+63, r19	; 0x3f
     bc2:	e4 97       	sbiw	r28, 0x34	; 52
     bc4:	e4 96       	adiw	r28, 0x34	; 52
     bc6:	8f ad       	ldd	r24, Y+63	; 0x3f
     bc8:	e4 97       	sbiw	r28, 0x34	; 52
     bca:	88 23       	and	r24, r24
     bcc:	b1 f6       	brne	.-84     	; 0xb7a <main+0x44>
	UART_init(&uart_configs);
     bce:	ce 01       	movw	r24, r28
     bd0:	89 5a       	subi	r24, 0xA9	; 169
     bd2:	9f 4f       	sbci	r25, 0xFF	; 255
     bd4:	0e 94 d7 0f 	call	0x1fae	; 0x1fae <UART_init>
	TWI_ConfigType twi_configs = {0b00000010, 0x02,PRESCALER_1};
     bd8:	ce 01       	movw	r24, r28
     bda:	82 5a       	subi	r24, 0xA2	; 162
     bdc:	9f 4f       	sbci	r25, 0xFF	; 255
     bde:	e6 96       	adiw	r28, 0x36	; 54
     be0:	9f af       	std	Y+63, r25	; 0x3f
     be2:	8e af       	std	Y+62, r24	; 0x3e
     be4:	e6 97       	sbiw	r28, 0x36	; 54
     be6:	e8 e6       	ldi	r30, 0x68	; 104
     be8:	f0 e0       	ldi	r31, 0x00	; 0
     bea:	e8 96       	adiw	r28, 0x38	; 56
     bec:	ff af       	std	Y+63, r31	; 0x3f
     bee:	ee af       	std	Y+62, r30	; 0x3e
     bf0:	e8 97       	sbiw	r28, 0x38	; 56
     bf2:	f3 e0       	ldi	r31, 0x03	; 3
     bf4:	e9 96       	adiw	r28, 0x39	; 57
     bf6:	ff af       	std	Y+63, r31	; 0x3f
     bf8:	e9 97       	sbiw	r28, 0x39	; 57
     bfa:	e8 96       	adiw	r28, 0x38	; 56
     bfc:	ee ad       	ldd	r30, Y+62	; 0x3e
     bfe:	ff ad       	ldd	r31, Y+63	; 0x3f
     c00:	e8 97       	sbiw	r28, 0x38	; 56
     c02:	00 80       	ld	r0, Z
     c04:	e8 96       	adiw	r28, 0x38	; 56
     c06:	2e ad       	ldd	r18, Y+62	; 0x3e
     c08:	3f ad       	ldd	r19, Y+63	; 0x3f
     c0a:	e8 97       	sbiw	r28, 0x38	; 56
     c0c:	2f 5f       	subi	r18, 0xFF	; 255
     c0e:	3f 4f       	sbci	r19, 0xFF	; 255
     c10:	e8 96       	adiw	r28, 0x38	; 56
     c12:	3f af       	std	Y+63, r19	; 0x3f
     c14:	2e af       	std	Y+62, r18	; 0x3e
     c16:	e8 97       	sbiw	r28, 0x38	; 56
     c18:	e6 96       	adiw	r28, 0x36	; 54
     c1a:	ee ad       	ldd	r30, Y+62	; 0x3e
     c1c:	ff ad       	ldd	r31, Y+63	; 0x3f
     c1e:	e6 97       	sbiw	r28, 0x36	; 54
     c20:	00 82       	st	Z, r0
     c22:	e6 96       	adiw	r28, 0x36	; 54
     c24:	2e ad       	ldd	r18, Y+62	; 0x3e
     c26:	3f ad       	ldd	r19, Y+63	; 0x3f
     c28:	e6 97       	sbiw	r28, 0x36	; 54
     c2a:	2f 5f       	subi	r18, 0xFF	; 255
     c2c:	3f 4f       	sbci	r19, 0xFF	; 255
     c2e:	e6 96       	adiw	r28, 0x36	; 54
     c30:	3f af       	std	Y+63, r19	; 0x3f
     c32:	2e af       	std	Y+62, r18	; 0x3e
     c34:	e6 97       	sbiw	r28, 0x36	; 54
     c36:	e9 96       	adiw	r28, 0x39	; 57
     c38:	3f ad       	ldd	r19, Y+63	; 0x3f
     c3a:	e9 97       	sbiw	r28, 0x39	; 57
     c3c:	31 50       	subi	r19, 0x01	; 1
     c3e:	e9 96       	adiw	r28, 0x39	; 57
     c40:	3f af       	std	Y+63, r19	; 0x3f
     c42:	e9 97       	sbiw	r28, 0x39	; 57
     c44:	e9 96       	adiw	r28, 0x39	; 57
     c46:	8f ad       	ldd	r24, Y+63	; 0x3f
     c48:	e9 97       	sbiw	r28, 0x39	; 57
     c4a:	88 23       	and	r24, r24
     c4c:	b1 f6       	brne	.-84     	; 0xbfa <main+0xc4>
	TWI_init(&twi_configs);
     c4e:	ce 01       	movw	r24, r28
     c50:	82 5a       	subi	r24, 0xA2	; 162
     c52:	9f 4f       	sbci	r25, 0xFF	; 255
     c54:	0e 94 4e 0f 	call	0x1e9c	; 0x1e9c <TWI_init>
	uint8 password[6];
	uint8 saved_pass[6];
	uint8 i;

	while(1){
		cmd = UART_recieveByte();
     c58:	0e 94 63 10 	call	0x20c6	; 0x20c6 <UART_recieveByte>
     c5c:	fe 01       	movw	r30, r28
     c5e:	ea 5a       	subi	r30, 0xAA	; 170
     c60:	ff 4f       	sbci	r31, 0xFF	; 255
     c62:	80 83       	st	Z, r24

		switch(cmd){
     c64:	fe 01       	movw	r30, r28
     c66:	ea 5a       	subi	r30, 0xAA	; 170
     c68:	ff 4f       	sbci	r31, 0xFF	; 255
     c6a:	80 81       	ld	r24, Z
     c6c:	e8 2f       	mov	r30, r24
     c6e:	f0 e0       	ldi	r31, 0x00	; 0
     c70:	af 96       	adiw	r28, 0x2f	; 47
     c72:	ff af       	std	Y+63, r31	; 0x3f
     c74:	ee af       	std	Y+62, r30	; 0x3e
     c76:	af 97       	sbiw	r28, 0x2f	; 47
     c78:	af 96       	adiw	r28, 0x2f	; 47
     c7a:	2e ad       	ldd	r18, Y+62	; 0x3e
     c7c:	3f ad       	ldd	r19, Y+63	; 0x3f
     c7e:	af 97       	sbiw	r28, 0x2f	; 47
     c80:	2c 30       	cpi	r18, 0x0C	; 12
     c82:	31 05       	cpc	r19, r1
     c84:	09 f4       	brne	.+2      	; 0xc88 <main+0x152>
     c86:	23 c1       	rjmp	.+582    	; 0xece <main+0x398>
     c88:	af 96       	adiw	r28, 0x2f	; 47
     c8a:	8e ad       	ldd	r24, Y+62	; 0x3e
     c8c:	9f ad       	ldd	r25, Y+63	; 0x3f
     c8e:	af 97       	sbiw	r28, 0x2f	; 47
     c90:	8d 30       	cpi	r24, 0x0D	; 13
     c92:	91 05       	cpc	r25, r1
     c94:	44 f4       	brge	.+16     	; 0xca6 <main+0x170>
     c96:	af 96       	adiw	r28, 0x2f	; 47
     c98:	ee ad       	ldd	r30, Y+62	; 0x3e
     c9a:	ff ad       	ldd	r31, Y+63	; 0x3f
     c9c:	af 97       	sbiw	r28, 0x2f	; 47
     c9e:	eb 30       	cpi	r30, 0x0B	; 11
     ca0:	f1 05       	cpc	r31, r1
     ca2:	91 f0       	breq	.+36     	; 0xcc8 <main+0x192>
     ca4:	d9 cf       	rjmp	.-78     	; 0xc58 <main+0x122>
     ca6:	af 96       	adiw	r28, 0x2f	; 47
     ca8:	2e ad       	ldd	r18, Y+62	; 0x3e
     caa:	3f ad       	ldd	r19, Y+63	; 0x3f
     cac:	af 97       	sbiw	r28, 0x2f	; 47
     cae:	25 31       	cpi	r18, 0x15	; 21
     cb0:	31 05       	cpc	r19, r1
     cb2:	09 f4       	brne	.+2      	; 0xcb6 <main+0x180>
     cb4:	c5 c1       	rjmp	.+906    	; 0x1040 <main+0x50a>
     cb6:	af 96       	adiw	r28, 0x2f	; 47
     cb8:	8e ad       	ldd	r24, Y+62	; 0x3e
     cba:	9f ad       	ldd	r25, Y+63	; 0x3f
     cbc:	af 97       	sbiw	r28, 0x2f	; 47
     cbe:	8f 31       	cpi	r24, 0x1F	; 31
     cc0:	91 05       	cpc	r25, r1
     cc2:	09 f4       	brne	.+2      	; 0xcc6 <main+0x190>
     cc4:	24 c3       	rjmp	.+1608   	; 0x130e <main+0x7d8>
     cc6:	c8 cf       	rjmp	.-112    	; 0xc58 <main+0x122>
		/* ***************************************************************
		 * FIRST COMMAND -- Checking if a given password is saved in memory
		 * ***************************************************************/
		case CHECK_PASS_EXISTS_CMD:
			/* Receive String & Read password from EEPROM */
			UART_receiveString(password);
     cc8:	ce 01       	movw	r24, r28
     cca:	8f 59       	subi	r24, 0x9F	; 159
     ccc:	9f 4f       	sbci	r25, 0xFF	; 255
     cce:	0e 94 9b 10 	call	0x2136	; 0x2136 <UART_receiveString>
			for(i=0;i<PASS_SIZE;i++){
     cd2:	fe 01       	movw	r30, r28
     cd4:	eb 5a       	subi	r30, 0xAB	; 171
     cd6:	ff 4f       	sbci	r31, 0xFF	; 255
     cd8:	10 82       	st	Z, r1
     cda:	d3 c0       	rjmp	.+422    	; 0xe82 <main+0x34c>
				EEPROM_readByte(MEM_ADDRESS+i, &saved_pass[i]);
     cdc:	fe 01       	movw	r30, r28
     cde:	eb 5a       	subi	r30, 0xAB	; 171
     ce0:	ff 4f       	sbci	r31, 0xFF	; 255
     ce2:	80 81       	ld	r24, Z
     ce4:	88 2f       	mov	r24, r24
     ce6:	90 e0       	ldi	r25, 0x00	; 0
     ce8:	41 96       	adiw	r24, 0x11	; 17
     cea:	ac 01       	movw	r20, r24
     cec:	fe 01       	movw	r30, r28
     cee:	eb 5a       	subi	r30, 0xAB	; 171
     cf0:	ff 4f       	sbci	r31, 0xFF	; 255
     cf2:	80 81       	ld	r24, Z
     cf4:	88 2f       	mov	r24, r24
     cf6:	90 e0       	ldi	r25, 0x00	; 0
     cf8:	9e 01       	movw	r18, r28
     cfa:	29 59       	subi	r18, 0x99	; 153
     cfc:	3f 4f       	sbci	r19, 0xFF	; 255
     cfe:	28 0f       	add	r18, r24
     d00:	39 1f       	adc	r19, r25
     d02:	ca 01       	movw	r24, r20
     d04:	b9 01       	movw	r22, r18
     d06:	0e 94 68 0a 	call	0x14d0	; 0x14d0 <EEPROM_readByte>
     d0a:	fe 01       	movw	r30, r28
     d0c:	ef 5a       	subi	r30, 0xAF	; 175
     d0e:	ff 4f       	sbci	r31, 0xFF	; 255
     d10:	80 e0       	ldi	r24, 0x00	; 0
     d12:	90 e0       	ldi	r25, 0x00	; 0
     d14:	a0 e2       	ldi	r26, 0x20	; 32
     d16:	b1 e4       	ldi	r27, 0x41	; 65
     d18:	80 83       	st	Z, r24
     d1a:	91 83       	std	Z+1, r25	; 0x01
     d1c:	a2 83       	std	Z+2, r26	; 0x02
     d1e:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     d20:	8e 01       	movw	r16, r28
     d22:	03 5b       	subi	r16, 0xB3	; 179
     d24:	1f 4f       	sbci	r17, 0xFF	; 255
     d26:	fe 01       	movw	r30, r28
     d28:	ef 5a       	subi	r30, 0xAF	; 175
     d2a:	ff 4f       	sbci	r31, 0xFF	; 255
     d2c:	60 81       	ld	r22, Z
     d2e:	71 81       	ldd	r23, Z+1	; 0x01
     d30:	82 81       	ldd	r24, Z+2	; 0x02
     d32:	93 81       	ldd	r25, Z+3	; 0x03
     d34:	20 e0       	ldi	r18, 0x00	; 0
     d36:	30 e0       	ldi	r19, 0x00	; 0
     d38:	4a ef       	ldi	r20, 0xFA	; 250
     d3a:	54 e4       	ldi	r21, 0x44	; 68
     d3c:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
     d40:	dc 01       	movw	r26, r24
     d42:	cb 01       	movw	r24, r22
     d44:	f8 01       	movw	r30, r16
     d46:	80 83       	st	Z, r24
     d48:	91 83       	std	Z+1, r25	; 0x01
     d4a:	a2 83       	std	Z+2, r26	; 0x02
     d4c:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
     d4e:	fe 01       	movw	r30, r28
     d50:	e3 5b       	subi	r30, 0xB3	; 179
     d52:	ff 4f       	sbci	r31, 0xFF	; 255
     d54:	60 81       	ld	r22, Z
     d56:	71 81       	ldd	r23, Z+1	; 0x01
     d58:	82 81       	ldd	r24, Z+2	; 0x02
     d5a:	93 81       	ldd	r25, Z+3	; 0x03
     d5c:	20 e0       	ldi	r18, 0x00	; 0
     d5e:	30 e0       	ldi	r19, 0x00	; 0
     d60:	40 e8       	ldi	r20, 0x80	; 128
     d62:	5f e3       	ldi	r21, 0x3F	; 63
     d64:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
     d68:	88 23       	and	r24, r24
     d6a:	44 f4       	brge	.+16     	; 0xd7c <main+0x246>
		__ticks = 1;
     d6c:	fe 01       	movw	r30, r28
     d6e:	e5 5b       	subi	r30, 0xB5	; 181
     d70:	ff 4f       	sbci	r31, 0xFF	; 255
     d72:	81 e0       	ldi	r24, 0x01	; 1
     d74:	90 e0       	ldi	r25, 0x00	; 0
     d76:	91 83       	std	Z+1, r25	; 0x01
     d78:	80 83       	st	Z, r24
     d7a:	64 c0       	rjmp	.+200    	; 0xe44 <main+0x30e>
	else if (__tmp > 65535)
     d7c:	fe 01       	movw	r30, r28
     d7e:	e3 5b       	subi	r30, 0xB3	; 179
     d80:	ff 4f       	sbci	r31, 0xFF	; 255
     d82:	60 81       	ld	r22, Z
     d84:	71 81       	ldd	r23, Z+1	; 0x01
     d86:	82 81       	ldd	r24, Z+2	; 0x02
     d88:	93 81       	ldd	r25, Z+3	; 0x03
     d8a:	20 e0       	ldi	r18, 0x00	; 0
     d8c:	3f ef       	ldi	r19, 0xFF	; 255
     d8e:	4f e7       	ldi	r20, 0x7F	; 127
     d90:	57 e4       	ldi	r21, 0x47	; 71
     d92:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
     d96:	18 16       	cp	r1, r24
     d98:	0c f0       	brlt	.+2      	; 0xd9c <main+0x266>
     d9a:	43 c0       	rjmp	.+134    	; 0xe22 <main+0x2ec>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     d9c:	fe 01       	movw	r30, r28
     d9e:	ef 5a       	subi	r30, 0xAF	; 175
     da0:	ff 4f       	sbci	r31, 0xFF	; 255
     da2:	60 81       	ld	r22, Z
     da4:	71 81       	ldd	r23, Z+1	; 0x01
     da6:	82 81       	ldd	r24, Z+2	; 0x02
     da8:	93 81       	ldd	r25, Z+3	; 0x03
     daa:	20 e0       	ldi	r18, 0x00	; 0
     dac:	30 e0       	ldi	r19, 0x00	; 0
     dae:	40 e2       	ldi	r20, 0x20	; 32
     db0:	51 e4       	ldi	r21, 0x41	; 65
     db2:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
     db6:	dc 01       	movw	r26, r24
     db8:	cb 01       	movw	r24, r22
     dba:	8e 01       	movw	r16, r28
     dbc:	05 5b       	subi	r16, 0xB5	; 181
     dbe:	1f 4f       	sbci	r17, 0xFF	; 255
     dc0:	bc 01       	movw	r22, r24
     dc2:	cd 01       	movw	r24, r26
     dc4:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
     dc8:	dc 01       	movw	r26, r24
     dca:	cb 01       	movw	r24, r22
     dcc:	f8 01       	movw	r30, r16
     dce:	91 83       	std	Z+1, r25	; 0x01
     dd0:	80 83       	st	Z, r24
     dd2:	1f c0       	rjmp	.+62     	; 0xe12 <main+0x2dc>
     dd4:	fe 01       	movw	r30, r28
     dd6:	e7 5b       	subi	r30, 0xB7	; 183
     dd8:	ff 4f       	sbci	r31, 0xFF	; 255
     dda:	88 ec       	ldi	r24, 0xC8	; 200
     ddc:	90 e0       	ldi	r25, 0x00	; 0
     dde:	91 83       	std	Z+1, r25	; 0x01
     de0:	80 83       	st	Z, r24
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     de2:	fe 01       	movw	r30, r28
     de4:	e7 5b       	subi	r30, 0xB7	; 183
     de6:	ff 4f       	sbci	r31, 0xFF	; 255
     de8:	80 81       	ld	r24, Z
     dea:	91 81       	ldd	r25, Z+1	; 0x01
     dec:	01 97       	sbiw	r24, 0x01	; 1
     dee:	f1 f7       	brne	.-4      	; 0xdec <main+0x2b6>
     df0:	fe 01       	movw	r30, r28
     df2:	e7 5b       	subi	r30, 0xB7	; 183
     df4:	ff 4f       	sbci	r31, 0xFF	; 255
     df6:	91 83       	std	Z+1, r25	; 0x01
     df8:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     dfa:	de 01       	movw	r26, r28
     dfc:	a5 5b       	subi	r26, 0xB5	; 181
     dfe:	bf 4f       	sbci	r27, 0xFF	; 255
     e00:	fe 01       	movw	r30, r28
     e02:	e5 5b       	subi	r30, 0xB5	; 181
     e04:	ff 4f       	sbci	r31, 0xFF	; 255
     e06:	80 81       	ld	r24, Z
     e08:	91 81       	ldd	r25, Z+1	; 0x01
     e0a:	01 97       	sbiw	r24, 0x01	; 1
     e0c:	11 96       	adiw	r26, 0x01	; 1
     e0e:	9c 93       	st	X, r25
     e10:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     e12:	fe 01       	movw	r30, r28
     e14:	e5 5b       	subi	r30, 0xB5	; 181
     e16:	ff 4f       	sbci	r31, 0xFF	; 255
     e18:	80 81       	ld	r24, Z
     e1a:	91 81       	ldd	r25, Z+1	; 0x01
     e1c:	00 97       	sbiw	r24, 0x00	; 0
     e1e:	d1 f6       	brne	.-76     	; 0xdd4 <main+0x29e>
     e20:	27 c0       	rjmp	.+78     	; 0xe70 <main+0x33a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     e22:	8e 01       	movw	r16, r28
     e24:	05 5b       	subi	r16, 0xB5	; 181
     e26:	1f 4f       	sbci	r17, 0xFF	; 255
     e28:	fe 01       	movw	r30, r28
     e2a:	e3 5b       	subi	r30, 0xB3	; 179
     e2c:	ff 4f       	sbci	r31, 0xFF	; 255
     e2e:	60 81       	ld	r22, Z
     e30:	71 81       	ldd	r23, Z+1	; 0x01
     e32:	82 81       	ldd	r24, Z+2	; 0x02
     e34:	93 81       	ldd	r25, Z+3	; 0x03
     e36:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
     e3a:	dc 01       	movw	r26, r24
     e3c:	cb 01       	movw	r24, r22
     e3e:	f8 01       	movw	r30, r16
     e40:	91 83       	std	Z+1, r25	; 0x01
     e42:	80 83       	st	Z, r24
     e44:	de 01       	movw	r26, r28
     e46:	a9 5b       	subi	r26, 0xB9	; 185
     e48:	bf 4f       	sbci	r27, 0xFF	; 255
     e4a:	fe 01       	movw	r30, r28
     e4c:	e5 5b       	subi	r30, 0xB5	; 181
     e4e:	ff 4f       	sbci	r31, 0xFF	; 255
     e50:	80 81       	ld	r24, Z
     e52:	91 81       	ldd	r25, Z+1	; 0x01
     e54:	8d 93       	st	X+, r24
     e56:	9c 93       	st	X, r25
     e58:	fe 01       	movw	r30, r28
     e5a:	e9 5b       	subi	r30, 0xB9	; 185
     e5c:	ff 4f       	sbci	r31, 0xFF	; 255
     e5e:	80 81       	ld	r24, Z
     e60:	91 81       	ldd	r25, Z+1	; 0x01
     e62:	01 97       	sbiw	r24, 0x01	; 1
     e64:	f1 f7       	brne	.-4      	; 0xe62 <main+0x32c>
     e66:	fe 01       	movw	r30, r28
     e68:	e9 5b       	subi	r30, 0xB9	; 185
     e6a:	ff 4f       	sbci	r31, 0xFF	; 255
     e6c:	91 83       	std	Z+1, r25	; 0x01
     e6e:	80 83       	st	Z, r24
		 * FIRST COMMAND -- Checking if a given password is saved in memory
		 * ***************************************************************/
		case CHECK_PASS_EXISTS_CMD:
			/* Receive String & Read password from EEPROM */
			UART_receiveString(password);
			for(i=0;i<PASS_SIZE;i++){
     e70:	de 01       	movw	r26, r28
     e72:	ab 5a       	subi	r26, 0xAB	; 171
     e74:	bf 4f       	sbci	r27, 0xFF	; 255
     e76:	fe 01       	movw	r30, r28
     e78:	eb 5a       	subi	r30, 0xAB	; 171
     e7a:	ff 4f       	sbci	r31, 0xFF	; 255
     e7c:	80 81       	ld	r24, Z
     e7e:	8f 5f       	subi	r24, 0xFF	; 255
     e80:	8c 93       	st	X, r24
     e82:	fe 01       	movw	r30, r28
     e84:	eb 5a       	subi	r30, 0xAB	; 171
     e86:	ff 4f       	sbci	r31, 0xFF	; 255
     e88:	80 81       	ld	r24, Z
     e8a:	85 30       	cpi	r24, 0x05	; 5
     e8c:	08 f4       	brcc	.+2      	; 0xe90 <main+0x35a>
     e8e:	26 cf       	rjmp	.-436    	; 0xcdc <main+0x1a6>
				EEPROM_readByte(MEM_ADDRESS+i, &saved_pass[i]);
				_delay_ms(10);
			}
			saved_pass[5] = '\0';
     e90:	fe 01       	movw	r30, r28
     e92:	e9 59       	subi	r30, 0x99	; 153
     e94:	ff 4f       	sbci	r31, 0xFF	; 255
     e96:	15 82       	std	Z+5, r1	; 0x05

			/* Compare sent password and saved password and resend response */
			cmd = compare_strings(password, saved_pass);
     e98:	ce 01       	movw	r24, r28
     e9a:	8f 59       	subi	r24, 0x9F	; 159
     e9c:	9f 4f       	sbci	r25, 0xFF	; 255
     e9e:	9e 01       	movw	r18, r28
     ea0:	29 59       	subi	r18, 0x99	; 153
     ea2:	3f 4f       	sbci	r19, 0xFF	; 255
     ea4:	b9 01       	movw	r22, r18
     ea6:	0e 94 8e 0e 	call	0x1d1c	; 0x1d1c <compare_strings>
     eaa:	fe 01       	movw	r30, r28
     eac:	ea 5a       	subi	r30, 0xAA	; 170
     eae:	ff 4f       	sbci	r31, 0xFF	; 255
     eb0:	80 83       	st	Z, r24
			if (cmd == IDENTICAL)
     eb2:	fe 01       	movw	r30, r28
     eb4:	ea 5a       	subi	r30, 0xAA	; 170
     eb6:	ff 4f       	sbci	r31, 0xFF	; 255
     eb8:	80 81       	ld	r24, Z
     eba:	81 30       	cpi	r24, 0x01	; 1
     ebc:	21 f4       	brne	.+8      	; 0xec6 <main+0x390>
				UART_sendByte(PASS_FOUND_CMD);
     ebe:	8d e0       	ldi	r24, 0x0D	; 13
     ec0:	0e 94 4c 10 	call	0x2098	; 0x2098 <UART_sendByte>
     ec4:	c9 ce       	rjmp	.-622    	; 0xc58 <main+0x122>
			else
				UART_sendByte(PASS_NOT_FOUND_CMD);
     ec6:	8e e0       	ldi	r24, 0x0E	; 14
     ec8:	0e 94 4c 10 	call	0x2098	; 0x2098 <UART_sendByte>
     ecc:	c5 ce       	rjmp	.-630    	; 0xc58 <main+0x122>
		/* ***************************************************************
		 * SECOND COMMAND -- Writing a given password in memory
		 * ***************************************************************/
		case SUBMIT_PASSWORD_CMD:
			/* Receive Password String & Write the password into EEPROM */
			UART_receiveString(password);
     ece:	ce 01       	movw	r24, r28
     ed0:	8f 59       	subi	r24, 0x9F	; 159
     ed2:	9f 4f       	sbci	r25, 0xFF	; 255
     ed4:	0e 94 9b 10 	call	0x2136	; 0x2136 <UART_receiveString>
			for (i=0; i<PASS_SIZE; i++){
     ed8:	fe 01       	movw	r30, r28
     eda:	eb 5a       	subi	r30, 0xAB	; 171
     edc:	ff 4f       	sbci	r31, 0xFF	; 255
     ede:	10 82       	st	Z, r1
     ee0:	a7 c0       	rjmp	.+334    	; 0x1030 <main+0x4fa>
				EEPROM_writeByte(MEM_ADDRESS+i, password[i]);
     ee2:	fe 01       	movw	r30, r28
     ee4:	eb 5a       	subi	r30, 0xAB	; 171
     ee6:	ff 4f       	sbci	r31, 0xFF	; 255
     ee8:	80 81       	ld	r24, Z
     eea:	88 2f       	mov	r24, r24
     eec:	90 e0       	ldi	r25, 0x00	; 0
     eee:	41 96       	adiw	r24, 0x11	; 17
     ef0:	ac 01       	movw	r20, r24
     ef2:	fe 01       	movw	r30, r28
     ef4:	eb 5a       	subi	r30, 0xAB	; 171
     ef6:	ff 4f       	sbci	r31, 0xFF	; 255
     ef8:	80 81       	ld	r24, Z
     efa:	28 2f       	mov	r18, r24
     efc:	30 e0       	ldi	r19, 0x00	; 0
     efe:	ce 01       	movw	r24, r28
     f00:	8f 59       	subi	r24, 0x9F	; 159
     f02:	9f 4f       	sbci	r25, 0xFF	; 255
     f04:	fc 01       	movw	r30, r24
     f06:	e2 0f       	add	r30, r18
     f08:	f3 1f       	adc	r31, r19
     f0a:	20 81       	ld	r18, Z
     f0c:	ca 01       	movw	r24, r20
     f0e:	62 2f       	mov	r22, r18
     f10:	0e 94 27 0a 	call	0x144e	; 0x144e <EEPROM_writeByte>
     f14:	fe 01       	movw	r30, r28
     f16:	ed 5b       	subi	r30, 0xBD	; 189
     f18:	ff 4f       	sbci	r31, 0xFF	; 255
     f1a:	80 e0       	ldi	r24, 0x00	; 0
     f1c:	90 e0       	ldi	r25, 0x00	; 0
     f1e:	a0 e2       	ldi	r26, 0x20	; 32
     f20:	b1 e4       	ldi	r27, 0x41	; 65
     f22:	80 83       	st	Z, r24
     f24:	91 83       	std	Z+1, r25	; 0x01
     f26:	a2 83       	std	Z+2, r26	; 0x02
     f28:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     f2a:	8e 01       	movw	r16, r28
     f2c:	01 5c       	subi	r16, 0xC1	; 193
     f2e:	1f 4f       	sbci	r17, 0xFF	; 255
     f30:	fe 01       	movw	r30, r28
     f32:	ed 5b       	subi	r30, 0xBD	; 189
     f34:	ff 4f       	sbci	r31, 0xFF	; 255
     f36:	60 81       	ld	r22, Z
     f38:	71 81       	ldd	r23, Z+1	; 0x01
     f3a:	82 81       	ldd	r24, Z+2	; 0x02
     f3c:	93 81       	ldd	r25, Z+3	; 0x03
     f3e:	20 e0       	ldi	r18, 0x00	; 0
     f40:	30 e0       	ldi	r19, 0x00	; 0
     f42:	4a ef       	ldi	r20, 0xFA	; 250
     f44:	54 e4       	ldi	r21, 0x44	; 68
     f46:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
     f4a:	dc 01       	movw	r26, r24
     f4c:	cb 01       	movw	r24, r22
     f4e:	f8 01       	movw	r30, r16
     f50:	80 83       	st	Z, r24
     f52:	91 83       	std	Z+1, r25	; 0x01
     f54:	a2 83       	std	Z+2, r26	; 0x02
     f56:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
     f58:	fe 01       	movw	r30, r28
     f5a:	ff 96       	adiw	r30, 0x3f	; 63
     f5c:	60 81       	ld	r22, Z
     f5e:	71 81       	ldd	r23, Z+1	; 0x01
     f60:	82 81       	ldd	r24, Z+2	; 0x02
     f62:	93 81       	ldd	r25, Z+3	; 0x03
     f64:	20 e0       	ldi	r18, 0x00	; 0
     f66:	30 e0       	ldi	r19, 0x00	; 0
     f68:	40 e8       	ldi	r20, 0x80	; 128
     f6a:	5f e3       	ldi	r21, 0x3F	; 63
     f6c:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
     f70:	88 23       	and	r24, r24
     f72:	2c f4       	brge	.+10     	; 0xf7e <main+0x448>
		__ticks = 1;
     f74:	81 e0       	ldi	r24, 0x01	; 1
     f76:	90 e0       	ldi	r25, 0x00	; 0
     f78:	9e af       	std	Y+62, r25	; 0x3e
     f7a:	8d af       	std	Y+61, r24	; 0x3d
     f7c:	46 c0       	rjmp	.+140    	; 0x100a <main+0x4d4>
	else if (__tmp > 65535)
     f7e:	fe 01       	movw	r30, r28
     f80:	ff 96       	adiw	r30, 0x3f	; 63
     f82:	60 81       	ld	r22, Z
     f84:	71 81       	ldd	r23, Z+1	; 0x01
     f86:	82 81       	ldd	r24, Z+2	; 0x02
     f88:	93 81       	ldd	r25, Z+3	; 0x03
     f8a:	20 e0       	ldi	r18, 0x00	; 0
     f8c:	3f ef       	ldi	r19, 0xFF	; 255
     f8e:	4f e7       	ldi	r20, 0x7F	; 127
     f90:	57 e4       	ldi	r21, 0x47	; 71
     f92:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
     f96:	18 16       	cp	r1, r24
     f98:	64 f5       	brge	.+88     	; 0xff2 <main+0x4bc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     f9a:	fe 01       	movw	r30, r28
     f9c:	ed 5b       	subi	r30, 0xBD	; 189
     f9e:	ff 4f       	sbci	r31, 0xFF	; 255
     fa0:	60 81       	ld	r22, Z
     fa2:	71 81       	ldd	r23, Z+1	; 0x01
     fa4:	82 81       	ldd	r24, Z+2	; 0x02
     fa6:	93 81       	ldd	r25, Z+3	; 0x03
     fa8:	20 e0       	ldi	r18, 0x00	; 0
     faa:	30 e0       	ldi	r19, 0x00	; 0
     fac:	40 e2       	ldi	r20, 0x20	; 32
     fae:	51 e4       	ldi	r21, 0x41	; 65
     fb0:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
     fb4:	dc 01       	movw	r26, r24
     fb6:	cb 01       	movw	r24, r22
     fb8:	bc 01       	movw	r22, r24
     fba:	cd 01       	movw	r24, r26
     fbc:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
     fc0:	dc 01       	movw	r26, r24
     fc2:	cb 01       	movw	r24, r22
     fc4:	9e af       	std	Y+62, r25	; 0x3e
     fc6:	8d af       	std	Y+61, r24	; 0x3d
     fc8:	0f c0       	rjmp	.+30     	; 0xfe8 <main+0x4b2>
     fca:	88 ec       	ldi	r24, 0xC8	; 200
     fcc:	90 e0       	ldi	r25, 0x00	; 0
     fce:	9c af       	std	Y+60, r25	; 0x3c
     fd0:	8b af       	std	Y+59, r24	; 0x3b
     fd2:	8b ad       	ldd	r24, Y+59	; 0x3b
     fd4:	9c ad       	ldd	r25, Y+60	; 0x3c
     fd6:	01 97       	sbiw	r24, 0x01	; 1
     fd8:	f1 f7       	brne	.-4      	; 0xfd6 <main+0x4a0>
     fda:	9c af       	std	Y+60, r25	; 0x3c
     fdc:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     fde:	8d ad       	ldd	r24, Y+61	; 0x3d
     fe0:	9e ad       	ldd	r25, Y+62	; 0x3e
     fe2:	01 97       	sbiw	r24, 0x01	; 1
     fe4:	9e af       	std	Y+62, r25	; 0x3e
     fe6:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     fe8:	8d ad       	ldd	r24, Y+61	; 0x3d
     fea:	9e ad       	ldd	r25, Y+62	; 0x3e
     fec:	00 97       	sbiw	r24, 0x00	; 0
     fee:	69 f7       	brne	.-38     	; 0xfca <main+0x494>
     ff0:	16 c0       	rjmp	.+44     	; 0x101e <main+0x4e8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     ff2:	fe 01       	movw	r30, r28
     ff4:	ff 96       	adiw	r30, 0x3f	; 63
     ff6:	60 81       	ld	r22, Z
     ff8:	71 81       	ldd	r23, Z+1	; 0x01
     ffa:	82 81       	ldd	r24, Z+2	; 0x02
     ffc:	93 81       	ldd	r25, Z+3	; 0x03
     ffe:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1002:	dc 01       	movw	r26, r24
    1004:	cb 01       	movw	r24, r22
    1006:	9e af       	std	Y+62, r25	; 0x3e
    1008:	8d af       	std	Y+61, r24	; 0x3d
    100a:	8d ad       	ldd	r24, Y+61	; 0x3d
    100c:	9e ad       	ldd	r25, Y+62	; 0x3e
    100e:	9a af       	std	Y+58, r25	; 0x3a
    1010:	89 af       	std	Y+57, r24	; 0x39
    1012:	89 ad       	ldd	r24, Y+57	; 0x39
    1014:	9a ad       	ldd	r25, Y+58	; 0x3a
    1016:	01 97       	sbiw	r24, 0x01	; 1
    1018:	f1 f7       	brne	.-4      	; 0x1016 <main+0x4e0>
    101a:	9a af       	std	Y+58, r25	; 0x3a
    101c:	89 af       	std	Y+57, r24	; 0x39
		 * SECOND COMMAND -- Writing a given password in memory
		 * ***************************************************************/
		case SUBMIT_PASSWORD_CMD:
			/* Receive Password String & Write the password into EEPROM */
			UART_receiveString(password);
			for (i=0; i<PASS_SIZE; i++){
    101e:	de 01       	movw	r26, r28
    1020:	ab 5a       	subi	r26, 0xAB	; 171
    1022:	bf 4f       	sbci	r27, 0xFF	; 255
    1024:	fe 01       	movw	r30, r28
    1026:	eb 5a       	subi	r30, 0xAB	; 171
    1028:	ff 4f       	sbci	r31, 0xFF	; 255
    102a:	80 81       	ld	r24, Z
    102c:	8f 5f       	subi	r24, 0xFF	; 255
    102e:	8c 93       	st	X, r24
    1030:	fe 01       	movw	r30, r28
    1032:	eb 5a       	subi	r30, 0xAB	; 171
    1034:	ff 4f       	sbci	r31, 0xFF	; 255
    1036:	80 81       	ld	r24, Z
    1038:	85 30       	cpi	r24, 0x05	; 5
    103a:	08 f4       	brcc	.+2      	; 0x103e <main+0x508>
    103c:	52 cf       	rjmp	.-348    	; 0xee2 <main+0x3ac>
    103e:	0c ce       	rjmp	.-1000   	; 0xc58 <main+0x122>

		/* ***************************************************************
		 * THIRD COMMAND -- Opening door by rotating motors
		 * ***************************************************************/
		case OPEN_DOOR_CMD:
			DcMotor_Rotate(CLOCKWISE, 100);
    1040:	82 e0       	ldi	r24, 0x02	; 2
    1042:	64 e6       	ldi	r22, 0x64	; 100
    1044:	0e 94 56 0e 	call	0x1cac	; 0x1cac <DcMotor_Rotate>
    1048:	80 e0       	ldi	r24, 0x00	; 0
    104a:	90 e6       	ldi	r25, 0x60	; 96
    104c:	aa e6       	ldi	r26, 0x6A	; 106
    104e:	b6 e4       	ldi	r27, 0x46	; 70
    1050:	8d ab       	std	Y+53, r24	; 0x35
    1052:	9e ab       	std	Y+54, r25	; 0x36
    1054:	af ab       	std	Y+55, r26	; 0x37
    1056:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1058:	6d a9       	ldd	r22, Y+53	; 0x35
    105a:	7e a9       	ldd	r23, Y+54	; 0x36
    105c:	8f a9       	ldd	r24, Y+55	; 0x37
    105e:	98 ad       	ldd	r25, Y+56	; 0x38
    1060:	20 e0       	ldi	r18, 0x00	; 0
    1062:	30 e0       	ldi	r19, 0x00	; 0
    1064:	4a ef       	ldi	r20, 0xFA	; 250
    1066:	54 e4       	ldi	r21, 0x44	; 68
    1068:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    106c:	dc 01       	movw	r26, r24
    106e:	cb 01       	movw	r24, r22
    1070:	89 ab       	std	Y+49, r24	; 0x31
    1072:	9a ab       	std	Y+50, r25	; 0x32
    1074:	ab ab       	std	Y+51, r26	; 0x33
    1076:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    1078:	69 a9       	ldd	r22, Y+49	; 0x31
    107a:	7a a9       	ldd	r23, Y+50	; 0x32
    107c:	8b a9       	ldd	r24, Y+51	; 0x33
    107e:	9c a9       	ldd	r25, Y+52	; 0x34
    1080:	20 e0       	ldi	r18, 0x00	; 0
    1082:	30 e0       	ldi	r19, 0x00	; 0
    1084:	40 e8       	ldi	r20, 0x80	; 128
    1086:	5f e3       	ldi	r21, 0x3F	; 63
    1088:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    108c:	88 23       	and	r24, r24
    108e:	2c f4       	brge	.+10     	; 0x109a <main+0x564>
		__ticks = 1;
    1090:	81 e0       	ldi	r24, 0x01	; 1
    1092:	90 e0       	ldi	r25, 0x00	; 0
    1094:	98 ab       	std	Y+48, r25	; 0x30
    1096:	8f a7       	std	Y+47, r24	; 0x2f
    1098:	3f c0       	rjmp	.+126    	; 0x1118 <main+0x5e2>
	else if (__tmp > 65535)
    109a:	69 a9       	ldd	r22, Y+49	; 0x31
    109c:	7a a9       	ldd	r23, Y+50	; 0x32
    109e:	8b a9       	ldd	r24, Y+51	; 0x33
    10a0:	9c a9       	ldd	r25, Y+52	; 0x34
    10a2:	20 e0       	ldi	r18, 0x00	; 0
    10a4:	3f ef       	ldi	r19, 0xFF	; 255
    10a6:	4f e7       	ldi	r20, 0x7F	; 127
    10a8:	57 e4       	ldi	r21, 0x47	; 71
    10aa:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    10ae:	18 16       	cp	r1, r24
    10b0:	4c f5       	brge	.+82     	; 0x1104 <main+0x5ce>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    10b2:	6d a9       	ldd	r22, Y+53	; 0x35
    10b4:	7e a9       	ldd	r23, Y+54	; 0x36
    10b6:	8f a9       	ldd	r24, Y+55	; 0x37
    10b8:	98 ad       	ldd	r25, Y+56	; 0x38
    10ba:	20 e0       	ldi	r18, 0x00	; 0
    10bc:	30 e0       	ldi	r19, 0x00	; 0
    10be:	40 e2       	ldi	r20, 0x20	; 32
    10c0:	51 e4       	ldi	r21, 0x41	; 65
    10c2:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    10c6:	dc 01       	movw	r26, r24
    10c8:	cb 01       	movw	r24, r22
    10ca:	bc 01       	movw	r22, r24
    10cc:	cd 01       	movw	r24, r26
    10ce:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    10d2:	dc 01       	movw	r26, r24
    10d4:	cb 01       	movw	r24, r22
    10d6:	98 ab       	std	Y+48, r25	; 0x30
    10d8:	8f a7       	std	Y+47, r24	; 0x2f
    10da:	0f c0       	rjmp	.+30     	; 0x10fa <main+0x5c4>
    10dc:	88 ec       	ldi	r24, 0xC8	; 200
    10de:	90 e0       	ldi	r25, 0x00	; 0
    10e0:	9e a7       	std	Y+46, r25	; 0x2e
    10e2:	8d a7       	std	Y+45, r24	; 0x2d
    10e4:	8d a5       	ldd	r24, Y+45	; 0x2d
    10e6:	9e a5       	ldd	r25, Y+46	; 0x2e
    10e8:	01 97       	sbiw	r24, 0x01	; 1
    10ea:	f1 f7       	brne	.-4      	; 0x10e8 <main+0x5b2>
    10ec:	9e a7       	std	Y+46, r25	; 0x2e
    10ee:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    10f0:	8f a5       	ldd	r24, Y+47	; 0x2f
    10f2:	98 a9       	ldd	r25, Y+48	; 0x30
    10f4:	01 97       	sbiw	r24, 0x01	; 1
    10f6:	98 ab       	std	Y+48, r25	; 0x30
    10f8:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    10fa:	8f a5       	ldd	r24, Y+47	; 0x2f
    10fc:	98 a9       	ldd	r25, Y+48	; 0x30
    10fe:	00 97       	sbiw	r24, 0x00	; 0
    1100:	69 f7       	brne	.-38     	; 0x10dc <main+0x5a6>
    1102:	14 c0       	rjmp	.+40     	; 0x112c <main+0x5f6>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1104:	69 a9       	ldd	r22, Y+49	; 0x31
    1106:	7a a9       	ldd	r23, Y+50	; 0x32
    1108:	8b a9       	ldd	r24, Y+51	; 0x33
    110a:	9c a9       	ldd	r25, Y+52	; 0x34
    110c:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1110:	dc 01       	movw	r26, r24
    1112:	cb 01       	movw	r24, r22
    1114:	98 ab       	std	Y+48, r25	; 0x30
    1116:	8f a7       	std	Y+47, r24	; 0x2f
    1118:	8f a5       	ldd	r24, Y+47	; 0x2f
    111a:	98 a9       	ldd	r25, Y+48	; 0x30
    111c:	9c a7       	std	Y+44, r25	; 0x2c
    111e:	8b a7       	std	Y+43, r24	; 0x2b
    1120:	8b a5       	ldd	r24, Y+43	; 0x2b
    1122:	9c a5       	ldd	r25, Y+44	; 0x2c
    1124:	01 97       	sbiw	r24, 0x01	; 1
    1126:	f1 f7       	brne	.-4      	; 0x1124 <main+0x5ee>
    1128:	9c a7       	std	Y+44, r25	; 0x2c
    112a:	8b a7       	std	Y+43, r24	; 0x2b
			_delay_ms(15000);
			DcMotor_Rotate(OFF, 100);
    112c:	80 e0       	ldi	r24, 0x00	; 0
    112e:	64 e6       	ldi	r22, 0x64	; 100
    1130:	0e 94 56 0e 	call	0x1cac	; 0x1cac <DcMotor_Rotate>
    1134:	80 e0       	ldi	r24, 0x00	; 0
    1136:	90 e0       	ldi	r25, 0x00	; 0
    1138:	aa e7       	ldi	r26, 0x7A	; 122
    113a:	b4 e4       	ldi	r27, 0x44	; 68
    113c:	8f a3       	std	Y+39, r24	; 0x27
    113e:	98 a7       	std	Y+40, r25	; 0x28
    1140:	a9 a7       	std	Y+41, r26	; 0x29
    1142:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1144:	6f a1       	ldd	r22, Y+39	; 0x27
    1146:	78 a5       	ldd	r23, Y+40	; 0x28
    1148:	89 a5       	ldd	r24, Y+41	; 0x29
    114a:	9a a5       	ldd	r25, Y+42	; 0x2a
    114c:	20 e0       	ldi	r18, 0x00	; 0
    114e:	30 e0       	ldi	r19, 0x00	; 0
    1150:	4a ef       	ldi	r20, 0xFA	; 250
    1152:	54 e4       	ldi	r21, 0x44	; 68
    1154:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1158:	dc 01       	movw	r26, r24
    115a:	cb 01       	movw	r24, r22
    115c:	8b a3       	std	Y+35, r24	; 0x23
    115e:	9c a3       	std	Y+36, r25	; 0x24
    1160:	ad a3       	std	Y+37, r26	; 0x25
    1162:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    1164:	6b a1       	ldd	r22, Y+35	; 0x23
    1166:	7c a1       	ldd	r23, Y+36	; 0x24
    1168:	8d a1       	ldd	r24, Y+37	; 0x25
    116a:	9e a1       	ldd	r25, Y+38	; 0x26
    116c:	20 e0       	ldi	r18, 0x00	; 0
    116e:	30 e0       	ldi	r19, 0x00	; 0
    1170:	40 e8       	ldi	r20, 0x80	; 128
    1172:	5f e3       	ldi	r21, 0x3F	; 63
    1174:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    1178:	88 23       	and	r24, r24
    117a:	2c f4       	brge	.+10     	; 0x1186 <main+0x650>
		__ticks = 1;
    117c:	81 e0       	ldi	r24, 0x01	; 1
    117e:	90 e0       	ldi	r25, 0x00	; 0
    1180:	9a a3       	std	Y+34, r25	; 0x22
    1182:	89 a3       	std	Y+33, r24	; 0x21
    1184:	3f c0       	rjmp	.+126    	; 0x1204 <main+0x6ce>
	else if (__tmp > 65535)
    1186:	6b a1       	ldd	r22, Y+35	; 0x23
    1188:	7c a1       	ldd	r23, Y+36	; 0x24
    118a:	8d a1       	ldd	r24, Y+37	; 0x25
    118c:	9e a1       	ldd	r25, Y+38	; 0x26
    118e:	20 e0       	ldi	r18, 0x00	; 0
    1190:	3f ef       	ldi	r19, 0xFF	; 255
    1192:	4f e7       	ldi	r20, 0x7F	; 127
    1194:	57 e4       	ldi	r21, 0x47	; 71
    1196:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    119a:	18 16       	cp	r1, r24
    119c:	4c f5       	brge	.+82     	; 0x11f0 <main+0x6ba>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    119e:	6f a1       	ldd	r22, Y+39	; 0x27
    11a0:	78 a5       	ldd	r23, Y+40	; 0x28
    11a2:	89 a5       	ldd	r24, Y+41	; 0x29
    11a4:	9a a5       	ldd	r25, Y+42	; 0x2a
    11a6:	20 e0       	ldi	r18, 0x00	; 0
    11a8:	30 e0       	ldi	r19, 0x00	; 0
    11aa:	40 e2       	ldi	r20, 0x20	; 32
    11ac:	51 e4       	ldi	r21, 0x41	; 65
    11ae:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    11b2:	dc 01       	movw	r26, r24
    11b4:	cb 01       	movw	r24, r22
    11b6:	bc 01       	movw	r22, r24
    11b8:	cd 01       	movw	r24, r26
    11ba:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    11be:	dc 01       	movw	r26, r24
    11c0:	cb 01       	movw	r24, r22
    11c2:	9a a3       	std	Y+34, r25	; 0x22
    11c4:	89 a3       	std	Y+33, r24	; 0x21
    11c6:	0f c0       	rjmp	.+30     	; 0x11e6 <main+0x6b0>
    11c8:	88 ec       	ldi	r24, 0xC8	; 200
    11ca:	90 e0       	ldi	r25, 0x00	; 0
    11cc:	98 a3       	std	Y+32, r25	; 0x20
    11ce:	8f 8f       	std	Y+31, r24	; 0x1f
    11d0:	8f 8d       	ldd	r24, Y+31	; 0x1f
    11d2:	98 a1       	ldd	r25, Y+32	; 0x20
    11d4:	01 97       	sbiw	r24, 0x01	; 1
    11d6:	f1 f7       	brne	.-4      	; 0x11d4 <main+0x69e>
    11d8:	98 a3       	std	Y+32, r25	; 0x20
    11da:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    11dc:	89 a1       	ldd	r24, Y+33	; 0x21
    11de:	9a a1       	ldd	r25, Y+34	; 0x22
    11e0:	01 97       	sbiw	r24, 0x01	; 1
    11e2:	9a a3       	std	Y+34, r25	; 0x22
    11e4:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    11e6:	89 a1       	ldd	r24, Y+33	; 0x21
    11e8:	9a a1       	ldd	r25, Y+34	; 0x22
    11ea:	00 97       	sbiw	r24, 0x00	; 0
    11ec:	69 f7       	brne	.-38     	; 0x11c8 <main+0x692>
    11ee:	14 c0       	rjmp	.+40     	; 0x1218 <main+0x6e2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    11f0:	6b a1       	ldd	r22, Y+35	; 0x23
    11f2:	7c a1       	ldd	r23, Y+36	; 0x24
    11f4:	8d a1       	ldd	r24, Y+37	; 0x25
    11f6:	9e a1       	ldd	r25, Y+38	; 0x26
    11f8:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    11fc:	dc 01       	movw	r26, r24
    11fe:	cb 01       	movw	r24, r22
    1200:	9a a3       	std	Y+34, r25	; 0x22
    1202:	89 a3       	std	Y+33, r24	; 0x21
    1204:	89 a1       	ldd	r24, Y+33	; 0x21
    1206:	9a a1       	ldd	r25, Y+34	; 0x22
    1208:	9e 8f       	std	Y+30, r25	; 0x1e
    120a:	8d 8f       	std	Y+29, r24	; 0x1d
    120c:	8d 8d       	ldd	r24, Y+29	; 0x1d
    120e:	9e 8d       	ldd	r25, Y+30	; 0x1e
    1210:	01 97       	sbiw	r24, 0x01	; 1
    1212:	f1 f7       	brne	.-4      	; 0x1210 <main+0x6da>
    1214:	9e 8f       	std	Y+30, r25	; 0x1e
    1216:	8d 8f       	std	Y+29, r24	; 0x1d
			_delay_ms(1000);
			DcMotor_Rotate(ANTICLOCKWISE, 100);
    1218:	81 e0       	ldi	r24, 0x01	; 1
    121a:	64 e6       	ldi	r22, 0x64	; 100
    121c:	0e 94 56 0e 	call	0x1cac	; 0x1cac <DcMotor_Rotate>
    1220:	80 e0       	ldi	r24, 0x00	; 0
    1222:	90 e6       	ldi	r25, 0x60	; 96
    1224:	aa e6       	ldi	r26, 0x6A	; 106
    1226:	b6 e4       	ldi	r27, 0x46	; 70
    1228:	89 8f       	std	Y+25, r24	; 0x19
    122a:	9a 8f       	std	Y+26, r25	; 0x1a
    122c:	ab 8f       	std	Y+27, r26	; 0x1b
    122e:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1230:	69 8d       	ldd	r22, Y+25	; 0x19
    1232:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1234:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1236:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1238:	20 e0       	ldi	r18, 0x00	; 0
    123a:	30 e0       	ldi	r19, 0x00	; 0
    123c:	4a ef       	ldi	r20, 0xFA	; 250
    123e:	54 e4       	ldi	r21, 0x44	; 68
    1240:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1244:	dc 01       	movw	r26, r24
    1246:	cb 01       	movw	r24, r22
    1248:	8d 8b       	std	Y+21, r24	; 0x15
    124a:	9e 8b       	std	Y+22, r25	; 0x16
    124c:	af 8b       	std	Y+23, r26	; 0x17
    124e:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    1250:	6d 89       	ldd	r22, Y+21	; 0x15
    1252:	7e 89       	ldd	r23, Y+22	; 0x16
    1254:	8f 89       	ldd	r24, Y+23	; 0x17
    1256:	98 8d       	ldd	r25, Y+24	; 0x18
    1258:	20 e0       	ldi	r18, 0x00	; 0
    125a:	30 e0       	ldi	r19, 0x00	; 0
    125c:	40 e8       	ldi	r20, 0x80	; 128
    125e:	5f e3       	ldi	r21, 0x3F	; 63
    1260:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    1264:	88 23       	and	r24, r24
    1266:	2c f4       	brge	.+10     	; 0x1272 <main+0x73c>
		__ticks = 1;
    1268:	81 e0       	ldi	r24, 0x01	; 1
    126a:	90 e0       	ldi	r25, 0x00	; 0
    126c:	9c 8b       	std	Y+20, r25	; 0x14
    126e:	8b 8b       	std	Y+19, r24	; 0x13
    1270:	3f c0       	rjmp	.+126    	; 0x12f0 <main+0x7ba>
	else if (__tmp > 65535)
    1272:	6d 89       	ldd	r22, Y+21	; 0x15
    1274:	7e 89       	ldd	r23, Y+22	; 0x16
    1276:	8f 89       	ldd	r24, Y+23	; 0x17
    1278:	98 8d       	ldd	r25, Y+24	; 0x18
    127a:	20 e0       	ldi	r18, 0x00	; 0
    127c:	3f ef       	ldi	r19, 0xFF	; 255
    127e:	4f e7       	ldi	r20, 0x7F	; 127
    1280:	57 e4       	ldi	r21, 0x47	; 71
    1282:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    1286:	18 16       	cp	r1, r24
    1288:	4c f5       	brge	.+82     	; 0x12dc <main+0x7a6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    128a:	69 8d       	ldd	r22, Y+25	; 0x19
    128c:	7a 8d       	ldd	r23, Y+26	; 0x1a
    128e:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1290:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1292:	20 e0       	ldi	r18, 0x00	; 0
    1294:	30 e0       	ldi	r19, 0x00	; 0
    1296:	40 e2       	ldi	r20, 0x20	; 32
    1298:	51 e4       	ldi	r21, 0x41	; 65
    129a:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    129e:	dc 01       	movw	r26, r24
    12a0:	cb 01       	movw	r24, r22
    12a2:	bc 01       	movw	r22, r24
    12a4:	cd 01       	movw	r24, r26
    12a6:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    12aa:	dc 01       	movw	r26, r24
    12ac:	cb 01       	movw	r24, r22
    12ae:	9c 8b       	std	Y+20, r25	; 0x14
    12b0:	8b 8b       	std	Y+19, r24	; 0x13
    12b2:	0f c0       	rjmp	.+30     	; 0x12d2 <main+0x79c>
    12b4:	88 ec       	ldi	r24, 0xC8	; 200
    12b6:	90 e0       	ldi	r25, 0x00	; 0
    12b8:	9a 8b       	std	Y+18, r25	; 0x12
    12ba:	89 8b       	std	Y+17, r24	; 0x11
    12bc:	89 89       	ldd	r24, Y+17	; 0x11
    12be:	9a 89       	ldd	r25, Y+18	; 0x12
    12c0:	01 97       	sbiw	r24, 0x01	; 1
    12c2:	f1 f7       	brne	.-4      	; 0x12c0 <main+0x78a>
    12c4:	9a 8b       	std	Y+18, r25	; 0x12
    12c6:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    12c8:	8b 89       	ldd	r24, Y+19	; 0x13
    12ca:	9c 89       	ldd	r25, Y+20	; 0x14
    12cc:	01 97       	sbiw	r24, 0x01	; 1
    12ce:	9c 8b       	std	Y+20, r25	; 0x14
    12d0:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    12d2:	8b 89       	ldd	r24, Y+19	; 0x13
    12d4:	9c 89       	ldd	r25, Y+20	; 0x14
    12d6:	00 97       	sbiw	r24, 0x00	; 0
    12d8:	69 f7       	brne	.-38     	; 0x12b4 <main+0x77e>
    12da:	14 c0       	rjmp	.+40     	; 0x1304 <main+0x7ce>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    12dc:	6d 89       	ldd	r22, Y+21	; 0x15
    12de:	7e 89       	ldd	r23, Y+22	; 0x16
    12e0:	8f 89       	ldd	r24, Y+23	; 0x17
    12e2:	98 8d       	ldd	r25, Y+24	; 0x18
    12e4:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    12e8:	dc 01       	movw	r26, r24
    12ea:	cb 01       	movw	r24, r22
    12ec:	9c 8b       	std	Y+20, r25	; 0x14
    12ee:	8b 8b       	std	Y+19, r24	; 0x13
    12f0:	8b 89       	ldd	r24, Y+19	; 0x13
    12f2:	9c 89       	ldd	r25, Y+20	; 0x14
    12f4:	98 8b       	std	Y+16, r25	; 0x10
    12f6:	8f 87       	std	Y+15, r24	; 0x0f
    12f8:	8f 85       	ldd	r24, Y+15	; 0x0f
    12fa:	98 89       	ldd	r25, Y+16	; 0x10
    12fc:	01 97       	sbiw	r24, 0x01	; 1
    12fe:	f1 f7       	brne	.-4      	; 0x12fc <main+0x7c6>
    1300:	98 8b       	std	Y+16, r25	; 0x10
    1302:	8f 87       	std	Y+15, r24	; 0x0f
			_delay_ms(15000);
			DcMotor_Rotate(OFF, 100);
    1304:	80 e0       	ldi	r24, 0x00	; 0
    1306:	64 e6       	ldi	r22, 0x64	; 100
    1308:	0e 94 56 0e 	call	0x1cac	; 0x1cac <DcMotor_Rotate>
    130c:	a5 cc       	rjmp	.-1718   	; 0xc58 <main+0x122>

		/* ***************************************************************
		 * FOURTH COMMAND -- Activate Error State Actions
		 * ***************************************************************/
		case ACTIVATE_ERROR_CMD:
			Buzzer_on();
    130e:	0e 94 0f 0a 	call	0x141e	; 0x141e <Buzzer_on>
    1312:	80 e0       	ldi	r24, 0x00	; 0
    1314:	90 e6       	ldi	r25, 0x60	; 96
    1316:	aa e6       	ldi	r26, 0x6A	; 106
    1318:	b7 e4       	ldi	r27, 0x47	; 71
    131a:	8b 87       	std	Y+11, r24	; 0x0b
    131c:	9c 87       	std	Y+12, r25	; 0x0c
    131e:	ad 87       	std	Y+13, r26	; 0x0d
    1320:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1322:	6b 85       	ldd	r22, Y+11	; 0x0b
    1324:	7c 85       	ldd	r23, Y+12	; 0x0c
    1326:	8d 85       	ldd	r24, Y+13	; 0x0d
    1328:	9e 85       	ldd	r25, Y+14	; 0x0e
    132a:	20 e0       	ldi	r18, 0x00	; 0
    132c:	30 e0       	ldi	r19, 0x00	; 0
    132e:	4a ef       	ldi	r20, 0xFA	; 250
    1330:	54 e4       	ldi	r21, 0x44	; 68
    1332:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1336:	dc 01       	movw	r26, r24
    1338:	cb 01       	movw	r24, r22
    133a:	8f 83       	std	Y+7, r24	; 0x07
    133c:	98 87       	std	Y+8, r25	; 0x08
    133e:	a9 87       	std	Y+9, r26	; 0x09
    1340:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1342:	6f 81       	ldd	r22, Y+7	; 0x07
    1344:	78 85       	ldd	r23, Y+8	; 0x08
    1346:	89 85       	ldd	r24, Y+9	; 0x09
    1348:	9a 85       	ldd	r25, Y+10	; 0x0a
    134a:	20 e0       	ldi	r18, 0x00	; 0
    134c:	30 e0       	ldi	r19, 0x00	; 0
    134e:	40 e8       	ldi	r20, 0x80	; 128
    1350:	5f e3       	ldi	r21, 0x3F	; 63
    1352:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    1356:	88 23       	and	r24, r24
    1358:	2c f4       	brge	.+10     	; 0x1364 <main+0x82e>
		__ticks = 1;
    135a:	81 e0       	ldi	r24, 0x01	; 1
    135c:	90 e0       	ldi	r25, 0x00	; 0
    135e:	9e 83       	std	Y+6, r25	; 0x06
    1360:	8d 83       	std	Y+5, r24	; 0x05
    1362:	3f c0       	rjmp	.+126    	; 0x13e2 <main+0x8ac>
	else if (__tmp > 65535)
    1364:	6f 81       	ldd	r22, Y+7	; 0x07
    1366:	78 85       	ldd	r23, Y+8	; 0x08
    1368:	89 85       	ldd	r24, Y+9	; 0x09
    136a:	9a 85       	ldd	r25, Y+10	; 0x0a
    136c:	20 e0       	ldi	r18, 0x00	; 0
    136e:	3f ef       	ldi	r19, 0xFF	; 255
    1370:	4f e7       	ldi	r20, 0x7F	; 127
    1372:	57 e4       	ldi	r21, 0x47	; 71
    1374:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    1378:	18 16       	cp	r1, r24
    137a:	4c f5       	brge	.+82     	; 0x13ce <main+0x898>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    137c:	6b 85       	ldd	r22, Y+11	; 0x0b
    137e:	7c 85       	ldd	r23, Y+12	; 0x0c
    1380:	8d 85       	ldd	r24, Y+13	; 0x0d
    1382:	9e 85       	ldd	r25, Y+14	; 0x0e
    1384:	20 e0       	ldi	r18, 0x00	; 0
    1386:	30 e0       	ldi	r19, 0x00	; 0
    1388:	40 e2       	ldi	r20, 0x20	; 32
    138a:	51 e4       	ldi	r21, 0x41	; 65
    138c:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1390:	dc 01       	movw	r26, r24
    1392:	cb 01       	movw	r24, r22
    1394:	bc 01       	movw	r22, r24
    1396:	cd 01       	movw	r24, r26
    1398:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    139c:	dc 01       	movw	r26, r24
    139e:	cb 01       	movw	r24, r22
    13a0:	9e 83       	std	Y+6, r25	; 0x06
    13a2:	8d 83       	std	Y+5, r24	; 0x05
    13a4:	0f c0       	rjmp	.+30     	; 0x13c4 <main+0x88e>
    13a6:	88 ec       	ldi	r24, 0xC8	; 200
    13a8:	90 e0       	ldi	r25, 0x00	; 0
    13aa:	9c 83       	std	Y+4, r25	; 0x04
    13ac:	8b 83       	std	Y+3, r24	; 0x03
    13ae:	8b 81       	ldd	r24, Y+3	; 0x03
    13b0:	9c 81       	ldd	r25, Y+4	; 0x04
    13b2:	01 97       	sbiw	r24, 0x01	; 1
    13b4:	f1 f7       	brne	.-4      	; 0x13b2 <main+0x87c>
    13b6:	9c 83       	std	Y+4, r25	; 0x04
    13b8:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    13ba:	8d 81       	ldd	r24, Y+5	; 0x05
    13bc:	9e 81       	ldd	r25, Y+6	; 0x06
    13be:	01 97       	sbiw	r24, 0x01	; 1
    13c0:	9e 83       	std	Y+6, r25	; 0x06
    13c2:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    13c4:	8d 81       	ldd	r24, Y+5	; 0x05
    13c6:	9e 81       	ldd	r25, Y+6	; 0x06
    13c8:	00 97       	sbiw	r24, 0x00	; 0
    13ca:	69 f7       	brne	.-38     	; 0x13a6 <main+0x870>
    13cc:	14 c0       	rjmp	.+40     	; 0x13f6 <main+0x8c0>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    13ce:	6f 81       	ldd	r22, Y+7	; 0x07
    13d0:	78 85       	ldd	r23, Y+8	; 0x08
    13d2:	89 85       	ldd	r24, Y+9	; 0x09
    13d4:	9a 85       	ldd	r25, Y+10	; 0x0a
    13d6:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    13da:	dc 01       	movw	r26, r24
    13dc:	cb 01       	movw	r24, r22
    13de:	9e 83       	std	Y+6, r25	; 0x06
    13e0:	8d 83       	std	Y+5, r24	; 0x05
    13e2:	8d 81       	ldd	r24, Y+5	; 0x05
    13e4:	9e 81       	ldd	r25, Y+6	; 0x06
    13e6:	9a 83       	std	Y+2, r25	; 0x02
    13e8:	89 83       	std	Y+1, r24	; 0x01
    13ea:	89 81       	ldd	r24, Y+1	; 0x01
    13ec:	9a 81       	ldd	r25, Y+2	; 0x02
    13ee:	01 97       	sbiw	r24, 0x01	; 1
    13f0:	f1 f7       	brne	.-4      	; 0x13ee <main+0x8b8>
    13f2:	9a 83       	std	Y+2, r25	; 0x02
    13f4:	89 83       	std	Y+1, r24	; 0x01
			_delay_ms(60000);
			Buzzer_off();
    13f6:	0e 94 1b 0a 	call	0x1436	; 0x1436 <Buzzer_off>
    13fa:	2e cc       	rjmp	.-1956   	; 0xc58 <main+0x122>

000013fc <Buzzer_init>:
 * Function Description:
 * Initializing the Buzzer pin
 * 1- Setup the pin direction
 * 2- Initialize the pin with Buzzer_off
 */
void Buzzer_init(void){
    13fc:	df 93       	push	r29
    13fe:	cf 93       	push	r28
    1400:	cd b7       	in	r28, 0x3d	; 61
    1402:	de b7       	in	r29, 0x3e	; 62
	/* Setting the buzzer pin as output */
	GPIO_setupPinDirection(BUZZER_PORT_ID, BUZZER_PIN_ID, PIN_OUTPUT);
    1404:	82 e0       	ldi	r24, 0x02	; 2
    1406:	66 e0       	ldi	r22, 0x06	; 6
    1408:	41 e0       	ldi	r20, 0x01	; 1
    140a:	0e 94 c8 0a 	call	0x1590	; 0x1590 <GPIO_setupPinDirection>
	/* Initializing the buzzer to be off */
	GPIO_writePin(BUZZER_PORT_ID, BUZZER_PIN_ID, BUZZER_OFF);
    140e:	82 e0       	ldi	r24, 0x02	; 2
    1410:	66 e0       	ldi	r22, 0x06	; 6
    1412:	40 e0       	ldi	r20, 0x00	; 0
    1414:	0e 94 b3 0b 	call	0x1766	; 0x1766 <GPIO_writePin>
}
    1418:	cf 91       	pop	r28
    141a:	df 91       	pop	r29
    141c:	08 95       	ret

0000141e <Buzzer_on>:
/*
 * Function Description:
 * Setting the buzzer to be ON
 * 1- Write the pin to be Buzzer_on
 */
void Buzzer_on(void){
    141e:	df 93       	push	r29
    1420:	cf 93       	push	r28
    1422:	cd b7       	in	r28, 0x3d	; 61
    1424:	de b7       	in	r29, 0x3e	; 62
	GPIO_writePin(BUZZER_PORT_ID, BUZZER_PIN_ID, BUZZER_ON);
    1426:	82 e0       	ldi	r24, 0x02	; 2
    1428:	66 e0       	ldi	r22, 0x06	; 6
    142a:	41 e0       	ldi	r20, 0x01	; 1
    142c:	0e 94 b3 0b 	call	0x1766	; 0x1766 <GPIO_writePin>
}
    1430:	cf 91       	pop	r28
    1432:	df 91       	pop	r29
    1434:	08 95       	ret

00001436 <Buzzer_off>:
/*
 * Function Description:
 * Setting the buzzer to be OFF
 * 1- Write the pin to be Buzzer_off
 */
void Buzzer_off(void){
    1436:	df 93       	push	r29
    1438:	cf 93       	push	r28
    143a:	cd b7       	in	r28, 0x3d	; 61
    143c:	de b7       	in	r29, 0x3e	; 62
	GPIO_writePin(BUZZER_PORT_ID, BUZZER_PIN_ID, BUZZER_OFF);
    143e:	82 e0       	ldi	r24, 0x02	; 2
    1440:	66 e0       	ldi	r22, 0x06	; 6
    1442:	40 e0       	ldi	r20, 0x00	; 0
    1444:	0e 94 b3 0b 	call	0x1766	; 0x1766 <GPIO_writePin>
}
    1448:	cf 91       	pop	r28
    144a:	df 91       	pop	r29
    144c:	08 95       	ret

0000144e <EEPROM_writeByte>:
 *******************************************************************************/
#include "external_eeprom.h"
#include "twi.h"

uint8 EEPROM_writeByte(uint16 u16addr, uint8 u8data)
{
    144e:	df 93       	push	r29
    1450:	cf 93       	push	r28
    1452:	00 d0       	rcall	.+0      	; 0x1454 <EEPROM_writeByte+0x6>
    1454:	00 d0       	rcall	.+0      	; 0x1456 <EEPROM_writeByte+0x8>
    1456:	cd b7       	in	r28, 0x3d	; 61
    1458:	de b7       	in	r29, 0x3e	; 62
    145a:	9a 83       	std	Y+2, r25	; 0x02
    145c:	89 83       	std	Y+1, r24	; 0x01
    145e:	6b 83       	std	Y+3, r22	; 0x03
	/* Send the Start Bit */
    TWI_start();
    1460:	0e 94 70 0f 	call	0x1ee0	; 0x1ee0 <TWI_start>
    if (TWI_getStatus() != TWI_START)
    1464:	0e 94 c8 0f 	call	0x1f90	; 0x1f90 <TWI_getStatus>
    1468:	88 30       	cpi	r24, 0x08	; 8
    146a:	11 f0       	breq	.+4      	; 0x1470 <EEPROM_writeByte+0x22>
        return ERROR;
    146c:	1c 82       	std	Y+4, r1	; 0x04
    146e:	28 c0       	rjmp	.+80     	; 0x14c0 <EEPROM_writeByte+0x72>
		
    /* Send the device address, we need to get A8 A9 A10 address bits from the
     * memory location address and R/W=0 (write) */
    TWI_writeByte((uint8)(0xA0 | ((u16addr & 0x0700)>>7)));
    1470:	89 81       	ldd	r24, Y+1	; 0x01
    1472:	9a 81       	ldd	r25, Y+2	; 0x02
    1474:	80 70       	andi	r24, 0x00	; 0
    1476:	97 70       	andi	r25, 0x07	; 7
    1478:	88 0f       	add	r24, r24
    147a:	89 2f       	mov	r24, r25
    147c:	88 1f       	adc	r24, r24
    147e:	99 0b       	sbc	r25, r25
    1480:	91 95       	neg	r25
    1482:	80 6a       	ori	r24, 0xA0	; 160
    1484:	0e 94 8b 0f 	call	0x1f16	; 0x1f16 <TWI_writeByte>
    if (TWI_getStatus() != TWI_MT_SLA_W_ACK)
    1488:	0e 94 c8 0f 	call	0x1f90	; 0x1f90 <TWI_getStatus>
    148c:	88 31       	cpi	r24, 0x18	; 24
    148e:	11 f0       	breq	.+4      	; 0x1494 <EEPROM_writeByte+0x46>
        return ERROR; 
    1490:	1c 82       	std	Y+4, r1	; 0x04
    1492:	16 c0       	rjmp	.+44     	; 0x14c0 <EEPROM_writeByte+0x72>
		 
    /* Send the required memory location address */
    TWI_writeByte((uint8)(u16addr));
    1494:	89 81       	ldd	r24, Y+1	; 0x01
    1496:	0e 94 8b 0f 	call	0x1f16	; 0x1f16 <TWI_writeByte>
    if (TWI_getStatus() != TWI_MT_DATA_ACK)
    149a:	0e 94 c8 0f 	call	0x1f90	; 0x1f90 <TWI_getStatus>
    149e:	88 32       	cpi	r24, 0x28	; 40
    14a0:	11 f0       	breq	.+4      	; 0x14a6 <EEPROM_writeByte+0x58>
        return ERROR;
    14a2:	1c 82       	std	Y+4, r1	; 0x04
    14a4:	0d c0       	rjmp	.+26     	; 0x14c0 <EEPROM_writeByte+0x72>
		
    /* write byte to eeprom */
    TWI_writeByte(u8data);
    14a6:	8b 81       	ldd	r24, Y+3	; 0x03
    14a8:	0e 94 8b 0f 	call	0x1f16	; 0x1f16 <TWI_writeByte>
    if (TWI_getStatus() != TWI_MT_DATA_ACK)
    14ac:	0e 94 c8 0f 	call	0x1f90	; 0x1f90 <TWI_getStatus>
    14b0:	88 32       	cpi	r24, 0x28	; 40
    14b2:	11 f0       	breq	.+4      	; 0x14b8 <EEPROM_writeByte+0x6a>
        return ERROR;
    14b4:	1c 82       	std	Y+4, r1	; 0x04
    14b6:	04 c0       	rjmp	.+8      	; 0x14c0 <EEPROM_writeByte+0x72>

    /* Send the Stop Bit */
    TWI_stop();
    14b8:	0e 94 80 0f 	call	0x1f00	; 0x1f00 <TWI_stop>
	
    return SUCCESS;
    14bc:	81 e0       	ldi	r24, 0x01	; 1
    14be:	8c 83       	std	Y+4, r24	; 0x04
    14c0:	8c 81       	ldd	r24, Y+4	; 0x04
}
    14c2:	0f 90       	pop	r0
    14c4:	0f 90       	pop	r0
    14c6:	0f 90       	pop	r0
    14c8:	0f 90       	pop	r0
    14ca:	cf 91       	pop	r28
    14cc:	df 91       	pop	r29
    14ce:	08 95       	ret

000014d0 <EEPROM_readByte>:

uint8 EEPROM_readByte(uint16 u16addr, uint8 *u8data)
{
    14d0:	df 93       	push	r29
    14d2:	cf 93       	push	r28
    14d4:	00 d0       	rcall	.+0      	; 0x14d6 <EEPROM_readByte+0x6>
    14d6:	00 d0       	rcall	.+0      	; 0x14d8 <EEPROM_readByte+0x8>
    14d8:	0f 92       	push	r0
    14da:	cd b7       	in	r28, 0x3d	; 61
    14dc:	de b7       	in	r29, 0x3e	; 62
    14de:	9a 83       	std	Y+2, r25	; 0x02
    14e0:	89 83       	std	Y+1, r24	; 0x01
    14e2:	7c 83       	std	Y+4, r23	; 0x04
    14e4:	6b 83       	std	Y+3, r22	; 0x03
	/* Send the Start Bit */
    TWI_start();
    14e6:	0e 94 70 0f 	call	0x1ee0	; 0x1ee0 <TWI_start>
    if (TWI_getStatus() != TWI_START)
    14ea:	0e 94 c8 0f 	call	0x1f90	; 0x1f90 <TWI_getStatus>
    14ee:	88 30       	cpi	r24, 0x08	; 8
    14f0:	11 f0       	breq	.+4      	; 0x14f6 <EEPROM_readByte+0x26>
        return ERROR;
    14f2:	1d 82       	std	Y+5, r1	; 0x05
    14f4:	44 c0       	rjmp	.+136    	; 0x157e <EEPROM_readByte+0xae>
		
    /* Send the device address, we need to get A8 A9 A10 address bits from the
     * memory location address and R/W=0 (write) */
    TWI_writeByte((uint8)((0xA0) | ((u16addr & 0x0700)>>7)));
    14f6:	89 81       	ldd	r24, Y+1	; 0x01
    14f8:	9a 81       	ldd	r25, Y+2	; 0x02
    14fa:	80 70       	andi	r24, 0x00	; 0
    14fc:	97 70       	andi	r25, 0x07	; 7
    14fe:	88 0f       	add	r24, r24
    1500:	89 2f       	mov	r24, r25
    1502:	88 1f       	adc	r24, r24
    1504:	99 0b       	sbc	r25, r25
    1506:	91 95       	neg	r25
    1508:	80 6a       	ori	r24, 0xA0	; 160
    150a:	0e 94 8b 0f 	call	0x1f16	; 0x1f16 <TWI_writeByte>
    if (TWI_getStatus() != TWI_MT_SLA_W_ACK)
    150e:	0e 94 c8 0f 	call	0x1f90	; 0x1f90 <TWI_getStatus>
    1512:	88 31       	cpi	r24, 0x18	; 24
    1514:	11 f0       	breq	.+4      	; 0x151a <EEPROM_readByte+0x4a>
        return ERROR;
    1516:	1d 82       	std	Y+5, r1	; 0x05
    1518:	32 c0       	rjmp	.+100    	; 0x157e <EEPROM_readByte+0xae>
		
    /* Send the required memory location address */
    TWI_writeByte((uint8)(u16addr));
    151a:	89 81       	ldd	r24, Y+1	; 0x01
    151c:	0e 94 8b 0f 	call	0x1f16	; 0x1f16 <TWI_writeByte>
    if (TWI_getStatus() != TWI_MT_DATA_ACK)
    1520:	0e 94 c8 0f 	call	0x1f90	; 0x1f90 <TWI_getStatus>
    1524:	88 32       	cpi	r24, 0x28	; 40
    1526:	11 f0       	breq	.+4      	; 0x152c <EEPROM_readByte+0x5c>
        return ERROR;
    1528:	1d 82       	std	Y+5, r1	; 0x05
    152a:	29 c0       	rjmp	.+82     	; 0x157e <EEPROM_readByte+0xae>
		
    /* Send the Repeated Start Bit */
    TWI_start();
    152c:	0e 94 70 0f 	call	0x1ee0	; 0x1ee0 <TWI_start>
    if (TWI_getStatus() != TWI_REP_START)
    1530:	0e 94 c8 0f 	call	0x1f90	; 0x1f90 <TWI_getStatus>
    1534:	80 31       	cpi	r24, 0x10	; 16
    1536:	11 f0       	breq	.+4      	; 0x153c <EEPROM_readByte+0x6c>
        return ERROR;
    1538:	1d 82       	std	Y+5, r1	; 0x05
    153a:	21 c0       	rjmp	.+66     	; 0x157e <EEPROM_readByte+0xae>
		
    /* Send the device address, we need to get A8 A9 A10 address bits from the
     * memory location address and R/W=1 (Read) */
    TWI_writeByte((uint8)((0xA0) | ((u16addr & 0x0700)>>7) | 1));
    153c:	89 81       	ldd	r24, Y+1	; 0x01
    153e:	9a 81       	ldd	r25, Y+2	; 0x02
    1540:	80 70       	andi	r24, 0x00	; 0
    1542:	97 70       	andi	r25, 0x07	; 7
    1544:	88 0f       	add	r24, r24
    1546:	89 2f       	mov	r24, r25
    1548:	88 1f       	adc	r24, r24
    154a:	99 0b       	sbc	r25, r25
    154c:	91 95       	neg	r25
    154e:	81 6a       	ori	r24, 0xA1	; 161
    1550:	0e 94 8b 0f 	call	0x1f16	; 0x1f16 <TWI_writeByte>
    if (TWI_getStatus() != TWI_MT_SLA_R_ACK)
    1554:	0e 94 c8 0f 	call	0x1f90	; 0x1f90 <TWI_getStatus>
    1558:	80 34       	cpi	r24, 0x40	; 64
    155a:	11 f0       	breq	.+4      	; 0x1560 <EEPROM_readByte+0x90>
        return ERROR;
    155c:	1d 82       	std	Y+5, r1	; 0x05
    155e:	0f c0       	rjmp	.+30     	; 0x157e <EEPROM_readByte+0xae>

    /* Read Byte from Memory without send ACK */
    *u8data = TWI_readByteWithNACK();
    1560:	0e 94 b5 0f 	call	0x1f6a	; 0x1f6a <TWI_readByteWithNACK>
    1564:	eb 81       	ldd	r30, Y+3	; 0x03
    1566:	fc 81       	ldd	r31, Y+4	; 0x04
    1568:	80 83       	st	Z, r24
    if (TWI_getStatus() != TWI_MR_DATA_NACK)
    156a:	0e 94 c8 0f 	call	0x1f90	; 0x1f90 <TWI_getStatus>
    156e:	88 35       	cpi	r24, 0x58	; 88
    1570:	11 f0       	breq	.+4      	; 0x1576 <EEPROM_readByte+0xa6>
        return ERROR;
    1572:	1d 82       	std	Y+5, r1	; 0x05
    1574:	04 c0       	rjmp	.+8      	; 0x157e <EEPROM_readByte+0xae>

    /* Send the Stop Bit */
    TWI_stop();
    1576:	0e 94 80 0f 	call	0x1f00	; 0x1f00 <TWI_stop>

    return SUCCESS;
    157a:	81 e0       	ldi	r24, 0x01	; 1
    157c:	8d 83       	std	Y+5, r24	; 0x05
    157e:	8d 81       	ldd	r24, Y+5	; 0x05
}
    1580:	0f 90       	pop	r0
    1582:	0f 90       	pop	r0
    1584:	0f 90       	pop	r0
    1586:	0f 90       	pop	r0
    1588:	0f 90       	pop	r0
    158a:	cf 91       	pop	r28
    158c:	df 91       	pop	r29
    158e:	08 95       	ret

00001590 <GPIO_setupPinDirection>:
 * Description :
 * Setup the direction of the required pin input/output.
 * If the input port number or pin number are not correct, The function will not handle the request.
 */
void GPIO_setupPinDirection(uint8 port_num, uint8 pin_num, GPIO_PinDirectionType direction)
{
    1590:	df 93       	push	r29
    1592:	cf 93       	push	r28
    1594:	00 d0       	rcall	.+0      	; 0x1596 <GPIO_setupPinDirection+0x6>
    1596:	00 d0       	rcall	.+0      	; 0x1598 <GPIO_setupPinDirection+0x8>
    1598:	0f 92       	push	r0
    159a:	cd b7       	in	r28, 0x3d	; 61
    159c:	de b7       	in	r29, 0x3e	; 62
    159e:	89 83       	std	Y+1, r24	; 0x01
    15a0:	6a 83       	std	Y+2, r22	; 0x02
    15a2:	4b 83       	std	Y+3, r20	; 0x03
	/*
	 * Check if the input port number is greater than NUM_OF_PINS_PER_PORT value.
	 * Or if the input pin number is greater than NUM_OF_PINS_PER_PORT value.
	 * In this case the input is not valid port/pin number
	 */
	if((pin_num >= NUM_OF_PINS_PER_PORT) || (port_num >= NUM_OF_PORTS))
    15a4:	8a 81       	ldd	r24, Y+2	; 0x02
    15a6:	88 30       	cpi	r24, 0x08	; 8
    15a8:	08 f0       	brcs	.+2      	; 0x15ac <GPIO_setupPinDirection+0x1c>
    15aa:	d5 c0       	rjmp	.+426    	; 0x1756 <GPIO_setupPinDirection+0x1c6>
    15ac:	89 81       	ldd	r24, Y+1	; 0x01
    15ae:	84 30       	cpi	r24, 0x04	; 4
    15b0:	08 f0       	brcs	.+2      	; 0x15b4 <GPIO_setupPinDirection+0x24>
    15b2:	d1 c0       	rjmp	.+418    	; 0x1756 <GPIO_setupPinDirection+0x1c6>
		/* Do Nothing */
	}
	else
	{
		/* Setup the pin direction as required */
		switch(port_num)
    15b4:	89 81       	ldd	r24, Y+1	; 0x01
    15b6:	28 2f       	mov	r18, r24
    15b8:	30 e0       	ldi	r19, 0x00	; 0
    15ba:	3d 83       	std	Y+5, r19	; 0x05
    15bc:	2c 83       	std	Y+4, r18	; 0x04
    15be:	8c 81       	ldd	r24, Y+4	; 0x04
    15c0:	9d 81       	ldd	r25, Y+5	; 0x05
    15c2:	81 30       	cpi	r24, 0x01	; 1
    15c4:	91 05       	cpc	r25, r1
    15c6:	09 f4       	brne	.+2      	; 0x15ca <GPIO_setupPinDirection+0x3a>
    15c8:	43 c0       	rjmp	.+134    	; 0x1650 <GPIO_setupPinDirection+0xc0>
    15ca:	2c 81       	ldd	r18, Y+4	; 0x04
    15cc:	3d 81       	ldd	r19, Y+5	; 0x05
    15ce:	22 30       	cpi	r18, 0x02	; 2
    15d0:	31 05       	cpc	r19, r1
    15d2:	2c f4       	brge	.+10     	; 0x15de <GPIO_setupPinDirection+0x4e>
    15d4:	8c 81       	ldd	r24, Y+4	; 0x04
    15d6:	9d 81       	ldd	r25, Y+5	; 0x05
    15d8:	00 97       	sbiw	r24, 0x00	; 0
    15da:	71 f0       	breq	.+28     	; 0x15f8 <GPIO_setupPinDirection+0x68>
    15dc:	bc c0       	rjmp	.+376    	; 0x1756 <GPIO_setupPinDirection+0x1c6>
    15de:	2c 81       	ldd	r18, Y+4	; 0x04
    15e0:	3d 81       	ldd	r19, Y+5	; 0x05
    15e2:	22 30       	cpi	r18, 0x02	; 2
    15e4:	31 05       	cpc	r19, r1
    15e6:	09 f4       	brne	.+2      	; 0x15ea <GPIO_setupPinDirection+0x5a>
    15e8:	5f c0       	rjmp	.+190    	; 0x16a8 <GPIO_setupPinDirection+0x118>
    15ea:	8c 81       	ldd	r24, Y+4	; 0x04
    15ec:	9d 81       	ldd	r25, Y+5	; 0x05
    15ee:	83 30       	cpi	r24, 0x03	; 3
    15f0:	91 05       	cpc	r25, r1
    15f2:	09 f4       	brne	.+2      	; 0x15f6 <GPIO_setupPinDirection+0x66>
    15f4:	85 c0       	rjmp	.+266    	; 0x1700 <GPIO_setupPinDirection+0x170>
    15f6:	af c0       	rjmp	.+350    	; 0x1756 <GPIO_setupPinDirection+0x1c6>
		{
		case PORTA_ID:
			if(direction == PIN_OUTPUT)
    15f8:	8b 81       	ldd	r24, Y+3	; 0x03
    15fa:	81 30       	cpi	r24, 0x01	; 1
    15fc:	a1 f4       	brne	.+40     	; 0x1626 <GPIO_setupPinDirection+0x96>
			{
				SET_BIT(DDRA,pin_num);
    15fe:	aa e3       	ldi	r26, 0x3A	; 58
    1600:	b0 e0       	ldi	r27, 0x00	; 0
    1602:	ea e3       	ldi	r30, 0x3A	; 58
    1604:	f0 e0       	ldi	r31, 0x00	; 0
    1606:	80 81       	ld	r24, Z
    1608:	48 2f       	mov	r20, r24
    160a:	8a 81       	ldd	r24, Y+2	; 0x02
    160c:	28 2f       	mov	r18, r24
    160e:	30 e0       	ldi	r19, 0x00	; 0
    1610:	81 e0       	ldi	r24, 0x01	; 1
    1612:	90 e0       	ldi	r25, 0x00	; 0
    1614:	02 2e       	mov	r0, r18
    1616:	02 c0       	rjmp	.+4      	; 0x161c <GPIO_setupPinDirection+0x8c>
    1618:	88 0f       	add	r24, r24
    161a:	99 1f       	adc	r25, r25
    161c:	0a 94       	dec	r0
    161e:	e2 f7       	brpl	.-8      	; 0x1618 <GPIO_setupPinDirection+0x88>
    1620:	84 2b       	or	r24, r20
    1622:	8c 93       	st	X, r24
    1624:	98 c0       	rjmp	.+304    	; 0x1756 <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRA,pin_num);
    1626:	aa e3       	ldi	r26, 0x3A	; 58
    1628:	b0 e0       	ldi	r27, 0x00	; 0
    162a:	ea e3       	ldi	r30, 0x3A	; 58
    162c:	f0 e0       	ldi	r31, 0x00	; 0
    162e:	80 81       	ld	r24, Z
    1630:	48 2f       	mov	r20, r24
    1632:	8a 81       	ldd	r24, Y+2	; 0x02
    1634:	28 2f       	mov	r18, r24
    1636:	30 e0       	ldi	r19, 0x00	; 0
    1638:	81 e0       	ldi	r24, 0x01	; 1
    163a:	90 e0       	ldi	r25, 0x00	; 0
    163c:	02 2e       	mov	r0, r18
    163e:	02 c0       	rjmp	.+4      	; 0x1644 <GPIO_setupPinDirection+0xb4>
    1640:	88 0f       	add	r24, r24
    1642:	99 1f       	adc	r25, r25
    1644:	0a 94       	dec	r0
    1646:	e2 f7       	brpl	.-8      	; 0x1640 <GPIO_setupPinDirection+0xb0>
    1648:	80 95       	com	r24
    164a:	84 23       	and	r24, r20
    164c:	8c 93       	st	X, r24
    164e:	83 c0       	rjmp	.+262    	; 0x1756 <GPIO_setupPinDirection+0x1c6>
			}
			break;
		case PORTB_ID:
			if(direction == PIN_OUTPUT)
    1650:	8b 81       	ldd	r24, Y+3	; 0x03
    1652:	81 30       	cpi	r24, 0x01	; 1
    1654:	a1 f4       	brne	.+40     	; 0x167e <GPIO_setupPinDirection+0xee>
			{
				SET_BIT(DDRB,pin_num);
    1656:	a7 e3       	ldi	r26, 0x37	; 55
    1658:	b0 e0       	ldi	r27, 0x00	; 0
    165a:	e7 e3       	ldi	r30, 0x37	; 55
    165c:	f0 e0       	ldi	r31, 0x00	; 0
    165e:	80 81       	ld	r24, Z
    1660:	48 2f       	mov	r20, r24
    1662:	8a 81       	ldd	r24, Y+2	; 0x02
    1664:	28 2f       	mov	r18, r24
    1666:	30 e0       	ldi	r19, 0x00	; 0
    1668:	81 e0       	ldi	r24, 0x01	; 1
    166a:	90 e0       	ldi	r25, 0x00	; 0
    166c:	02 2e       	mov	r0, r18
    166e:	02 c0       	rjmp	.+4      	; 0x1674 <GPIO_setupPinDirection+0xe4>
    1670:	88 0f       	add	r24, r24
    1672:	99 1f       	adc	r25, r25
    1674:	0a 94       	dec	r0
    1676:	e2 f7       	brpl	.-8      	; 0x1670 <GPIO_setupPinDirection+0xe0>
    1678:	84 2b       	or	r24, r20
    167a:	8c 93       	st	X, r24
    167c:	6c c0       	rjmp	.+216    	; 0x1756 <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRB,pin_num);
    167e:	a7 e3       	ldi	r26, 0x37	; 55
    1680:	b0 e0       	ldi	r27, 0x00	; 0
    1682:	e7 e3       	ldi	r30, 0x37	; 55
    1684:	f0 e0       	ldi	r31, 0x00	; 0
    1686:	80 81       	ld	r24, Z
    1688:	48 2f       	mov	r20, r24
    168a:	8a 81       	ldd	r24, Y+2	; 0x02
    168c:	28 2f       	mov	r18, r24
    168e:	30 e0       	ldi	r19, 0x00	; 0
    1690:	81 e0       	ldi	r24, 0x01	; 1
    1692:	90 e0       	ldi	r25, 0x00	; 0
    1694:	02 2e       	mov	r0, r18
    1696:	02 c0       	rjmp	.+4      	; 0x169c <GPIO_setupPinDirection+0x10c>
    1698:	88 0f       	add	r24, r24
    169a:	99 1f       	adc	r25, r25
    169c:	0a 94       	dec	r0
    169e:	e2 f7       	brpl	.-8      	; 0x1698 <GPIO_setupPinDirection+0x108>
    16a0:	80 95       	com	r24
    16a2:	84 23       	and	r24, r20
    16a4:	8c 93       	st	X, r24
    16a6:	57 c0       	rjmp	.+174    	; 0x1756 <GPIO_setupPinDirection+0x1c6>
			}
			break;
		case PORTC_ID:
			if(direction == PIN_OUTPUT)
    16a8:	8b 81       	ldd	r24, Y+3	; 0x03
    16aa:	81 30       	cpi	r24, 0x01	; 1
    16ac:	a1 f4       	brne	.+40     	; 0x16d6 <GPIO_setupPinDirection+0x146>
			{
				SET_BIT(DDRC,pin_num);
    16ae:	a4 e3       	ldi	r26, 0x34	; 52
    16b0:	b0 e0       	ldi	r27, 0x00	; 0
    16b2:	e4 e3       	ldi	r30, 0x34	; 52
    16b4:	f0 e0       	ldi	r31, 0x00	; 0
    16b6:	80 81       	ld	r24, Z
    16b8:	48 2f       	mov	r20, r24
    16ba:	8a 81       	ldd	r24, Y+2	; 0x02
    16bc:	28 2f       	mov	r18, r24
    16be:	30 e0       	ldi	r19, 0x00	; 0
    16c0:	81 e0       	ldi	r24, 0x01	; 1
    16c2:	90 e0       	ldi	r25, 0x00	; 0
    16c4:	02 2e       	mov	r0, r18
    16c6:	02 c0       	rjmp	.+4      	; 0x16cc <GPIO_setupPinDirection+0x13c>
    16c8:	88 0f       	add	r24, r24
    16ca:	99 1f       	adc	r25, r25
    16cc:	0a 94       	dec	r0
    16ce:	e2 f7       	brpl	.-8      	; 0x16c8 <GPIO_setupPinDirection+0x138>
    16d0:	84 2b       	or	r24, r20
    16d2:	8c 93       	st	X, r24
    16d4:	40 c0       	rjmp	.+128    	; 0x1756 <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRC,pin_num);
    16d6:	a4 e3       	ldi	r26, 0x34	; 52
    16d8:	b0 e0       	ldi	r27, 0x00	; 0
    16da:	e4 e3       	ldi	r30, 0x34	; 52
    16dc:	f0 e0       	ldi	r31, 0x00	; 0
    16de:	80 81       	ld	r24, Z
    16e0:	48 2f       	mov	r20, r24
    16e2:	8a 81       	ldd	r24, Y+2	; 0x02
    16e4:	28 2f       	mov	r18, r24
    16e6:	30 e0       	ldi	r19, 0x00	; 0
    16e8:	81 e0       	ldi	r24, 0x01	; 1
    16ea:	90 e0       	ldi	r25, 0x00	; 0
    16ec:	02 2e       	mov	r0, r18
    16ee:	02 c0       	rjmp	.+4      	; 0x16f4 <GPIO_setupPinDirection+0x164>
    16f0:	88 0f       	add	r24, r24
    16f2:	99 1f       	adc	r25, r25
    16f4:	0a 94       	dec	r0
    16f6:	e2 f7       	brpl	.-8      	; 0x16f0 <GPIO_setupPinDirection+0x160>
    16f8:	80 95       	com	r24
    16fa:	84 23       	and	r24, r20
    16fc:	8c 93       	st	X, r24
    16fe:	2b c0       	rjmp	.+86     	; 0x1756 <GPIO_setupPinDirection+0x1c6>
			}
			break;
		case PORTD_ID:
			if(direction == PIN_OUTPUT)
    1700:	8b 81       	ldd	r24, Y+3	; 0x03
    1702:	81 30       	cpi	r24, 0x01	; 1
    1704:	a1 f4       	brne	.+40     	; 0x172e <GPIO_setupPinDirection+0x19e>
			{
				SET_BIT(DDRD,pin_num);
    1706:	a1 e3       	ldi	r26, 0x31	; 49
    1708:	b0 e0       	ldi	r27, 0x00	; 0
    170a:	e1 e3       	ldi	r30, 0x31	; 49
    170c:	f0 e0       	ldi	r31, 0x00	; 0
    170e:	80 81       	ld	r24, Z
    1710:	48 2f       	mov	r20, r24
    1712:	8a 81       	ldd	r24, Y+2	; 0x02
    1714:	28 2f       	mov	r18, r24
    1716:	30 e0       	ldi	r19, 0x00	; 0
    1718:	81 e0       	ldi	r24, 0x01	; 1
    171a:	90 e0       	ldi	r25, 0x00	; 0
    171c:	02 2e       	mov	r0, r18
    171e:	02 c0       	rjmp	.+4      	; 0x1724 <GPIO_setupPinDirection+0x194>
    1720:	88 0f       	add	r24, r24
    1722:	99 1f       	adc	r25, r25
    1724:	0a 94       	dec	r0
    1726:	e2 f7       	brpl	.-8      	; 0x1720 <GPIO_setupPinDirection+0x190>
    1728:	84 2b       	or	r24, r20
    172a:	8c 93       	st	X, r24
    172c:	14 c0       	rjmp	.+40     	; 0x1756 <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRD,pin_num);
    172e:	a1 e3       	ldi	r26, 0x31	; 49
    1730:	b0 e0       	ldi	r27, 0x00	; 0
    1732:	e1 e3       	ldi	r30, 0x31	; 49
    1734:	f0 e0       	ldi	r31, 0x00	; 0
    1736:	80 81       	ld	r24, Z
    1738:	48 2f       	mov	r20, r24
    173a:	8a 81       	ldd	r24, Y+2	; 0x02
    173c:	28 2f       	mov	r18, r24
    173e:	30 e0       	ldi	r19, 0x00	; 0
    1740:	81 e0       	ldi	r24, 0x01	; 1
    1742:	90 e0       	ldi	r25, 0x00	; 0
    1744:	02 2e       	mov	r0, r18
    1746:	02 c0       	rjmp	.+4      	; 0x174c <GPIO_setupPinDirection+0x1bc>
    1748:	88 0f       	add	r24, r24
    174a:	99 1f       	adc	r25, r25
    174c:	0a 94       	dec	r0
    174e:	e2 f7       	brpl	.-8      	; 0x1748 <GPIO_setupPinDirection+0x1b8>
    1750:	80 95       	com	r24
    1752:	84 23       	and	r24, r20
    1754:	8c 93       	st	X, r24
			}
			break;
		}
	}
}
    1756:	0f 90       	pop	r0
    1758:	0f 90       	pop	r0
    175a:	0f 90       	pop	r0
    175c:	0f 90       	pop	r0
    175e:	0f 90       	pop	r0
    1760:	cf 91       	pop	r28
    1762:	df 91       	pop	r29
    1764:	08 95       	ret

00001766 <GPIO_writePin>:
 * Write the value Logic High or Logic Low on the required pin.
 * If the input port number or pin number are not correct, The function will not handle the request.
 * If the pin is input, this function will enable/disable the internal pull-up resistor.
 */
void GPIO_writePin(uint8 port_num, uint8 pin_num, uint8 value)
{
    1766:	df 93       	push	r29
    1768:	cf 93       	push	r28
    176a:	00 d0       	rcall	.+0      	; 0x176c <GPIO_writePin+0x6>
    176c:	00 d0       	rcall	.+0      	; 0x176e <GPIO_writePin+0x8>
    176e:	0f 92       	push	r0
    1770:	cd b7       	in	r28, 0x3d	; 61
    1772:	de b7       	in	r29, 0x3e	; 62
    1774:	89 83       	std	Y+1, r24	; 0x01
    1776:	6a 83       	std	Y+2, r22	; 0x02
    1778:	4b 83       	std	Y+3, r20	; 0x03
	/*
	 * Check if the input port number is greater than NUM_OF_PINS_PER_PORT value.
	 * Or if the input pin number is greater than NUM_OF_PINS_PER_PORT value.
	 * In this case the input is not valid port/pin number
	 */
	if((pin_num >= NUM_OF_PINS_PER_PORT) || (port_num >= NUM_OF_PORTS))
    177a:	8a 81       	ldd	r24, Y+2	; 0x02
    177c:	88 30       	cpi	r24, 0x08	; 8
    177e:	08 f0       	brcs	.+2      	; 0x1782 <GPIO_writePin+0x1c>
    1780:	d5 c0       	rjmp	.+426    	; 0x192c <GPIO_writePin+0x1c6>
    1782:	89 81       	ldd	r24, Y+1	; 0x01
    1784:	84 30       	cpi	r24, 0x04	; 4
    1786:	08 f0       	brcs	.+2      	; 0x178a <GPIO_writePin+0x24>
    1788:	d1 c0       	rjmp	.+418    	; 0x192c <GPIO_writePin+0x1c6>
		/* Do Nothing */
	}
	else
	{
		/* Write the pin value as required */
		switch(port_num)
    178a:	89 81       	ldd	r24, Y+1	; 0x01
    178c:	28 2f       	mov	r18, r24
    178e:	30 e0       	ldi	r19, 0x00	; 0
    1790:	3d 83       	std	Y+5, r19	; 0x05
    1792:	2c 83       	std	Y+4, r18	; 0x04
    1794:	8c 81       	ldd	r24, Y+4	; 0x04
    1796:	9d 81       	ldd	r25, Y+5	; 0x05
    1798:	81 30       	cpi	r24, 0x01	; 1
    179a:	91 05       	cpc	r25, r1
    179c:	09 f4       	brne	.+2      	; 0x17a0 <GPIO_writePin+0x3a>
    179e:	43 c0       	rjmp	.+134    	; 0x1826 <GPIO_writePin+0xc0>
    17a0:	2c 81       	ldd	r18, Y+4	; 0x04
    17a2:	3d 81       	ldd	r19, Y+5	; 0x05
    17a4:	22 30       	cpi	r18, 0x02	; 2
    17a6:	31 05       	cpc	r19, r1
    17a8:	2c f4       	brge	.+10     	; 0x17b4 <GPIO_writePin+0x4e>
    17aa:	8c 81       	ldd	r24, Y+4	; 0x04
    17ac:	9d 81       	ldd	r25, Y+5	; 0x05
    17ae:	00 97       	sbiw	r24, 0x00	; 0
    17b0:	71 f0       	breq	.+28     	; 0x17ce <GPIO_writePin+0x68>
    17b2:	bc c0       	rjmp	.+376    	; 0x192c <GPIO_writePin+0x1c6>
    17b4:	2c 81       	ldd	r18, Y+4	; 0x04
    17b6:	3d 81       	ldd	r19, Y+5	; 0x05
    17b8:	22 30       	cpi	r18, 0x02	; 2
    17ba:	31 05       	cpc	r19, r1
    17bc:	09 f4       	brne	.+2      	; 0x17c0 <GPIO_writePin+0x5a>
    17be:	5f c0       	rjmp	.+190    	; 0x187e <GPIO_writePin+0x118>
    17c0:	8c 81       	ldd	r24, Y+4	; 0x04
    17c2:	9d 81       	ldd	r25, Y+5	; 0x05
    17c4:	83 30       	cpi	r24, 0x03	; 3
    17c6:	91 05       	cpc	r25, r1
    17c8:	09 f4       	brne	.+2      	; 0x17cc <GPIO_writePin+0x66>
    17ca:	85 c0       	rjmp	.+266    	; 0x18d6 <GPIO_writePin+0x170>
    17cc:	af c0       	rjmp	.+350    	; 0x192c <GPIO_writePin+0x1c6>
		{
		case PORTA_ID:
			if(value == LOGIC_HIGH)
    17ce:	8b 81       	ldd	r24, Y+3	; 0x03
    17d0:	81 30       	cpi	r24, 0x01	; 1
    17d2:	a1 f4       	brne	.+40     	; 0x17fc <GPIO_writePin+0x96>
			{
				SET_BIT(PORTA,pin_num);
    17d4:	ab e3       	ldi	r26, 0x3B	; 59
    17d6:	b0 e0       	ldi	r27, 0x00	; 0
    17d8:	eb e3       	ldi	r30, 0x3B	; 59
    17da:	f0 e0       	ldi	r31, 0x00	; 0
    17dc:	80 81       	ld	r24, Z
    17de:	48 2f       	mov	r20, r24
    17e0:	8a 81       	ldd	r24, Y+2	; 0x02
    17e2:	28 2f       	mov	r18, r24
    17e4:	30 e0       	ldi	r19, 0x00	; 0
    17e6:	81 e0       	ldi	r24, 0x01	; 1
    17e8:	90 e0       	ldi	r25, 0x00	; 0
    17ea:	02 2e       	mov	r0, r18
    17ec:	02 c0       	rjmp	.+4      	; 0x17f2 <GPIO_writePin+0x8c>
    17ee:	88 0f       	add	r24, r24
    17f0:	99 1f       	adc	r25, r25
    17f2:	0a 94       	dec	r0
    17f4:	e2 f7       	brpl	.-8      	; 0x17ee <GPIO_writePin+0x88>
    17f6:	84 2b       	or	r24, r20
    17f8:	8c 93       	st	X, r24
    17fa:	98 c0       	rjmp	.+304    	; 0x192c <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTA,pin_num);
    17fc:	ab e3       	ldi	r26, 0x3B	; 59
    17fe:	b0 e0       	ldi	r27, 0x00	; 0
    1800:	eb e3       	ldi	r30, 0x3B	; 59
    1802:	f0 e0       	ldi	r31, 0x00	; 0
    1804:	80 81       	ld	r24, Z
    1806:	48 2f       	mov	r20, r24
    1808:	8a 81       	ldd	r24, Y+2	; 0x02
    180a:	28 2f       	mov	r18, r24
    180c:	30 e0       	ldi	r19, 0x00	; 0
    180e:	81 e0       	ldi	r24, 0x01	; 1
    1810:	90 e0       	ldi	r25, 0x00	; 0
    1812:	02 2e       	mov	r0, r18
    1814:	02 c0       	rjmp	.+4      	; 0x181a <GPIO_writePin+0xb4>
    1816:	88 0f       	add	r24, r24
    1818:	99 1f       	adc	r25, r25
    181a:	0a 94       	dec	r0
    181c:	e2 f7       	brpl	.-8      	; 0x1816 <GPIO_writePin+0xb0>
    181e:	80 95       	com	r24
    1820:	84 23       	and	r24, r20
    1822:	8c 93       	st	X, r24
    1824:	83 c0       	rjmp	.+262    	; 0x192c <GPIO_writePin+0x1c6>
			}
			break;
		case PORTB_ID:
			if(value == LOGIC_HIGH)
    1826:	8b 81       	ldd	r24, Y+3	; 0x03
    1828:	81 30       	cpi	r24, 0x01	; 1
    182a:	a1 f4       	brne	.+40     	; 0x1854 <GPIO_writePin+0xee>
			{
				SET_BIT(PORTB,pin_num);
    182c:	a8 e3       	ldi	r26, 0x38	; 56
    182e:	b0 e0       	ldi	r27, 0x00	; 0
    1830:	e8 e3       	ldi	r30, 0x38	; 56
    1832:	f0 e0       	ldi	r31, 0x00	; 0
    1834:	80 81       	ld	r24, Z
    1836:	48 2f       	mov	r20, r24
    1838:	8a 81       	ldd	r24, Y+2	; 0x02
    183a:	28 2f       	mov	r18, r24
    183c:	30 e0       	ldi	r19, 0x00	; 0
    183e:	81 e0       	ldi	r24, 0x01	; 1
    1840:	90 e0       	ldi	r25, 0x00	; 0
    1842:	02 2e       	mov	r0, r18
    1844:	02 c0       	rjmp	.+4      	; 0x184a <GPIO_writePin+0xe4>
    1846:	88 0f       	add	r24, r24
    1848:	99 1f       	adc	r25, r25
    184a:	0a 94       	dec	r0
    184c:	e2 f7       	brpl	.-8      	; 0x1846 <GPIO_writePin+0xe0>
    184e:	84 2b       	or	r24, r20
    1850:	8c 93       	st	X, r24
    1852:	6c c0       	rjmp	.+216    	; 0x192c <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTB,pin_num);
    1854:	a8 e3       	ldi	r26, 0x38	; 56
    1856:	b0 e0       	ldi	r27, 0x00	; 0
    1858:	e8 e3       	ldi	r30, 0x38	; 56
    185a:	f0 e0       	ldi	r31, 0x00	; 0
    185c:	80 81       	ld	r24, Z
    185e:	48 2f       	mov	r20, r24
    1860:	8a 81       	ldd	r24, Y+2	; 0x02
    1862:	28 2f       	mov	r18, r24
    1864:	30 e0       	ldi	r19, 0x00	; 0
    1866:	81 e0       	ldi	r24, 0x01	; 1
    1868:	90 e0       	ldi	r25, 0x00	; 0
    186a:	02 2e       	mov	r0, r18
    186c:	02 c0       	rjmp	.+4      	; 0x1872 <GPIO_writePin+0x10c>
    186e:	88 0f       	add	r24, r24
    1870:	99 1f       	adc	r25, r25
    1872:	0a 94       	dec	r0
    1874:	e2 f7       	brpl	.-8      	; 0x186e <GPIO_writePin+0x108>
    1876:	80 95       	com	r24
    1878:	84 23       	and	r24, r20
    187a:	8c 93       	st	X, r24
    187c:	57 c0       	rjmp	.+174    	; 0x192c <GPIO_writePin+0x1c6>
			}
			break;
		case PORTC_ID:
			if(value == LOGIC_HIGH)
    187e:	8b 81       	ldd	r24, Y+3	; 0x03
    1880:	81 30       	cpi	r24, 0x01	; 1
    1882:	a1 f4       	brne	.+40     	; 0x18ac <GPIO_writePin+0x146>
			{
				SET_BIT(PORTC,pin_num);
    1884:	a5 e3       	ldi	r26, 0x35	; 53
    1886:	b0 e0       	ldi	r27, 0x00	; 0
    1888:	e5 e3       	ldi	r30, 0x35	; 53
    188a:	f0 e0       	ldi	r31, 0x00	; 0
    188c:	80 81       	ld	r24, Z
    188e:	48 2f       	mov	r20, r24
    1890:	8a 81       	ldd	r24, Y+2	; 0x02
    1892:	28 2f       	mov	r18, r24
    1894:	30 e0       	ldi	r19, 0x00	; 0
    1896:	81 e0       	ldi	r24, 0x01	; 1
    1898:	90 e0       	ldi	r25, 0x00	; 0
    189a:	02 2e       	mov	r0, r18
    189c:	02 c0       	rjmp	.+4      	; 0x18a2 <GPIO_writePin+0x13c>
    189e:	88 0f       	add	r24, r24
    18a0:	99 1f       	adc	r25, r25
    18a2:	0a 94       	dec	r0
    18a4:	e2 f7       	brpl	.-8      	; 0x189e <GPIO_writePin+0x138>
    18a6:	84 2b       	or	r24, r20
    18a8:	8c 93       	st	X, r24
    18aa:	40 c0       	rjmp	.+128    	; 0x192c <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTC,pin_num);
    18ac:	a5 e3       	ldi	r26, 0x35	; 53
    18ae:	b0 e0       	ldi	r27, 0x00	; 0
    18b0:	e5 e3       	ldi	r30, 0x35	; 53
    18b2:	f0 e0       	ldi	r31, 0x00	; 0
    18b4:	80 81       	ld	r24, Z
    18b6:	48 2f       	mov	r20, r24
    18b8:	8a 81       	ldd	r24, Y+2	; 0x02
    18ba:	28 2f       	mov	r18, r24
    18bc:	30 e0       	ldi	r19, 0x00	; 0
    18be:	81 e0       	ldi	r24, 0x01	; 1
    18c0:	90 e0       	ldi	r25, 0x00	; 0
    18c2:	02 2e       	mov	r0, r18
    18c4:	02 c0       	rjmp	.+4      	; 0x18ca <GPIO_writePin+0x164>
    18c6:	88 0f       	add	r24, r24
    18c8:	99 1f       	adc	r25, r25
    18ca:	0a 94       	dec	r0
    18cc:	e2 f7       	brpl	.-8      	; 0x18c6 <GPIO_writePin+0x160>
    18ce:	80 95       	com	r24
    18d0:	84 23       	and	r24, r20
    18d2:	8c 93       	st	X, r24
    18d4:	2b c0       	rjmp	.+86     	; 0x192c <GPIO_writePin+0x1c6>
			}
			break;
		case PORTD_ID:
			if(value == LOGIC_HIGH)
    18d6:	8b 81       	ldd	r24, Y+3	; 0x03
    18d8:	81 30       	cpi	r24, 0x01	; 1
    18da:	a1 f4       	brne	.+40     	; 0x1904 <GPIO_writePin+0x19e>
			{
				SET_BIT(PORTD,pin_num);
    18dc:	a2 e3       	ldi	r26, 0x32	; 50
    18de:	b0 e0       	ldi	r27, 0x00	; 0
    18e0:	e2 e3       	ldi	r30, 0x32	; 50
    18e2:	f0 e0       	ldi	r31, 0x00	; 0
    18e4:	80 81       	ld	r24, Z
    18e6:	48 2f       	mov	r20, r24
    18e8:	8a 81       	ldd	r24, Y+2	; 0x02
    18ea:	28 2f       	mov	r18, r24
    18ec:	30 e0       	ldi	r19, 0x00	; 0
    18ee:	81 e0       	ldi	r24, 0x01	; 1
    18f0:	90 e0       	ldi	r25, 0x00	; 0
    18f2:	02 2e       	mov	r0, r18
    18f4:	02 c0       	rjmp	.+4      	; 0x18fa <GPIO_writePin+0x194>
    18f6:	88 0f       	add	r24, r24
    18f8:	99 1f       	adc	r25, r25
    18fa:	0a 94       	dec	r0
    18fc:	e2 f7       	brpl	.-8      	; 0x18f6 <GPIO_writePin+0x190>
    18fe:	84 2b       	or	r24, r20
    1900:	8c 93       	st	X, r24
    1902:	14 c0       	rjmp	.+40     	; 0x192c <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTD,pin_num);
    1904:	a2 e3       	ldi	r26, 0x32	; 50
    1906:	b0 e0       	ldi	r27, 0x00	; 0
    1908:	e2 e3       	ldi	r30, 0x32	; 50
    190a:	f0 e0       	ldi	r31, 0x00	; 0
    190c:	80 81       	ld	r24, Z
    190e:	48 2f       	mov	r20, r24
    1910:	8a 81       	ldd	r24, Y+2	; 0x02
    1912:	28 2f       	mov	r18, r24
    1914:	30 e0       	ldi	r19, 0x00	; 0
    1916:	81 e0       	ldi	r24, 0x01	; 1
    1918:	90 e0       	ldi	r25, 0x00	; 0
    191a:	02 2e       	mov	r0, r18
    191c:	02 c0       	rjmp	.+4      	; 0x1922 <GPIO_writePin+0x1bc>
    191e:	88 0f       	add	r24, r24
    1920:	99 1f       	adc	r25, r25
    1922:	0a 94       	dec	r0
    1924:	e2 f7       	brpl	.-8      	; 0x191e <GPIO_writePin+0x1b8>
    1926:	80 95       	com	r24
    1928:	84 23       	and	r24, r20
    192a:	8c 93       	st	X, r24
			}
			break;
		}
	}
}
    192c:	0f 90       	pop	r0
    192e:	0f 90       	pop	r0
    1930:	0f 90       	pop	r0
    1932:	0f 90       	pop	r0
    1934:	0f 90       	pop	r0
    1936:	cf 91       	pop	r28
    1938:	df 91       	pop	r29
    193a:	08 95       	ret

0000193c <GPIO_readPin>:
 * Description :
 * Read and return the value for the required pin, it should be Logic High or Logic Low.
 * If the input port number or pin number are not correct, The function will return Logic Low.
 */
uint8 GPIO_readPin(uint8 port_num, uint8 pin_num)
{
    193c:	df 93       	push	r29
    193e:	cf 93       	push	r28
    1940:	00 d0       	rcall	.+0      	; 0x1942 <GPIO_readPin+0x6>
    1942:	00 d0       	rcall	.+0      	; 0x1944 <GPIO_readPin+0x8>
    1944:	0f 92       	push	r0
    1946:	cd b7       	in	r28, 0x3d	; 61
    1948:	de b7       	in	r29, 0x3e	; 62
    194a:	8a 83       	std	Y+2, r24	; 0x02
    194c:	6b 83       	std	Y+3, r22	; 0x03
	uint8 pin_value = LOGIC_LOW;
    194e:	19 82       	std	Y+1, r1	; 0x01
	/*
	 * Check if the input port number is greater than NUM_OF_PINS_PER_PORT value.
	 * Or if the input pin number is greater than NUM_OF_PINS_PER_PORT value.
	 * In this case the input is not valid port/pin number
	 */
	if((pin_num >= NUM_OF_PINS_PER_PORT) || (port_num >= NUM_OF_PORTS))
    1950:	8b 81       	ldd	r24, Y+3	; 0x03
    1952:	88 30       	cpi	r24, 0x08	; 8
    1954:	08 f0       	brcs	.+2      	; 0x1958 <GPIO_readPin+0x1c>
    1956:	84 c0       	rjmp	.+264    	; 0x1a60 <GPIO_readPin+0x124>
    1958:	8a 81       	ldd	r24, Y+2	; 0x02
    195a:	84 30       	cpi	r24, 0x04	; 4
    195c:	08 f0       	brcs	.+2      	; 0x1960 <GPIO_readPin+0x24>
    195e:	80 c0       	rjmp	.+256    	; 0x1a60 <GPIO_readPin+0x124>
		/* Do Nothing */
	}
	else
	{
		/* Read the pin value as required */
		switch(port_num)
    1960:	8a 81       	ldd	r24, Y+2	; 0x02
    1962:	28 2f       	mov	r18, r24
    1964:	30 e0       	ldi	r19, 0x00	; 0
    1966:	3d 83       	std	Y+5, r19	; 0x05
    1968:	2c 83       	std	Y+4, r18	; 0x04
    196a:	4c 81       	ldd	r20, Y+4	; 0x04
    196c:	5d 81       	ldd	r21, Y+5	; 0x05
    196e:	41 30       	cpi	r20, 0x01	; 1
    1970:	51 05       	cpc	r21, r1
    1972:	79 f1       	breq	.+94     	; 0x19d2 <GPIO_readPin+0x96>
    1974:	8c 81       	ldd	r24, Y+4	; 0x04
    1976:	9d 81       	ldd	r25, Y+5	; 0x05
    1978:	82 30       	cpi	r24, 0x02	; 2
    197a:	91 05       	cpc	r25, r1
    197c:	34 f4       	brge	.+12     	; 0x198a <GPIO_readPin+0x4e>
    197e:	2c 81       	ldd	r18, Y+4	; 0x04
    1980:	3d 81       	ldd	r19, Y+5	; 0x05
    1982:	21 15       	cp	r18, r1
    1984:	31 05       	cpc	r19, r1
    1986:	69 f0       	breq	.+26     	; 0x19a2 <GPIO_readPin+0x66>
    1988:	6b c0       	rjmp	.+214    	; 0x1a60 <GPIO_readPin+0x124>
    198a:	4c 81       	ldd	r20, Y+4	; 0x04
    198c:	5d 81       	ldd	r21, Y+5	; 0x05
    198e:	42 30       	cpi	r20, 0x02	; 2
    1990:	51 05       	cpc	r21, r1
    1992:	b9 f1       	breq	.+110    	; 0x1a02 <GPIO_readPin+0xc6>
    1994:	8c 81       	ldd	r24, Y+4	; 0x04
    1996:	9d 81       	ldd	r25, Y+5	; 0x05
    1998:	83 30       	cpi	r24, 0x03	; 3
    199a:	91 05       	cpc	r25, r1
    199c:	09 f4       	brne	.+2      	; 0x19a0 <GPIO_readPin+0x64>
    199e:	49 c0       	rjmp	.+146    	; 0x1a32 <GPIO_readPin+0xf6>
    19a0:	5f c0       	rjmp	.+190    	; 0x1a60 <GPIO_readPin+0x124>
		{
		case PORTA_ID:
			if(BIT_IS_SET(PINA,pin_num))
    19a2:	e9 e3       	ldi	r30, 0x39	; 57
    19a4:	f0 e0       	ldi	r31, 0x00	; 0
    19a6:	80 81       	ld	r24, Z
    19a8:	28 2f       	mov	r18, r24
    19aa:	30 e0       	ldi	r19, 0x00	; 0
    19ac:	8b 81       	ldd	r24, Y+3	; 0x03
    19ae:	88 2f       	mov	r24, r24
    19b0:	90 e0       	ldi	r25, 0x00	; 0
    19b2:	a9 01       	movw	r20, r18
    19b4:	02 c0       	rjmp	.+4      	; 0x19ba <GPIO_readPin+0x7e>
    19b6:	55 95       	asr	r21
    19b8:	47 95       	ror	r20
    19ba:	8a 95       	dec	r24
    19bc:	e2 f7       	brpl	.-8      	; 0x19b6 <GPIO_readPin+0x7a>
    19be:	ca 01       	movw	r24, r20
    19c0:	81 70       	andi	r24, 0x01	; 1
    19c2:	90 70       	andi	r25, 0x00	; 0
    19c4:	88 23       	and	r24, r24
    19c6:	19 f0       	breq	.+6      	; 0x19ce <GPIO_readPin+0x92>
			{
				pin_value = LOGIC_HIGH;
    19c8:	81 e0       	ldi	r24, 0x01	; 1
    19ca:	89 83       	std	Y+1, r24	; 0x01
    19cc:	49 c0       	rjmp	.+146    	; 0x1a60 <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
    19ce:	19 82       	std	Y+1, r1	; 0x01
    19d0:	47 c0       	rjmp	.+142    	; 0x1a60 <GPIO_readPin+0x124>
			}
			break;
		case PORTB_ID:
			if(BIT_IS_SET(PINB,pin_num))
    19d2:	e6 e3       	ldi	r30, 0x36	; 54
    19d4:	f0 e0       	ldi	r31, 0x00	; 0
    19d6:	80 81       	ld	r24, Z
    19d8:	28 2f       	mov	r18, r24
    19da:	30 e0       	ldi	r19, 0x00	; 0
    19dc:	8b 81       	ldd	r24, Y+3	; 0x03
    19de:	88 2f       	mov	r24, r24
    19e0:	90 e0       	ldi	r25, 0x00	; 0
    19e2:	a9 01       	movw	r20, r18
    19e4:	02 c0       	rjmp	.+4      	; 0x19ea <GPIO_readPin+0xae>
    19e6:	55 95       	asr	r21
    19e8:	47 95       	ror	r20
    19ea:	8a 95       	dec	r24
    19ec:	e2 f7       	brpl	.-8      	; 0x19e6 <GPIO_readPin+0xaa>
    19ee:	ca 01       	movw	r24, r20
    19f0:	81 70       	andi	r24, 0x01	; 1
    19f2:	90 70       	andi	r25, 0x00	; 0
    19f4:	88 23       	and	r24, r24
    19f6:	19 f0       	breq	.+6      	; 0x19fe <GPIO_readPin+0xc2>
			{
				pin_value = LOGIC_HIGH;
    19f8:	81 e0       	ldi	r24, 0x01	; 1
    19fa:	89 83       	std	Y+1, r24	; 0x01
    19fc:	31 c0       	rjmp	.+98     	; 0x1a60 <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
    19fe:	19 82       	std	Y+1, r1	; 0x01
    1a00:	2f c0       	rjmp	.+94     	; 0x1a60 <GPIO_readPin+0x124>
			}
			break;
		case PORTC_ID:
			if(BIT_IS_SET(PINC,pin_num))
    1a02:	e3 e3       	ldi	r30, 0x33	; 51
    1a04:	f0 e0       	ldi	r31, 0x00	; 0
    1a06:	80 81       	ld	r24, Z
    1a08:	28 2f       	mov	r18, r24
    1a0a:	30 e0       	ldi	r19, 0x00	; 0
    1a0c:	8b 81       	ldd	r24, Y+3	; 0x03
    1a0e:	88 2f       	mov	r24, r24
    1a10:	90 e0       	ldi	r25, 0x00	; 0
    1a12:	a9 01       	movw	r20, r18
    1a14:	02 c0       	rjmp	.+4      	; 0x1a1a <GPIO_readPin+0xde>
    1a16:	55 95       	asr	r21
    1a18:	47 95       	ror	r20
    1a1a:	8a 95       	dec	r24
    1a1c:	e2 f7       	brpl	.-8      	; 0x1a16 <GPIO_readPin+0xda>
    1a1e:	ca 01       	movw	r24, r20
    1a20:	81 70       	andi	r24, 0x01	; 1
    1a22:	90 70       	andi	r25, 0x00	; 0
    1a24:	88 23       	and	r24, r24
    1a26:	19 f0       	breq	.+6      	; 0x1a2e <GPIO_readPin+0xf2>
			{
				pin_value = LOGIC_HIGH;
    1a28:	81 e0       	ldi	r24, 0x01	; 1
    1a2a:	89 83       	std	Y+1, r24	; 0x01
    1a2c:	19 c0       	rjmp	.+50     	; 0x1a60 <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
    1a2e:	19 82       	std	Y+1, r1	; 0x01
    1a30:	17 c0       	rjmp	.+46     	; 0x1a60 <GPIO_readPin+0x124>
			}
			break;
		case PORTD_ID:
			if(BIT_IS_SET(PIND,pin_num))
    1a32:	e0 e3       	ldi	r30, 0x30	; 48
    1a34:	f0 e0       	ldi	r31, 0x00	; 0
    1a36:	80 81       	ld	r24, Z
    1a38:	28 2f       	mov	r18, r24
    1a3a:	30 e0       	ldi	r19, 0x00	; 0
    1a3c:	8b 81       	ldd	r24, Y+3	; 0x03
    1a3e:	88 2f       	mov	r24, r24
    1a40:	90 e0       	ldi	r25, 0x00	; 0
    1a42:	a9 01       	movw	r20, r18
    1a44:	02 c0       	rjmp	.+4      	; 0x1a4a <GPIO_readPin+0x10e>
    1a46:	55 95       	asr	r21
    1a48:	47 95       	ror	r20
    1a4a:	8a 95       	dec	r24
    1a4c:	e2 f7       	brpl	.-8      	; 0x1a46 <GPIO_readPin+0x10a>
    1a4e:	ca 01       	movw	r24, r20
    1a50:	81 70       	andi	r24, 0x01	; 1
    1a52:	90 70       	andi	r25, 0x00	; 0
    1a54:	88 23       	and	r24, r24
    1a56:	19 f0       	breq	.+6      	; 0x1a5e <GPIO_readPin+0x122>
			{
				pin_value = LOGIC_HIGH;
    1a58:	81 e0       	ldi	r24, 0x01	; 1
    1a5a:	89 83       	std	Y+1, r24	; 0x01
    1a5c:	01 c0       	rjmp	.+2      	; 0x1a60 <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
    1a5e:	19 82       	std	Y+1, r1	; 0x01
			}
			break;
		}
	}

	return pin_value;
    1a60:	89 81       	ldd	r24, Y+1	; 0x01
}
    1a62:	0f 90       	pop	r0
    1a64:	0f 90       	pop	r0
    1a66:	0f 90       	pop	r0
    1a68:	0f 90       	pop	r0
    1a6a:	0f 90       	pop	r0
    1a6c:	cf 91       	pop	r28
    1a6e:	df 91       	pop	r29
    1a70:	08 95       	ret

00001a72 <GPIO_setupPortDirection>:
 * If the direction value is PORT_INPUT all pins in this port should be input pins.
 * If the direction value is PORT_OUTPUT all pins in this port should be output pins.
 * If the input port number is not correct, The function will not handle the request.
 */
void GPIO_setupPortDirection(uint8 port_num, GPIO_PortDirectionType direction)
{
    1a72:	df 93       	push	r29
    1a74:	cf 93       	push	r28
    1a76:	00 d0       	rcall	.+0      	; 0x1a78 <GPIO_setupPortDirection+0x6>
    1a78:	00 d0       	rcall	.+0      	; 0x1a7a <GPIO_setupPortDirection+0x8>
    1a7a:	cd b7       	in	r28, 0x3d	; 61
    1a7c:	de b7       	in	r29, 0x3e	; 62
    1a7e:	89 83       	std	Y+1, r24	; 0x01
    1a80:	6a 83       	std	Y+2, r22	; 0x02
	/*
	 * Check if the input number is greater than NUM_OF_PORTS value.
	 * In this case the input is not valid port number
	 */
	if(port_num >= NUM_OF_PORTS)
    1a82:	89 81       	ldd	r24, Y+1	; 0x01
    1a84:	84 30       	cpi	r24, 0x04	; 4
    1a86:	90 f5       	brcc	.+100    	; 0x1aec <GPIO_setupPortDirection+0x7a>
		/* Do Nothing */
	}
	else
	{
		/* Setup the port direction as required */
		switch(port_num)
    1a88:	89 81       	ldd	r24, Y+1	; 0x01
    1a8a:	28 2f       	mov	r18, r24
    1a8c:	30 e0       	ldi	r19, 0x00	; 0
    1a8e:	3c 83       	std	Y+4, r19	; 0x04
    1a90:	2b 83       	std	Y+3, r18	; 0x03
    1a92:	8b 81       	ldd	r24, Y+3	; 0x03
    1a94:	9c 81       	ldd	r25, Y+4	; 0x04
    1a96:	81 30       	cpi	r24, 0x01	; 1
    1a98:	91 05       	cpc	r25, r1
    1a9a:	d1 f0       	breq	.+52     	; 0x1ad0 <GPIO_setupPortDirection+0x5e>
    1a9c:	2b 81       	ldd	r18, Y+3	; 0x03
    1a9e:	3c 81       	ldd	r19, Y+4	; 0x04
    1aa0:	22 30       	cpi	r18, 0x02	; 2
    1aa2:	31 05       	cpc	r19, r1
    1aa4:	2c f4       	brge	.+10     	; 0x1ab0 <GPIO_setupPortDirection+0x3e>
    1aa6:	8b 81       	ldd	r24, Y+3	; 0x03
    1aa8:	9c 81       	ldd	r25, Y+4	; 0x04
    1aaa:	00 97       	sbiw	r24, 0x00	; 0
    1aac:	61 f0       	breq	.+24     	; 0x1ac6 <GPIO_setupPortDirection+0x54>
    1aae:	1e c0       	rjmp	.+60     	; 0x1aec <GPIO_setupPortDirection+0x7a>
    1ab0:	2b 81       	ldd	r18, Y+3	; 0x03
    1ab2:	3c 81       	ldd	r19, Y+4	; 0x04
    1ab4:	22 30       	cpi	r18, 0x02	; 2
    1ab6:	31 05       	cpc	r19, r1
    1ab8:	81 f0       	breq	.+32     	; 0x1ada <GPIO_setupPortDirection+0x68>
    1aba:	8b 81       	ldd	r24, Y+3	; 0x03
    1abc:	9c 81       	ldd	r25, Y+4	; 0x04
    1abe:	83 30       	cpi	r24, 0x03	; 3
    1ac0:	91 05       	cpc	r25, r1
    1ac2:	81 f0       	breq	.+32     	; 0x1ae4 <GPIO_setupPortDirection+0x72>
    1ac4:	13 c0       	rjmp	.+38     	; 0x1aec <GPIO_setupPortDirection+0x7a>
		{
		case PORTA_ID:
			DDRA = direction;
    1ac6:	ea e3       	ldi	r30, 0x3A	; 58
    1ac8:	f0 e0       	ldi	r31, 0x00	; 0
    1aca:	8a 81       	ldd	r24, Y+2	; 0x02
    1acc:	80 83       	st	Z, r24
    1ace:	0e c0       	rjmp	.+28     	; 0x1aec <GPIO_setupPortDirection+0x7a>
			break;
		case PORTB_ID:
			DDRB = direction;
    1ad0:	e7 e3       	ldi	r30, 0x37	; 55
    1ad2:	f0 e0       	ldi	r31, 0x00	; 0
    1ad4:	8a 81       	ldd	r24, Y+2	; 0x02
    1ad6:	80 83       	st	Z, r24
    1ad8:	09 c0       	rjmp	.+18     	; 0x1aec <GPIO_setupPortDirection+0x7a>
			break;
		case PORTC_ID:
			DDRC = direction;
    1ada:	e4 e3       	ldi	r30, 0x34	; 52
    1adc:	f0 e0       	ldi	r31, 0x00	; 0
    1ade:	8a 81       	ldd	r24, Y+2	; 0x02
    1ae0:	80 83       	st	Z, r24
    1ae2:	04 c0       	rjmp	.+8      	; 0x1aec <GPIO_setupPortDirection+0x7a>
			break;
		case PORTD_ID:
			DDRD = direction;
    1ae4:	e1 e3       	ldi	r30, 0x31	; 49
    1ae6:	f0 e0       	ldi	r31, 0x00	; 0
    1ae8:	8a 81       	ldd	r24, Y+2	; 0x02
    1aea:	80 83       	st	Z, r24
			break;
		}
	}
}
    1aec:	0f 90       	pop	r0
    1aee:	0f 90       	pop	r0
    1af0:	0f 90       	pop	r0
    1af2:	0f 90       	pop	r0
    1af4:	cf 91       	pop	r28
    1af6:	df 91       	pop	r29
    1af8:	08 95       	ret

00001afa <GPIO_writePort>:
 * If any pin in the port is output pin the value will be written.
 * If any pin in the port is input pin this will activate/deactivate the internal pull-up resistor.
 * If the input port number is not correct, The function will not handle the request.
 */
void GPIO_writePort(uint8 port_num, uint8 value)
{
    1afa:	df 93       	push	r29
    1afc:	cf 93       	push	r28
    1afe:	00 d0       	rcall	.+0      	; 0x1b00 <GPIO_writePort+0x6>
    1b00:	00 d0       	rcall	.+0      	; 0x1b02 <GPIO_writePort+0x8>
    1b02:	cd b7       	in	r28, 0x3d	; 61
    1b04:	de b7       	in	r29, 0x3e	; 62
    1b06:	89 83       	std	Y+1, r24	; 0x01
    1b08:	6a 83       	std	Y+2, r22	; 0x02
	/*
	 * Check if the input number is greater than NUM_OF_PORTS value.
	 * In this case the input is not valid port number
	 */
	if(port_num >= NUM_OF_PORTS)
    1b0a:	89 81       	ldd	r24, Y+1	; 0x01
    1b0c:	84 30       	cpi	r24, 0x04	; 4
    1b0e:	90 f5       	brcc	.+100    	; 0x1b74 <GPIO_writePort+0x7a>
		/* Do Nothing */
	}
	else
	{
		/* Write the port value as required */
		switch(port_num)
    1b10:	89 81       	ldd	r24, Y+1	; 0x01
    1b12:	28 2f       	mov	r18, r24
    1b14:	30 e0       	ldi	r19, 0x00	; 0
    1b16:	3c 83       	std	Y+4, r19	; 0x04
    1b18:	2b 83       	std	Y+3, r18	; 0x03
    1b1a:	8b 81       	ldd	r24, Y+3	; 0x03
    1b1c:	9c 81       	ldd	r25, Y+4	; 0x04
    1b1e:	81 30       	cpi	r24, 0x01	; 1
    1b20:	91 05       	cpc	r25, r1
    1b22:	d1 f0       	breq	.+52     	; 0x1b58 <GPIO_writePort+0x5e>
    1b24:	2b 81       	ldd	r18, Y+3	; 0x03
    1b26:	3c 81       	ldd	r19, Y+4	; 0x04
    1b28:	22 30       	cpi	r18, 0x02	; 2
    1b2a:	31 05       	cpc	r19, r1
    1b2c:	2c f4       	brge	.+10     	; 0x1b38 <GPIO_writePort+0x3e>
    1b2e:	8b 81       	ldd	r24, Y+3	; 0x03
    1b30:	9c 81       	ldd	r25, Y+4	; 0x04
    1b32:	00 97       	sbiw	r24, 0x00	; 0
    1b34:	61 f0       	breq	.+24     	; 0x1b4e <GPIO_writePort+0x54>
    1b36:	1e c0       	rjmp	.+60     	; 0x1b74 <GPIO_writePort+0x7a>
    1b38:	2b 81       	ldd	r18, Y+3	; 0x03
    1b3a:	3c 81       	ldd	r19, Y+4	; 0x04
    1b3c:	22 30       	cpi	r18, 0x02	; 2
    1b3e:	31 05       	cpc	r19, r1
    1b40:	81 f0       	breq	.+32     	; 0x1b62 <GPIO_writePort+0x68>
    1b42:	8b 81       	ldd	r24, Y+3	; 0x03
    1b44:	9c 81       	ldd	r25, Y+4	; 0x04
    1b46:	83 30       	cpi	r24, 0x03	; 3
    1b48:	91 05       	cpc	r25, r1
    1b4a:	81 f0       	breq	.+32     	; 0x1b6c <GPIO_writePort+0x72>
    1b4c:	13 c0       	rjmp	.+38     	; 0x1b74 <GPIO_writePort+0x7a>
		{
		case PORTA_ID:
			PORTA = value;
    1b4e:	eb e3       	ldi	r30, 0x3B	; 59
    1b50:	f0 e0       	ldi	r31, 0x00	; 0
    1b52:	8a 81       	ldd	r24, Y+2	; 0x02
    1b54:	80 83       	st	Z, r24
    1b56:	0e c0       	rjmp	.+28     	; 0x1b74 <GPIO_writePort+0x7a>
			break;
		case PORTB_ID:
			PORTB = value;
    1b58:	e8 e3       	ldi	r30, 0x38	; 56
    1b5a:	f0 e0       	ldi	r31, 0x00	; 0
    1b5c:	8a 81       	ldd	r24, Y+2	; 0x02
    1b5e:	80 83       	st	Z, r24
    1b60:	09 c0       	rjmp	.+18     	; 0x1b74 <GPIO_writePort+0x7a>
			break;
		case PORTC_ID:
			PORTC = value;
    1b62:	e5 e3       	ldi	r30, 0x35	; 53
    1b64:	f0 e0       	ldi	r31, 0x00	; 0
    1b66:	8a 81       	ldd	r24, Y+2	; 0x02
    1b68:	80 83       	st	Z, r24
    1b6a:	04 c0       	rjmp	.+8      	; 0x1b74 <GPIO_writePort+0x7a>
			break;
		case PORTD_ID:
			PORTD = value;
    1b6c:	e2 e3       	ldi	r30, 0x32	; 50
    1b6e:	f0 e0       	ldi	r31, 0x00	; 0
    1b70:	8a 81       	ldd	r24, Y+2	; 0x02
    1b72:	80 83       	st	Z, r24
			break;
		}
	}
}
    1b74:	0f 90       	pop	r0
    1b76:	0f 90       	pop	r0
    1b78:	0f 90       	pop	r0
    1b7a:	0f 90       	pop	r0
    1b7c:	cf 91       	pop	r28
    1b7e:	df 91       	pop	r29
    1b80:	08 95       	ret

00001b82 <GPIO_readPort>:
 * Description :
 * Read and return the value of the required port.
 * If the input port number is not correct, The function will return ZERO value.
 */
uint8 GPIO_readPort(uint8 port_num)
{
    1b82:	df 93       	push	r29
    1b84:	cf 93       	push	r28
    1b86:	00 d0       	rcall	.+0      	; 0x1b88 <GPIO_readPort+0x6>
    1b88:	00 d0       	rcall	.+0      	; 0x1b8a <GPIO_readPort+0x8>
    1b8a:	cd b7       	in	r28, 0x3d	; 61
    1b8c:	de b7       	in	r29, 0x3e	; 62
    1b8e:	8a 83       	std	Y+2, r24	; 0x02
	uint8 value = LOGIC_LOW;
    1b90:	19 82       	std	Y+1, r1	; 0x01

	/*
	 * Check if the input number is greater than NUM_OF_PORTS value.
	 * In this case the input is not valid port number
	 */
	if(port_num >= NUM_OF_PORTS)
    1b92:	8a 81       	ldd	r24, Y+2	; 0x02
    1b94:	84 30       	cpi	r24, 0x04	; 4
    1b96:	90 f5       	brcc	.+100    	; 0x1bfc <GPIO_readPort+0x7a>
		/* Do Nothing */
	}
	else
	{
		/* Read the port value as required */
		switch(port_num)
    1b98:	8a 81       	ldd	r24, Y+2	; 0x02
    1b9a:	28 2f       	mov	r18, r24
    1b9c:	30 e0       	ldi	r19, 0x00	; 0
    1b9e:	3c 83       	std	Y+4, r19	; 0x04
    1ba0:	2b 83       	std	Y+3, r18	; 0x03
    1ba2:	8b 81       	ldd	r24, Y+3	; 0x03
    1ba4:	9c 81       	ldd	r25, Y+4	; 0x04
    1ba6:	81 30       	cpi	r24, 0x01	; 1
    1ba8:	91 05       	cpc	r25, r1
    1baa:	d1 f0       	breq	.+52     	; 0x1be0 <GPIO_readPort+0x5e>
    1bac:	2b 81       	ldd	r18, Y+3	; 0x03
    1bae:	3c 81       	ldd	r19, Y+4	; 0x04
    1bb0:	22 30       	cpi	r18, 0x02	; 2
    1bb2:	31 05       	cpc	r19, r1
    1bb4:	2c f4       	brge	.+10     	; 0x1bc0 <GPIO_readPort+0x3e>
    1bb6:	8b 81       	ldd	r24, Y+3	; 0x03
    1bb8:	9c 81       	ldd	r25, Y+4	; 0x04
    1bba:	00 97       	sbiw	r24, 0x00	; 0
    1bbc:	61 f0       	breq	.+24     	; 0x1bd6 <GPIO_readPort+0x54>
    1bbe:	1e c0       	rjmp	.+60     	; 0x1bfc <GPIO_readPort+0x7a>
    1bc0:	2b 81       	ldd	r18, Y+3	; 0x03
    1bc2:	3c 81       	ldd	r19, Y+4	; 0x04
    1bc4:	22 30       	cpi	r18, 0x02	; 2
    1bc6:	31 05       	cpc	r19, r1
    1bc8:	81 f0       	breq	.+32     	; 0x1bea <GPIO_readPort+0x68>
    1bca:	8b 81       	ldd	r24, Y+3	; 0x03
    1bcc:	9c 81       	ldd	r25, Y+4	; 0x04
    1bce:	83 30       	cpi	r24, 0x03	; 3
    1bd0:	91 05       	cpc	r25, r1
    1bd2:	81 f0       	breq	.+32     	; 0x1bf4 <GPIO_readPort+0x72>
    1bd4:	13 c0       	rjmp	.+38     	; 0x1bfc <GPIO_readPort+0x7a>
		{
		case PORTA_ID:
			value = PINA;
    1bd6:	e9 e3       	ldi	r30, 0x39	; 57
    1bd8:	f0 e0       	ldi	r31, 0x00	; 0
    1bda:	80 81       	ld	r24, Z
    1bdc:	89 83       	std	Y+1, r24	; 0x01
    1bde:	0e c0       	rjmp	.+28     	; 0x1bfc <GPIO_readPort+0x7a>
			break;
		case PORTB_ID:
			value = PINB;
    1be0:	e6 e3       	ldi	r30, 0x36	; 54
    1be2:	f0 e0       	ldi	r31, 0x00	; 0
    1be4:	80 81       	ld	r24, Z
    1be6:	89 83       	std	Y+1, r24	; 0x01
    1be8:	09 c0       	rjmp	.+18     	; 0x1bfc <GPIO_readPort+0x7a>
			break;
		case PORTC_ID:
			value = PINC;
    1bea:	e3 e3       	ldi	r30, 0x33	; 51
    1bec:	f0 e0       	ldi	r31, 0x00	; 0
    1bee:	80 81       	ld	r24, Z
    1bf0:	89 83       	std	Y+1, r24	; 0x01
    1bf2:	04 c0       	rjmp	.+8      	; 0x1bfc <GPIO_readPort+0x7a>
			break;
		case PORTD_ID:
			value = PIND;
    1bf4:	e0 e3       	ldi	r30, 0x30	; 48
    1bf6:	f0 e0       	ldi	r31, 0x00	; 0
    1bf8:	80 81       	ld	r24, Z
    1bfa:	89 83       	std	Y+1, r24	; 0x01
			break;
		}
	}

	return value;
    1bfc:	89 81       	ldd	r24, Y+1	; 0x01
}
    1bfe:	0f 90       	pop	r0
    1c00:	0f 90       	pop	r0
    1c02:	0f 90       	pop	r0
    1c04:	0f 90       	pop	r0
    1c06:	cf 91       	pop	r28
    1c08:	df 91       	pop	r29
    1c0a:	08 95       	ret

00001c0c <DcMotor_init>:

#include "motor.h"
#include "timer.h"
#include "gpio.h"

void DcMotor_init(void){
    1c0c:	df 93       	push	r29
    1c0e:	cf 93       	push	r28
    1c10:	cd b7       	in	r28, 0x3d	; 61
    1c12:	de b7       	in	r29, 0x3e	; 62
    1c14:	28 97       	sbiw	r28, 0x08	; 8
    1c16:	0f b6       	in	r0, 0x3f	; 63
    1c18:	f8 94       	cli
    1c1a:	de bf       	out	0x3e, r29	; 62
    1c1c:	0f be       	out	0x3f, r0	; 63
    1c1e:	cd bf       	out	0x3d, r28	; 61
	/* Initializing Timer --Setting up PWM Signal */
	Timer_Config timer_configurations = {CLK_8, FAST_PWM, NON_INVERTING};
    1c20:	ce 01       	movw	r24, r28
    1c22:	01 96       	adiw	r24, 0x01	; 1
    1c24:	9d 83       	std	Y+5, r25	; 0x05
    1c26:	8c 83       	std	Y+4, r24	; 0x04
    1c28:	e2 e7       	ldi	r30, 0x72	; 114
    1c2a:	f0 e0       	ldi	r31, 0x00	; 0
    1c2c:	ff 83       	std	Y+7, r31	; 0x07
    1c2e:	ee 83       	std	Y+6, r30	; 0x06
    1c30:	f3 e0       	ldi	r31, 0x03	; 3
    1c32:	f8 87       	std	Y+8, r31	; 0x08
    1c34:	ee 81       	ldd	r30, Y+6	; 0x06
    1c36:	ff 81       	ldd	r31, Y+7	; 0x07
    1c38:	00 80       	ld	r0, Z
    1c3a:	8e 81       	ldd	r24, Y+6	; 0x06
    1c3c:	9f 81       	ldd	r25, Y+7	; 0x07
    1c3e:	01 96       	adiw	r24, 0x01	; 1
    1c40:	9f 83       	std	Y+7, r25	; 0x07
    1c42:	8e 83       	std	Y+6, r24	; 0x06
    1c44:	ec 81       	ldd	r30, Y+4	; 0x04
    1c46:	fd 81       	ldd	r31, Y+5	; 0x05
    1c48:	00 82       	st	Z, r0
    1c4a:	8c 81       	ldd	r24, Y+4	; 0x04
    1c4c:	9d 81       	ldd	r25, Y+5	; 0x05
    1c4e:	01 96       	adiw	r24, 0x01	; 1
    1c50:	9d 83       	std	Y+5, r25	; 0x05
    1c52:	8c 83       	std	Y+4, r24	; 0x04
    1c54:	98 85       	ldd	r25, Y+8	; 0x08
    1c56:	91 50       	subi	r25, 0x01	; 1
    1c58:	98 87       	std	Y+8, r25	; 0x08
    1c5a:	e8 85       	ldd	r30, Y+8	; 0x08
    1c5c:	ee 23       	and	r30, r30
    1c5e:	51 f7       	brne	.-44     	; 0x1c34 <DcMotor_init+0x28>
	Timer_init(&timer_configurations);
    1c60:	ce 01       	movw	r24, r28
    1c62:	01 96       	adiw	r24, 0x01	; 1
    1c64:	0e 94 c3 0e 	call	0x1d86	; 0x1d86 <Timer_init>

	/* setup direction of motor pins to be OUTPUT */
	GPIO_setupPinDirection(MOTOR_EN_PORT, MOTOR_EN_PIN, PIN_OUTPUT);
    1c68:	81 e0       	ldi	r24, 0x01	; 1
    1c6a:	63 e0       	ldi	r22, 0x03	; 3
    1c6c:	41 e0       	ldi	r20, 0x01	; 1
    1c6e:	0e 94 c8 0a 	call	0x1590	; 0x1590 <GPIO_setupPinDirection>
	GPIO_setupPinDirection(MOTOR_IN1_PORT, MOTOR_IN1_PIN, PIN_OUTPUT);
    1c72:	81 e0       	ldi	r24, 0x01	; 1
    1c74:	60 e0       	ldi	r22, 0x00	; 0
    1c76:	41 e0       	ldi	r20, 0x01	; 1
    1c78:	0e 94 c8 0a 	call	0x1590	; 0x1590 <GPIO_setupPinDirection>
	GPIO_setupPinDirection(MOTOR_IN2_PORT, MOTOR_IN2_PIN, PIN_OUTPUT);
    1c7c:	81 e0       	ldi	r24, 0x01	; 1
    1c7e:	61 e0       	ldi	r22, 0x01	; 1
    1c80:	41 e0       	ldi	r20, 0x01	; 1
    1c82:	0e 94 c8 0a 	call	0x1590	; 0x1590 <GPIO_setupPinDirection>

	/* Initialize motor @ stop state : assign 00 to both pins */
	GPIO_writePin(MOTOR_IN1_PORT, MOTOR_IN1_PIN, LOGIC_LOW);
    1c86:	81 e0       	ldi	r24, 0x01	; 1
    1c88:	60 e0       	ldi	r22, 0x00	; 0
    1c8a:	40 e0       	ldi	r20, 0x00	; 0
    1c8c:	0e 94 b3 0b 	call	0x1766	; 0x1766 <GPIO_writePin>
	GPIO_writePin(MOTOR_IN2_PORT, MOTOR_IN2_PIN, LOGIC_LOW);
    1c90:	81 e0       	ldi	r24, 0x01	; 1
    1c92:	61 e0       	ldi	r22, 0x01	; 1
    1c94:	40 e0       	ldi	r20, 0x00	; 0
    1c96:	0e 94 b3 0b 	call	0x1766	; 0x1766 <GPIO_writePin>
}
    1c9a:	28 96       	adiw	r28, 0x08	; 8
    1c9c:	0f b6       	in	r0, 0x3f	; 63
    1c9e:	f8 94       	cli
    1ca0:	de bf       	out	0x3e, r29	; 62
    1ca2:	0f be       	out	0x3f, r0	; 63
    1ca4:	cd bf       	out	0x3d, r28	; 61
    1ca6:	cf 91       	pop	r28
    1ca8:	df 91       	pop	r29
    1caa:	08 95       	ret

00001cac <DcMotor_Rotate>:

void DcMotor_Rotate(DcMotor_State state, uint8 speed){
    1cac:	df 93       	push	r29
    1cae:	cf 93       	push	r28
    1cb0:	00 d0       	rcall	.+0      	; 0x1cb2 <DcMotor_Rotate+0x6>
    1cb2:	cd b7       	in	r28, 0x3d	; 61
    1cb4:	de b7       	in	r29, 0x3e	; 62
    1cb6:	89 83       	std	Y+1, r24	; 0x01
    1cb8:	6a 83       	std	Y+2, r22	; 0x02
	/* Changing speed of the motor
	 * -- Change the duty cycle of the PWM signal from the timer
	 * -- The PWM signal is output to the enable pin of the driver
	 */
	PWM_Timer0_Start(speed);
    1cba:	8a 81       	ldd	r24, Y+2	; 0x02
    1cbc:	0e 94 23 0f 	call	0x1e46	; 0x1e46 <PWM_Timer0_Start>

	if (state == OFF){
    1cc0:	89 81       	ldd	r24, Y+1	; 0x01
    1cc2:	88 23       	and	r24, r24
    1cc4:	59 f4       	brne	.+22     	; 0x1cdc <DcMotor_Rotate+0x30>
		GPIO_writePin(MOTOR_IN1_PORT, MOTOR_IN1_PIN, LOGIC_LOW);
    1cc6:	81 e0       	ldi	r24, 0x01	; 1
    1cc8:	60 e0       	ldi	r22, 0x00	; 0
    1cca:	40 e0       	ldi	r20, 0x00	; 0
    1ccc:	0e 94 b3 0b 	call	0x1766	; 0x1766 <GPIO_writePin>
		GPIO_writePin(MOTOR_IN2_PORT, MOTOR_IN2_PIN, LOGIC_LOW);
    1cd0:	81 e0       	ldi	r24, 0x01	; 1
    1cd2:	61 e0       	ldi	r22, 0x01	; 1
    1cd4:	40 e0       	ldi	r20, 0x00	; 0
    1cd6:	0e 94 b3 0b 	call	0x1766	; 0x1766 <GPIO_writePin>
    1cda:	1b c0       	rjmp	.+54     	; 0x1d12 <DcMotor_Rotate+0x66>
	}
	else if (state == ANTICLOCKWISE){
    1cdc:	89 81       	ldd	r24, Y+1	; 0x01
    1cde:	81 30       	cpi	r24, 0x01	; 1
    1ce0:	59 f4       	brne	.+22     	; 0x1cf8 <DcMotor_Rotate+0x4c>
		GPIO_writePin(MOTOR_IN1_PORT, MOTOR_IN1_PIN, LOGIC_LOW);
    1ce2:	81 e0       	ldi	r24, 0x01	; 1
    1ce4:	60 e0       	ldi	r22, 0x00	; 0
    1ce6:	40 e0       	ldi	r20, 0x00	; 0
    1ce8:	0e 94 b3 0b 	call	0x1766	; 0x1766 <GPIO_writePin>
		GPIO_writePin(MOTOR_IN2_PORT, MOTOR_IN2_PIN, LOGIC_HIGH);
    1cec:	81 e0       	ldi	r24, 0x01	; 1
    1cee:	61 e0       	ldi	r22, 0x01	; 1
    1cf0:	41 e0       	ldi	r20, 0x01	; 1
    1cf2:	0e 94 b3 0b 	call	0x1766	; 0x1766 <GPIO_writePin>
    1cf6:	0d c0       	rjmp	.+26     	; 0x1d12 <DcMotor_Rotate+0x66>
	}
	else if (state == CLOCKWISE){
    1cf8:	89 81       	ldd	r24, Y+1	; 0x01
    1cfa:	82 30       	cpi	r24, 0x02	; 2
    1cfc:	51 f4       	brne	.+20     	; 0x1d12 <DcMotor_Rotate+0x66>
		GPIO_writePin(MOTOR_IN1_PORT, MOTOR_IN1_PIN, LOGIC_HIGH);
    1cfe:	81 e0       	ldi	r24, 0x01	; 1
    1d00:	60 e0       	ldi	r22, 0x00	; 0
    1d02:	41 e0       	ldi	r20, 0x01	; 1
    1d04:	0e 94 b3 0b 	call	0x1766	; 0x1766 <GPIO_writePin>
		GPIO_writePin(MOTOR_IN2_PORT, MOTOR_IN2_PIN, LOGIC_LOW);
    1d08:	81 e0       	ldi	r24, 0x01	; 1
    1d0a:	61 e0       	ldi	r22, 0x01	; 1
    1d0c:	40 e0       	ldi	r20, 0x00	; 0
    1d0e:	0e 94 b3 0b 	call	0x1766	; 0x1766 <GPIO_writePin>
	}
}
    1d12:	0f 90       	pop	r0
    1d14:	0f 90       	pop	r0
    1d16:	cf 91       	pop	r28
    1d18:	df 91       	pop	r29
    1d1a:	08 95       	ret

00001d1c <compare_strings>:
 * 1- Initialize a boolean variable by assuming the strings are identical
 * 2- iterate through the 2 strings simultaneously
 * 3- if any character does not match ==> Break out of the loop
 * 4- return the value of the boolean variable
 */
uint8 compare_strings(uint8 str1[], uint8 str2[]){
    1d1c:	df 93       	push	r29
    1d1e:	cf 93       	push	r28
    1d20:	00 d0       	rcall	.+0      	; 0x1d22 <compare_strings+0x6>
    1d22:	00 d0       	rcall	.+0      	; 0x1d24 <compare_strings+0x8>
    1d24:	00 d0       	rcall	.+0      	; 0x1d26 <compare_strings+0xa>
    1d26:	cd b7       	in	r28, 0x3d	; 61
    1d28:	de b7       	in	r29, 0x3e	; 62
    1d2a:	9c 83       	std	Y+4, r25	; 0x04
    1d2c:	8b 83       	std	Y+3, r24	; 0x03
    1d2e:	7e 83       	std	Y+6, r23	; 0x06
    1d30:	6d 83       	std	Y+5, r22	; 0x05
	Boolean result = IDENTICAL;
    1d32:	81 e0       	ldi	r24, 0x01	; 1
    1d34:	8a 83       	std	Y+2, r24	; 0x02
	for(uint8 i=0; i<PASS_SIZE; i++){
    1d36:	19 82       	std	Y+1, r1	; 0x01
    1d38:	19 c0       	rjmp	.+50     	; 0x1d6c <compare_strings+0x50>
		if(str1[i] != str2[i]){
    1d3a:	89 81       	ldd	r24, Y+1	; 0x01
    1d3c:	28 2f       	mov	r18, r24
    1d3e:	30 e0       	ldi	r19, 0x00	; 0
    1d40:	8b 81       	ldd	r24, Y+3	; 0x03
    1d42:	9c 81       	ldd	r25, Y+4	; 0x04
    1d44:	fc 01       	movw	r30, r24
    1d46:	e2 0f       	add	r30, r18
    1d48:	f3 1f       	adc	r31, r19
    1d4a:	40 81       	ld	r20, Z
    1d4c:	89 81       	ldd	r24, Y+1	; 0x01
    1d4e:	28 2f       	mov	r18, r24
    1d50:	30 e0       	ldi	r19, 0x00	; 0
    1d52:	8d 81       	ldd	r24, Y+5	; 0x05
    1d54:	9e 81       	ldd	r25, Y+6	; 0x06
    1d56:	fc 01       	movw	r30, r24
    1d58:	e2 0f       	add	r30, r18
    1d5a:	f3 1f       	adc	r31, r19
    1d5c:	80 81       	ld	r24, Z
    1d5e:	48 17       	cp	r20, r24
    1d60:	11 f0       	breq	.+4      	; 0x1d66 <compare_strings+0x4a>
			result = NOT_IDENTICAL;
    1d62:	1a 82       	std	Y+2, r1	; 0x02
    1d64:	06 c0       	rjmp	.+12     	; 0x1d72 <compare_strings+0x56>
 * 3- if any character does not match ==> Break out of the loop
 * 4- return the value of the boolean variable
 */
uint8 compare_strings(uint8 str1[], uint8 str2[]){
	Boolean result = IDENTICAL;
	for(uint8 i=0; i<PASS_SIZE; i++){
    1d66:	89 81       	ldd	r24, Y+1	; 0x01
    1d68:	8f 5f       	subi	r24, 0xFF	; 255
    1d6a:	89 83       	std	Y+1, r24	; 0x01
    1d6c:	89 81       	ldd	r24, Y+1	; 0x01
    1d6e:	85 30       	cpi	r24, 0x05	; 5
    1d70:	20 f3       	brcs	.-56     	; 0x1d3a <compare_strings+0x1e>
		if(str1[i] != str2[i]){
			result = NOT_IDENTICAL;
			break;
		}
	}
	return result;
    1d72:	8a 81       	ldd	r24, Y+2	; 0x02
}
    1d74:	26 96       	adiw	r28, 0x06	; 6
    1d76:	0f b6       	in	r0, 0x3f	; 63
    1d78:	f8 94       	cli
    1d7a:	de bf       	out	0x3e, r29	; 62
    1d7c:	0f be       	out	0x3f, r0	; 63
    1d7e:	cd bf       	out	0x3d, r28	; 61
    1d80:	cf 91       	pop	r28
    1d82:	df 91       	pop	r29
    1d84:	08 95       	ret

00001d86 <Timer_init>:
#include <avr/io.h>	   /* Holds AVR registers defintion */

/* Function to initialize Timer0 with configurations and its
 * functionality
 */
void Timer_init(const Timer_Config* configs){
    1d86:	df 93       	push	r29
    1d88:	cf 93       	push	r28
    1d8a:	00 d0       	rcall	.+0      	; 0x1d8c <Timer_init+0x6>
    1d8c:	cd b7       	in	r28, 0x3d	; 61
    1d8e:	de b7       	in	r29, 0x3e	; 62
    1d90:	9a 83       	std	Y+2, r25	; 0x02
    1d92:	89 83       	std	Y+1, r24	; 0x01
	 * FOC0		: Force output compare = 0 (PWM Mode)
	 * WGM01:0	: Wave-Generation Mode = (configs->mode)
	 * COM01:0	: Compare Output Mode = 10 : Non-inverting mode (Always!)
	 * CS02:0 	: Clock Select = (configs->prescaler)
	 */
	TCCR0 =   (configs->mode << WGM00)
    1d94:	a3 e5       	ldi	r26, 0x53	; 83
    1d96:	b0 e0       	ldi	r27, 0x00	; 0
    1d98:	e9 81       	ldd	r30, Y+1	; 0x01
    1d9a:	fa 81       	ldd	r31, Y+2	; 0x02
    1d9c:	81 81       	ldd	r24, Z+1	; 0x01
    1d9e:	88 2f       	mov	r24, r24
    1da0:	90 e0       	ldi	r25, 0x00	; 0
    1da2:	00 24       	eor	r0, r0
    1da4:	96 95       	lsr	r25
    1da6:	87 95       	ror	r24
    1da8:	07 94       	ror	r0
    1daa:	96 95       	lsr	r25
    1dac:	87 95       	ror	r24
    1dae:	07 94       	ror	r0
    1db0:	98 2f       	mov	r25, r24
    1db2:	80 2d       	mov	r24, r0
    1db4:	28 2f       	mov	r18, r24
    1db6:	e9 81       	ldd	r30, Y+1	; 0x01
    1db8:	fa 81       	ldd	r31, Y+2	; 0x02
    1dba:	82 81       	ldd	r24, Z+2	; 0x02
    1dbc:	88 2f       	mov	r24, r24
    1dbe:	90 e0       	ldi	r25, 0x00	; 0
    1dc0:	82 95       	swap	r24
    1dc2:	92 95       	swap	r25
    1dc4:	90 7f       	andi	r25, 0xF0	; 240
    1dc6:	98 27       	eor	r25, r24
    1dc8:	80 7f       	andi	r24, 0xF0	; 240
    1dca:	98 27       	eor	r25, r24
    1dcc:	92 2f       	mov	r25, r18
    1dce:	98 2b       	or	r25, r24
    1dd0:	e9 81       	ldd	r30, Y+1	; 0x01
    1dd2:	fa 81       	ldd	r31, Y+2	; 0x02
    1dd4:	80 81       	ld	r24, Z
    1dd6:	89 2b       	or	r24, r25
    1dd8:	8c 93       	st	X, r24

	/* Configuring Force Output Compare Bit
	 * -- CLEAR_BIT @ any PWM Mode
	 * -- SET_BIT @ any non-PWM Mode
	 */
	if (((configs->mode)!=FAST_PWM) && ((configs->mode)!=PWM_PHASE_CORRECT))
    1dda:	e9 81       	ldd	r30, Y+1	; 0x01
    1ddc:	fa 81       	ldd	r31, Y+2	; 0x02
    1dde:	81 81       	ldd	r24, Z+1	; 0x01
    1de0:	83 30       	cpi	r24, 0x03	; 3
    1de2:	69 f0       	breq	.+26     	; 0x1dfe <Timer_init+0x78>
    1de4:	e9 81       	ldd	r30, Y+1	; 0x01
    1de6:	fa 81       	ldd	r31, Y+2	; 0x02
    1de8:	81 81       	ldd	r24, Z+1	; 0x01
    1dea:	81 30       	cpi	r24, 0x01	; 1
    1dec:	41 f0       	breq	.+16     	; 0x1dfe <Timer_init+0x78>
		SET_BIT(TCCR0, FOC0);
    1dee:	a3 e5       	ldi	r26, 0x53	; 83
    1df0:	b0 e0       	ldi	r27, 0x00	; 0
    1df2:	e3 e5       	ldi	r30, 0x53	; 83
    1df4:	f0 e0       	ldi	r31, 0x00	; 0
    1df6:	80 81       	ld	r24, Z
    1df8:	80 68       	ori	r24, 0x80	; 128
    1dfa:	8c 93       	st	X, r24
    1dfc:	05 c0       	rjmp	.+10     	; 0x1e08 <Timer_init+0x82>
	else {
		GPIO_setupPinDirection(OC0_PORT_ID, OC0_PIN_ID, PIN_OUTPUT);
    1dfe:	81 e0       	ldi	r24, 0x01	; 1
    1e00:	63 e0       	ldi	r22, 0x03	; 3
    1e02:	41 e0       	ldi	r20, 0x01	; 1
    1e04:	0e 94 c8 0a 	call	0x1590	; 0x1590 <GPIO_setupPinDirection>

	/* Enabling Interrupts per mode
	 * -- Normal Mode (Overflow Mode) : SET (Timer Overflow Interrupt Enable)
	 * -- Compare Modes : SET (Output Compare Interrupt Enable)
	 */
	if ((configs->mode)!=NORMAL_MODE)
    1e08:	e9 81       	ldd	r30, Y+1	; 0x01
    1e0a:	fa 81       	ldd	r31, Y+2	; 0x02
    1e0c:	81 81       	ldd	r24, Z+1	; 0x01
    1e0e:	88 23       	and	r24, r24
    1e10:	41 f0       	breq	.+16     	; 0x1e22 <Timer_init+0x9c>
		SET_BIT(TIMSK, OCIE0);
    1e12:	a9 e5       	ldi	r26, 0x59	; 89
    1e14:	b0 e0       	ldi	r27, 0x00	; 0
    1e16:	e9 e5       	ldi	r30, 0x59	; 89
    1e18:	f0 e0       	ldi	r31, 0x00	; 0
    1e1a:	80 81       	ld	r24, Z
    1e1c:	82 60       	ori	r24, 0x02	; 2
    1e1e:	8c 93       	st	X, r24
    1e20:	07 c0       	rjmp	.+14     	; 0x1e30 <Timer_init+0xaa>
	else
		SET_BIT(TIMSK, TOIE0);
    1e22:	a9 e5       	ldi	r26, 0x59	; 89
    1e24:	b0 e0       	ldi	r27, 0x00	; 0
    1e26:	e9 e5       	ldi	r30, 0x59	; 89
    1e28:	f0 e0       	ldi	r31, 0x00	; 0
    1e2a:	80 81       	ld	r24, Z
    1e2c:	81 60       	ori	r24, 0x01	; 1
    1e2e:	8c 93       	st	X, r24

	/** Initializing Output Compare Register with 0 **/
	OCR0 = 0;
    1e30:	ec e5       	ldi	r30, 0x5C	; 92
    1e32:	f0 e0       	ldi	r31, 0x00	; 0
    1e34:	10 82       	st	Z, r1
	TCNT0 = 0;
    1e36:	e2 e5       	ldi	r30, 0x52	; 82
    1e38:	f0 e0       	ldi	r31, 0x00	; 0
    1e3a:	10 82       	st	Z, r1
}
    1e3c:	0f 90       	pop	r0
    1e3e:	0f 90       	pop	r0
    1e40:	cf 91       	pop	r28
    1e42:	df 91       	pop	r29
    1e44:	08 95       	ret

00001e46 <PWM_Timer0_Start>:

/* Function to change the duty_cycle analog signal of PWM Mode
 * Input should be a duty_cycle value 0:100, otherwise, the function dysfunctions
 */
void PWM_Timer0_Start(uint8 duty_cycle){
    1e46:	df 93       	push	r29
    1e48:	cf 93       	push	r28
    1e4a:	00 d0       	rcall	.+0      	; 0x1e4c <PWM_Timer0_Start+0x6>
    1e4c:	cd b7       	in	r28, 0x3d	; 61
    1e4e:	de b7       	in	r29, 0x3e	; 62
    1e50:	8a 83       	std	Y+2, r24	; 0x02
	if (duty_cycle<0 || duty_cycle>100){
    1e52:	8a 81       	ldd	r24, Y+2	; 0x02
    1e54:	85 36       	cpi	r24, 0x65	; 101
    1e56:	e8 f4       	brcc	.+58     	; 0x1e92 <PWM_Timer0_Start+0x4c>
		/** DO NOTHIING -- Invalid range! **/
	} else{
		uint8 compare_value = 0;
    1e58:	19 82       	std	Y+1, r1	; 0x01
		/* Duty Cycle = (Compare Value) / (Max output compare value) */
		compare_value = (uint8)((uint16)(duty_cycle*MAX_OUTPUT_COMPARE)/100);
    1e5a:	8a 81       	ldd	r24, Y+2	; 0x02
    1e5c:	48 2f       	mov	r20, r24
    1e5e:	50 e0       	ldi	r21, 0x00	; 0
    1e60:	ca 01       	movw	r24, r20
    1e62:	9c 01       	movw	r18, r24
    1e64:	22 0f       	add	r18, r18
    1e66:	33 1f       	adc	r19, r19
    1e68:	c9 01       	movw	r24, r18
    1e6a:	96 95       	lsr	r25
    1e6c:	98 2f       	mov	r25, r24
    1e6e:	88 27       	eor	r24, r24
    1e70:	97 95       	ror	r25
    1e72:	87 95       	ror	r24
    1e74:	82 1b       	sub	r24, r18
    1e76:	93 0b       	sbc	r25, r19
    1e78:	84 0f       	add	r24, r20
    1e7a:	95 1f       	adc	r25, r21
    1e7c:	24 e6       	ldi	r18, 0x64	; 100
    1e7e:	30 e0       	ldi	r19, 0x00	; 0
    1e80:	b9 01       	movw	r22, r18
    1e82:	0e 94 de 10 	call	0x21bc	; 0x21bc <__udivmodhi4>
    1e86:	cb 01       	movw	r24, r22
    1e88:	89 83       	std	Y+1, r24	; 0x01
		OCR0 = compare_value;
    1e8a:	ec e5       	ldi	r30, 0x5C	; 92
    1e8c:	f0 e0       	ldi	r31, 0x00	; 0
    1e8e:	89 81       	ldd	r24, Y+1	; 0x01
    1e90:	80 83       	st	Z, r24
	}
}
    1e92:	0f 90       	pop	r0
    1e94:	0f 90       	pop	r0
    1e96:	cf 91       	pop	r28
    1e98:	df 91       	pop	r29
    1e9a:	08 95       	ret

00001e9c <TWI_init>:
#include "twi.h"
#include "common_macros.h"
#include <avr/io.h>

void TWI_init(const TWI_ConfigType * Config_Ptr)
{
    1e9c:	df 93       	push	r29
    1e9e:	cf 93       	push	r28
    1ea0:	00 d0       	rcall	.+0      	; 0x1ea2 <TWI_init+0x6>
    1ea2:	cd b7       	in	r28, 0x3d	; 61
    1ea4:	de b7       	in	r29, 0x3e	; 62
    1ea6:	9a 83       	std	Y+2, r25	; 0x02
    1ea8:	89 83       	std	Y+1, r24	; 0x01
    /* Bit Rate: 400.000 kbps using zero pre-scaler TWPS=00 and F_CPU=8Mhz */
    TWBR = Config_Ptr->bit_rate;
    1eaa:	a0 e2       	ldi	r26, 0x20	; 32
    1eac:	b0 e0       	ldi	r27, 0x00	; 0
    1eae:	e9 81       	ldd	r30, Y+1	; 0x01
    1eb0:	fa 81       	ldd	r31, Y+2	; 0x02
    1eb2:	81 81       	ldd	r24, Z+1	; 0x01
    1eb4:	8c 93       	st	X, r24

    /* Setting the prescaler value of the TWI module */
	TWSR = ((Config_Ptr->prescaler) << TWPS0);
    1eb6:	a1 e2       	ldi	r26, 0x21	; 33
    1eb8:	b0 e0       	ldi	r27, 0x00	; 0
    1eba:	e9 81       	ldd	r30, Y+1	; 0x01
    1ebc:	fa 81       	ldd	r31, Y+2	; 0x02
    1ebe:	82 81       	ldd	r24, Z+2	; 0x02
    1ec0:	8c 93       	st	X, r24

	
    /* Two Wire Bus address my address if any master device want to call me: 0x1 (used in case this MC is a slave device)
       General Call Recognition: Off */
    TWAR = Config_Ptr->address; // my address = 0x01 :)
    1ec2:	a2 e2       	ldi	r26, 0x22	; 34
    1ec4:	b0 e0       	ldi	r27, 0x00	; 0
    1ec6:	e9 81       	ldd	r30, Y+1	; 0x01
    1ec8:	fa 81       	ldd	r31, Y+2	; 0x02
    1eca:	80 81       	ld	r24, Z
    1ecc:	8c 93       	st	X, r24
	
    TWCR = (1<<TWEN); /* enable TWI */
    1ece:	e6 e5       	ldi	r30, 0x56	; 86
    1ed0:	f0 e0       	ldi	r31, 0x00	; 0
    1ed2:	84 e0       	ldi	r24, 0x04	; 4
    1ed4:	80 83       	st	Z, r24
}
    1ed6:	0f 90       	pop	r0
    1ed8:	0f 90       	pop	r0
    1eda:	cf 91       	pop	r28
    1edc:	df 91       	pop	r29
    1ede:	08 95       	ret

00001ee0 <TWI_start>:

void TWI_start(void)
{
    1ee0:	df 93       	push	r29
    1ee2:	cf 93       	push	r28
    1ee4:	cd b7       	in	r28, 0x3d	; 61
    1ee6:	de b7       	in	r29, 0x3e	; 62
    /* 
	 * Clear the TWINT flag before sending the start bit TWINT=1
	 * send the start bit by TWSTA=1
	 * Enable TWI Module TWEN=1 
	 */
    TWCR = (1 << TWINT) | (1 << TWSTA) | (1 << TWEN);
    1ee8:	e6 e5       	ldi	r30, 0x56	; 86
    1eea:	f0 e0       	ldi	r31, 0x00	; 0
    1eec:	84 ea       	ldi	r24, 0xA4	; 164
    1eee:	80 83       	st	Z, r24
    
    /* Wait for TWINT flag set in TWCR Register (start bit is send successfully) */
    while(BIT_IS_CLEAR(TWCR,TWINT));
    1ef0:	e6 e5       	ldi	r30, 0x56	; 86
    1ef2:	f0 e0       	ldi	r31, 0x00	; 0
    1ef4:	80 81       	ld	r24, Z
    1ef6:	88 23       	and	r24, r24
    1ef8:	dc f7       	brge	.-10     	; 0x1ef0 <TWI_start+0x10>
}
    1efa:	cf 91       	pop	r28
    1efc:	df 91       	pop	r29
    1efe:	08 95       	ret

00001f00 <TWI_stop>:

void TWI_stop(void)
{
    1f00:	df 93       	push	r29
    1f02:	cf 93       	push	r28
    1f04:	cd b7       	in	r28, 0x3d	; 61
    1f06:	de b7       	in	r29, 0x3e	; 62
    /* 
	 * Clear the TWINT flag before sending the stop bit TWINT=1
	 * send the stop bit by TWSTO=1
	 * Enable TWI Module TWEN=1 
	 */
    TWCR = (1 << TWINT) | (1 << TWSTO) | (1 << TWEN);
    1f08:	e6 e5       	ldi	r30, 0x56	; 86
    1f0a:	f0 e0       	ldi	r31, 0x00	; 0
    1f0c:	84 e9       	ldi	r24, 0x94	; 148
    1f0e:	80 83       	st	Z, r24
}
    1f10:	cf 91       	pop	r28
    1f12:	df 91       	pop	r29
    1f14:	08 95       	ret

00001f16 <TWI_writeByte>:

void TWI_writeByte(uint8 data)
{
    1f16:	df 93       	push	r29
    1f18:	cf 93       	push	r28
    1f1a:	0f 92       	push	r0
    1f1c:	cd b7       	in	r28, 0x3d	; 61
    1f1e:	de b7       	in	r29, 0x3e	; 62
    1f20:	89 83       	std	Y+1, r24	; 0x01
    /* Put data On TWI data Register */
    TWDR = data;
    1f22:	e3 e2       	ldi	r30, 0x23	; 35
    1f24:	f0 e0       	ldi	r31, 0x00	; 0
    1f26:	89 81       	ldd	r24, Y+1	; 0x01
    1f28:	80 83       	st	Z, r24
    /* 
	 * Clear the TWINT flag before sending the data TWINT=1
	 * Enable TWI Module TWEN=1 
	 */ 
    TWCR = (1 << TWINT) | (1 << TWEN);
    1f2a:	e6 e5       	ldi	r30, 0x56	; 86
    1f2c:	f0 e0       	ldi	r31, 0x00	; 0
    1f2e:	84 e8       	ldi	r24, 0x84	; 132
    1f30:	80 83       	st	Z, r24
    /* Wait for TWINT flag set in TWCR Register(data is send successfully) */
    while(BIT_IS_CLEAR(TWCR,TWINT));
    1f32:	e6 e5       	ldi	r30, 0x56	; 86
    1f34:	f0 e0       	ldi	r31, 0x00	; 0
    1f36:	80 81       	ld	r24, Z
    1f38:	88 23       	and	r24, r24
    1f3a:	dc f7       	brge	.-10     	; 0x1f32 <TWI_writeByte+0x1c>
}
    1f3c:	0f 90       	pop	r0
    1f3e:	cf 91       	pop	r28
    1f40:	df 91       	pop	r29
    1f42:	08 95       	ret

00001f44 <TWI_readByteWithACK>:

uint8 TWI_readByteWithACK(void)
{
    1f44:	df 93       	push	r29
    1f46:	cf 93       	push	r28
    1f48:	cd b7       	in	r28, 0x3d	; 61
    1f4a:	de b7       	in	r29, 0x3e	; 62
	/* 
	 * Clear the TWINT flag before reading the data TWINT=1
	 * Enable sending ACK after reading or receiving data TWEA=1
	 * Enable TWI Module TWEN=1 
	 */ 
    TWCR = (1 << TWINT) | (1 << TWEN) | (1 << TWEA);
    1f4c:	e6 e5       	ldi	r30, 0x56	; 86
    1f4e:	f0 e0       	ldi	r31, 0x00	; 0
    1f50:	84 ec       	ldi	r24, 0xC4	; 196
    1f52:	80 83       	st	Z, r24
    /* Wait for TWINT flag set in TWCR Register (data received successfully) */
    while(BIT_IS_CLEAR(TWCR,TWINT));
    1f54:	e6 e5       	ldi	r30, 0x56	; 86
    1f56:	f0 e0       	ldi	r31, 0x00	; 0
    1f58:	80 81       	ld	r24, Z
    1f5a:	88 23       	and	r24, r24
    1f5c:	dc f7       	brge	.-10     	; 0x1f54 <TWI_readByteWithACK+0x10>
    /* Read Data */
    return TWDR;
    1f5e:	e3 e2       	ldi	r30, 0x23	; 35
    1f60:	f0 e0       	ldi	r31, 0x00	; 0
    1f62:	80 81       	ld	r24, Z
}
    1f64:	cf 91       	pop	r28
    1f66:	df 91       	pop	r29
    1f68:	08 95       	ret

00001f6a <TWI_readByteWithNACK>:

uint8 TWI_readByteWithNACK(void)
{
    1f6a:	df 93       	push	r29
    1f6c:	cf 93       	push	r28
    1f6e:	cd b7       	in	r28, 0x3d	; 61
    1f70:	de b7       	in	r29, 0x3e	; 62
	/* 
	 * Clear the TWINT flag before reading the data TWINT=1
	 * Enable TWI Module TWEN=1 
	 */
    TWCR = (1 << TWINT) | (1 << TWEN);
    1f72:	e6 e5       	ldi	r30, 0x56	; 86
    1f74:	f0 e0       	ldi	r31, 0x00	; 0
    1f76:	84 e8       	ldi	r24, 0x84	; 132
    1f78:	80 83       	st	Z, r24
    /* Wait for TWINT flag set in TWCR Register (data received successfully) */
    while(BIT_IS_CLEAR(TWCR,TWINT));
    1f7a:	e6 e5       	ldi	r30, 0x56	; 86
    1f7c:	f0 e0       	ldi	r31, 0x00	; 0
    1f7e:	80 81       	ld	r24, Z
    1f80:	88 23       	and	r24, r24
    1f82:	dc f7       	brge	.-10     	; 0x1f7a <TWI_readByteWithNACK+0x10>
    /* Read Data */
    return TWDR;
    1f84:	e3 e2       	ldi	r30, 0x23	; 35
    1f86:	f0 e0       	ldi	r31, 0x00	; 0
    1f88:	80 81       	ld	r24, Z
}
    1f8a:	cf 91       	pop	r28
    1f8c:	df 91       	pop	r29
    1f8e:	08 95       	ret

00001f90 <TWI_getStatus>:

uint8 TWI_getStatus(void)
{
    1f90:	df 93       	push	r29
    1f92:	cf 93       	push	r28
    1f94:	0f 92       	push	r0
    1f96:	cd b7       	in	r28, 0x3d	; 61
    1f98:	de b7       	in	r29, 0x3e	; 62
    uint8 status;
    /* masking to eliminate first 3 bits and get the last 5 bits (status bits) */
    status = TWSR & 0xF8;
    1f9a:	e1 e2       	ldi	r30, 0x21	; 33
    1f9c:	f0 e0       	ldi	r31, 0x00	; 0
    1f9e:	80 81       	ld	r24, Z
    1fa0:	88 7f       	andi	r24, 0xF8	; 248
    1fa2:	89 83       	std	Y+1, r24	; 0x01
    return status;
    1fa4:	89 81       	ldd	r24, Y+1	; 0x01
}
    1fa6:	0f 90       	pop	r0
    1fa8:	cf 91       	pop	r28
    1faa:	df 91       	pop	r29
    1fac:	08 95       	ret

00001fae <UART_init>:
 * 1. Setup the Frame format like number of data bits, parity bit type and number of stop bits.
 * 2. Enable the UART.
 * 3. Setup the UART baud rate.
 */
void UART_init(const UART_ConfigType *config)
{
    1fae:	df 93       	push	r29
    1fb0:	cf 93       	push	r28
    1fb2:	00 d0       	rcall	.+0      	; 0x1fb4 <UART_init+0x6>
    1fb4:	00 d0       	rcall	.+0      	; 0x1fb6 <UART_init+0x8>
    1fb6:	cd b7       	in	r28, 0x3d	; 61
    1fb8:	de b7       	in	r29, 0x3e	; 62
    1fba:	9c 83       	std	Y+4, r25	; 0x04
    1fbc:	8b 83       	std	Y+3, r24	; 0x03
	uint16 ubrr_value = 0;
    1fbe:	1a 82       	std	Y+2, r1	; 0x02
    1fc0:	19 82       	std	Y+1, r1	; 0x01

	/* U2X = 1 for double transmission speed */
	UCSRA = (1<<U2X);
    1fc2:	eb e2       	ldi	r30, 0x2B	; 43
    1fc4:	f0 e0       	ldi	r31, 0x00	; 0
    1fc6:	82 e0       	ldi	r24, 0x02	; 2
    1fc8:	80 83       	st	Z, r24
	 * RXEN  = 1 Receiver Enable
	 * RXEN  = 1 Transmitter Enable
	 * UCSZ2 = 0 For 8-bit data mode
	 * RXB8 & TXB8 not used for 8-bit data mode
	 ***********************************************************************/ 
	UCSRB = (1<<RXEN) | (1<<TXEN);
    1fca:	ea e2       	ldi	r30, 0x2A	; 42
    1fcc:	f0 e0       	ldi	r31, 0x00	; 0
    1fce:	88 e1       	ldi	r24, 0x18	; 24
    1fd0:	80 83       	st	Z, r24

	if ((config->s_mode) == BIT_9)
    1fd2:	eb 81       	ldd	r30, Y+3	; 0x03
    1fd4:	fc 81       	ldd	r31, Y+4	; 0x04
    1fd6:	86 81       	ldd	r24, Z+6	; 0x06
    1fd8:	83 30       	cpi	r24, 0x03	; 3
    1fda:	39 f4       	brne	.+14     	; 0x1fea <UART_init+0x3c>
		UCSRB |= (1<<UCSZ2);
    1fdc:	aa e2       	ldi	r26, 0x2A	; 42
    1fde:	b0 e0       	ldi	r27, 0x00	; 0
    1fe0:	ea e2       	ldi	r30, 0x2A	; 42
    1fe2:	f0 e0       	ldi	r31, 0x00	; 0
    1fe4:	80 81       	ld	r24, Z
    1fe6:	84 60       	ori	r24, 0x04	; 4
    1fe8:	8c 93       	st	X, r24
	 * USBS    = config->s_stop Assign the configuration stop bits
	 * UCSZ1:0 = config->s_mode Assign the configuration for Character size mode
	 * UCPOL   = 0 Used with the Synchronous operation only
	 ***********************************************************************/ 	

	UCSRC = ((config->s_parity) << UPM0)		/* Adjusting the Parity bits */
    1fea:	a0 e4       	ldi	r26, 0x40	; 64
    1fec:	b0 e0       	ldi	r27, 0x00	; 0
    1fee:	eb 81       	ldd	r30, Y+3	; 0x03
    1ff0:	fc 81       	ldd	r31, Y+4	; 0x04
    1ff2:	84 81       	ldd	r24, Z+4	; 0x04
    1ff4:	88 2f       	mov	r24, r24
    1ff6:	90 e0       	ldi	r25, 0x00	; 0
    1ff8:	82 95       	swap	r24
    1ffa:	92 95       	swap	r25
    1ffc:	90 7f       	andi	r25, 0xF0	; 240
    1ffe:	98 27       	eor	r25, r24
    2000:	80 7f       	andi	r24, 0xF0	; 240
    2002:	98 27       	eor	r25, r24
    2004:	28 2f       	mov	r18, r24
    2006:	eb 81       	ldd	r30, Y+3	; 0x03
    2008:	fc 81       	ldd	r31, Y+4	; 0x04
    200a:	85 81       	ldd	r24, Z+5	; 0x05
    200c:	88 2f       	mov	r24, r24
    200e:	90 e0       	ldi	r25, 0x00	; 0
    2010:	88 0f       	add	r24, r24
    2012:	99 1f       	adc	r25, r25
    2014:	88 0f       	add	r24, r24
    2016:	99 1f       	adc	r25, r25
    2018:	88 0f       	add	r24, r24
    201a:	99 1f       	adc	r25, r25
    201c:	28 2b       	or	r18, r24
    201e:	eb 81       	ldd	r30, Y+3	; 0x03
    2020:	fc 81       	ldd	r31, Y+4	; 0x04
    2022:	86 81       	ldd	r24, Z+6	; 0x06
    2024:	88 2f       	mov	r24, r24
    2026:	90 e0       	ldi	r25, 0x00	; 0
    2028:	88 0f       	add	r24, r24
    202a:	99 1f       	adc	r25, r25
    202c:	82 2b       	or	r24, r18
    202e:	80 68       	ori	r24, 0x80	; 128
    2030:	8c 93       	st	X, r24
			| (1<<URSEL);						/* Adjusting the URSEL bit */

	
	/************************** Choosing Baud Rate **************************/
	/* Calculate the UBRR register value */
	ubrr_value = (uint16)(((F_CPU / (config->s_baud_rate * 8UL))) - 1);
    2032:	eb 81       	ldd	r30, Y+3	; 0x03
    2034:	fc 81       	ldd	r31, Y+4	; 0x04
    2036:	80 81       	ld	r24, Z
    2038:	91 81       	ldd	r25, Z+1	; 0x01
    203a:	a2 81       	ldd	r26, Z+2	; 0x02
    203c:	b3 81       	ldd	r27, Z+3	; 0x03
    203e:	88 0f       	add	r24, r24
    2040:	99 1f       	adc	r25, r25
    2042:	aa 1f       	adc	r26, r26
    2044:	bb 1f       	adc	r27, r27
    2046:	88 0f       	add	r24, r24
    2048:	99 1f       	adc	r25, r25
    204a:	aa 1f       	adc	r26, r26
    204c:	bb 1f       	adc	r27, r27
    204e:	88 0f       	add	r24, r24
    2050:	99 1f       	adc	r25, r25
    2052:	aa 1f       	adc	r26, r26
    2054:	bb 1f       	adc	r27, r27
    2056:	9c 01       	movw	r18, r24
    2058:	ad 01       	movw	r20, r26
    205a:	80 e0       	ldi	r24, 0x00	; 0
    205c:	92 e1       	ldi	r25, 0x12	; 18
    205e:	aa e7       	ldi	r26, 0x7A	; 122
    2060:	b0 e0       	ldi	r27, 0x00	; 0
    2062:	bc 01       	movw	r22, r24
    2064:	cd 01       	movw	r24, r26
    2066:	0e 94 f2 10 	call	0x21e4	; 0x21e4 <__udivmodsi4>
    206a:	da 01       	movw	r26, r20
    206c:	c9 01       	movw	r24, r18
    206e:	01 97       	sbiw	r24, 0x01	; 1
    2070:	9a 83       	std	Y+2, r25	; 0x02
    2072:	89 83       	std	Y+1, r24	; 0x01

	/* First 8 bits from the BAUD_PRESCALE inside UBRRL and last 4 bits in UBRRH*/
	UBRRH = ubrr_value>>8;
    2074:	e0 e4       	ldi	r30, 0x40	; 64
    2076:	f0 e0       	ldi	r31, 0x00	; 0
    2078:	89 81       	ldd	r24, Y+1	; 0x01
    207a:	9a 81       	ldd	r25, Y+2	; 0x02
    207c:	89 2f       	mov	r24, r25
    207e:	99 27       	eor	r25, r25
    2080:	80 83       	st	Z, r24
	UBRRL = ubrr_value;
    2082:	e9 e2       	ldi	r30, 0x29	; 41
    2084:	f0 e0       	ldi	r31, 0x00	; 0
    2086:	89 81       	ldd	r24, Y+1	; 0x01
    2088:	80 83       	st	Z, r24
}
    208a:	0f 90       	pop	r0
    208c:	0f 90       	pop	r0
    208e:	0f 90       	pop	r0
    2090:	0f 90       	pop	r0
    2092:	cf 91       	pop	r28
    2094:	df 91       	pop	r29
    2096:	08 95       	ret

00002098 <UART_sendByte>:
/*
 * Description :
 * Functional responsible for send byte to another UART device.
 */
void UART_sendByte(const uint8 data)
{
    2098:	df 93       	push	r29
    209a:	cf 93       	push	r28
    209c:	0f 92       	push	r0
    209e:	cd b7       	in	r28, 0x3d	; 61
    20a0:	de b7       	in	r29, 0x3e	; 62
    20a2:	89 83       	std	Y+1, r24	; 0x01
	/*
	 * UDRE flag is set when the Tx buffer (UDR) is empty and ready for
	 * transmitting a new byte so wait until this flag is set to one
	 */
	while(BIT_IS_CLEAR(UCSRA,UDRE));
    20a4:	eb e2       	ldi	r30, 0x2B	; 43
    20a6:	f0 e0       	ldi	r31, 0x00	; 0
    20a8:	80 81       	ld	r24, Z
    20aa:	88 2f       	mov	r24, r24
    20ac:	90 e0       	ldi	r25, 0x00	; 0
    20ae:	80 72       	andi	r24, 0x20	; 32
    20b0:	90 70       	andi	r25, 0x00	; 0
    20b2:	00 97       	sbiw	r24, 0x00	; 0
    20b4:	b9 f3       	breq	.-18     	; 0x20a4 <UART_sendByte+0xc>

	/*
	 * Put the required data in the UDR register and it also clear the UDRE flag as
	 * the UDR register is not empty now
	 */
	UDR = data;
    20b6:	ec e2       	ldi	r30, 0x2C	; 44
    20b8:	f0 e0       	ldi	r31, 0x00	; 0
    20ba:	89 81       	ldd	r24, Y+1	; 0x01
    20bc:	80 83       	st	Z, r24
	/************************* Another Method *************************
	UDR = data;
	while(BIT_IS_CLEAR(UCSRA,TXC)){} // Wait until the transmission is complete TXC = 1
	SET_BIT(UCSRA,TXC); // Clear the TXC flag
	*******************************************************************/
}
    20be:	0f 90       	pop	r0
    20c0:	cf 91       	pop	r28
    20c2:	df 91       	pop	r29
    20c4:	08 95       	ret

000020c6 <UART_recieveByte>:
/*
 * Description :
 * Functional responsible for receive byte from another UART device.
 */
uint8 UART_recieveByte(void)
{
    20c6:	df 93       	push	r29
    20c8:	cf 93       	push	r28
    20ca:	cd b7       	in	r28, 0x3d	; 61
    20cc:	de b7       	in	r29, 0x3e	; 62
	/* RXC flag is set when the UART receive data so wait until this flag is set to one */
	while(BIT_IS_CLEAR(UCSRA,RXC)){}
    20ce:	eb e2       	ldi	r30, 0x2B	; 43
    20d0:	f0 e0       	ldi	r31, 0x00	; 0
    20d2:	80 81       	ld	r24, Z
    20d4:	88 23       	and	r24, r24
    20d6:	dc f7       	brge	.-10     	; 0x20ce <UART_recieveByte+0x8>

	/*
	 * Read the received data from the Rx buffer (UDR)
	 * The RXC flag will be cleared after read the data
	 */
    return UDR;		
    20d8:	ec e2       	ldi	r30, 0x2C	; 44
    20da:	f0 e0       	ldi	r31, 0x00	; 0
    20dc:	80 81       	ld	r24, Z
}
    20de:	cf 91       	pop	r28
    20e0:	df 91       	pop	r29
    20e2:	08 95       	ret

000020e4 <UART_sendString>:
/*
 * Description :
 * Send the required string through UART to the other UART device.
 */
void UART_sendString(const uint8 *Str)
{
    20e4:	df 93       	push	r29
    20e6:	cf 93       	push	r28
    20e8:	00 d0       	rcall	.+0      	; 0x20ea <UART_sendString+0x6>
    20ea:	0f 92       	push	r0
    20ec:	cd b7       	in	r28, 0x3d	; 61
    20ee:	de b7       	in	r29, 0x3e	; 62
    20f0:	9b 83       	std	Y+3, r25	; 0x03
    20f2:	8a 83       	std	Y+2, r24	; 0x02
	uint8 i = 0;
    20f4:	19 82       	std	Y+1, r1	; 0x01
    20f6:	0e c0       	rjmp	.+28     	; 0x2114 <UART_sendString+0x30>

	/* Send the whole string */
	while(Str[i] != '\0')
	{
		UART_sendByte(Str[i]);
    20f8:	89 81       	ldd	r24, Y+1	; 0x01
    20fa:	28 2f       	mov	r18, r24
    20fc:	30 e0       	ldi	r19, 0x00	; 0
    20fe:	8a 81       	ldd	r24, Y+2	; 0x02
    2100:	9b 81       	ldd	r25, Y+3	; 0x03
    2102:	fc 01       	movw	r30, r24
    2104:	e2 0f       	add	r30, r18
    2106:	f3 1f       	adc	r31, r19
    2108:	80 81       	ld	r24, Z
    210a:	0e 94 4c 10 	call	0x2098	; 0x2098 <UART_sendByte>
		i++;
    210e:	89 81       	ldd	r24, Y+1	; 0x01
    2110:	8f 5f       	subi	r24, 0xFF	; 255
    2112:	89 83       	std	Y+1, r24	; 0x01
void UART_sendString(const uint8 *Str)
{
	uint8 i = 0;

	/* Send the whole string */
	while(Str[i] != '\0')
    2114:	89 81       	ldd	r24, Y+1	; 0x01
    2116:	28 2f       	mov	r18, r24
    2118:	30 e0       	ldi	r19, 0x00	; 0
    211a:	8a 81       	ldd	r24, Y+2	; 0x02
    211c:	9b 81       	ldd	r25, Y+3	; 0x03
    211e:	fc 01       	movw	r30, r24
    2120:	e2 0f       	add	r30, r18
    2122:	f3 1f       	adc	r31, r19
    2124:	80 81       	ld	r24, Z
    2126:	88 23       	and	r24, r24
    2128:	39 f7       	brne	.-50     	; 0x20f8 <UART_sendString+0x14>
	{
		UART_sendByte(*Str);
		Str++;
	}		
	*******************************************************************/
}
    212a:	0f 90       	pop	r0
    212c:	0f 90       	pop	r0
    212e:	0f 90       	pop	r0
    2130:	cf 91       	pop	r28
    2132:	df 91       	pop	r29
    2134:	08 95       	ret

00002136 <UART_receiveString>:
/*
 * Description :
 * Receive the required string until the '#' symbol through UART from the other UART device.
 */
void UART_receiveString(uint8 *Str)
{
    2136:	0f 93       	push	r16
    2138:	1f 93       	push	r17
    213a:	df 93       	push	r29
    213c:	cf 93       	push	r28
    213e:	00 d0       	rcall	.+0      	; 0x2140 <UART_receiveString+0xa>
    2140:	0f 92       	push	r0
    2142:	cd b7       	in	r28, 0x3d	; 61
    2144:	de b7       	in	r29, 0x3e	; 62
    2146:	9b 83       	std	Y+3, r25	; 0x03
    2148:	8a 83       	std	Y+2, r24	; 0x02
	uint8 i = 0;
    214a:	19 82       	std	Y+1, r1	; 0x01

	/* Receive the first byte */
	Str[i] = UART_recieveByte();
    214c:	89 81       	ldd	r24, Y+1	; 0x01
    214e:	28 2f       	mov	r18, r24
    2150:	30 e0       	ldi	r19, 0x00	; 0
    2152:	8a 81       	ldd	r24, Y+2	; 0x02
    2154:	9b 81       	ldd	r25, Y+3	; 0x03
    2156:	8c 01       	movw	r16, r24
    2158:	02 0f       	add	r16, r18
    215a:	13 1f       	adc	r17, r19
    215c:	0e 94 63 10 	call	0x20c6	; 0x20c6 <UART_recieveByte>
    2160:	f8 01       	movw	r30, r16
    2162:	80 83       	st	Z, r24
    2164:	0f c0       	rjmp	.+30     	; 0x2184 <UART_receiveString+0x4e>

	/* Receive the whole string until the '#' */
	while(Str[i] != '#')
	{
		i++;
    2166:	89 81       	ldd	r24, Y+1	; 0x01
    2168:	8f 5f       	subi	r24, 0xFF	; 255
    216a:	89 83       	std	Y+1, r24	; 0x01
		Str[i] = UART_recieveByte();
    216c:	89 81       	ldd	r24, Y+1	; 0x01
    216e:	28 2f       	mov	r18, r24
    2170:	30 e0       	ldi	r19, 0x00	; 0
    2172:	8a 81       	ldd	r24, Y+2	; 0x02
    2174:	9b 81       	ldd	r25, Y+3	; 0x03
    2176:	8c 01       	movw	r16, r24
    2178:	02 0f       	add	r16, r18
    217a:	13 1f       	adc	r17, r19
    217c:	0e 94 63 10 	call	0x20c6	; 0x20c6 <UART_recieveByte>
    2180:	f8 01       	movw	r30, r16
    2182:	80 83       	st	Z, r24

	/* Receive the first byte */
	Str[i] = UART_recieveByte();

	/* Receive the whole string until the '#' */
	while(Str[i] != '#')
    2184:	89 81       	ldd	r24, Y+1	; 0x01
    2186:	28 2f       	mov	r18, r24
    2188:	30 e0       	ldi	r19, 0x00	; 0
    218a:	8a 81       	ldd	r24, Y+2	; 0x02
    218c:	9b 81       	ldd	r25, Y+3	; 0x03
    218e:	fc 01       	movw	r30, r24
    2190:	e2 0f       	add	r30, r18
    2192:	f3 1f       	adc	r31, r19
    2194:	80 81       	ld	r24, Z
    2196:	83 32       	cpi	r24, 0x23	; 35
    2198:	31 f7       	brne	.-52     	; 0x2166 <UART_receiveString+0x30>
		i++;
		Str[i] = UART_recieveByte();
	}

	/* After receiving the whole string plus the '#', replace the '#' with '\0' */
	Str[i] = '\0';
    219a:	89 81       	ldd	r24, Y+1	; 0x01
    219c:	28 2f       	mov	r18, r24
    219e:	30 e0       	ldi	r19, 0x00	; 0
    21a0:	8a 81       	ldd	r24, Y+2	; 0x02
    21a2:	9b 81       	ldd	r25, Y+3	; 0x03
    21a4:	fc 01       	movw	r30, r24
    21a6:	e2 0f       	add	r30, r18
    21a8:	f3 1f       	adc	r31, r19
    21aa:	10 82       	st	Z, r1
}
    21ac:	0f 90       	pop	r0
    21ae:	0f 90       	pop	r0
    21b0:	0f 90       	pop	r0
    21b2:	cf 91       	pop	r28
    21b4:	df 91       	pop	r29
    21b6:	1f 91       	pop	r17
    21b8:	0f 91       	pop	r16
    21ba:	08 95       	ret

000021bc <__udivmodhi4>:
    21bc:	aa 1b       	sub	r26, r26
    21be:	bb 1b       	sub	r27, r27
    21c0:	51 e1       	ldi	r21, 0x11	; 17
    21c2:	07 c0       	rjmp	.+14     	; 0x21d2 <__udivmodhi4_ep>

000021c4 <__udivmodhi4_loop>:
    21c4:	aa 1f       	adc	r26, r26
    21c6:	bb 1f       	adc	r27, r27
    21c8:	a6 17       	cp	r26, r22
    21ca:	b7 07       	cpc	r27, r23
    21cc:	10 f0       	brcs	.+4      	; 0x21d2 <__udivmodhi4_ep>
    21ce:	a6 1b       	sub	r26, r22
    21d0:	b7 0b       	sbc	r27, r23

000021d2 <__udivmodhi4_ep>:
    21d2:	88 1f       	adc	r24, r24
    21d4:	99 1f       	adc	r25, r25
    21d6:	5a 95       	dec	r21
    21d8:	a9 f7       	brne	.-22     	; 0x21c4 <__udivmodhi4_loop>
    21da:	80 95       	com	r24
    21dc:	90 95       	com	r25
    21de:	bc 01       	movw	r22, r24
    21e0:	cd 01       	movw	r24, r26
    21e2:	08 95       	ret

000021e4 <__udivmodsi4>:
    21e4:	a1 e2       	ldi	r26, 0x21	; 33
    21e6:	1a 2e       	mov	r1, r26
    21e8:	aa 1b       	sub	r26, r26
    21ea:	bb 1b       	sub	r27, r27
    21ec:	fd 01       	movw	r30, r26
    21ee:	0d c0       	rjmp	.+26     	; 0x220a <__udivmodsi4_ep>

000021f0 <__udivmodsi4_loop>:
    21f0:	aa 1f       	adc	r26, r26
    21f2:	bb 1f       	adc	r27, r27
    21f4:	ee 1f       	adc	r30, r30
    21f6:	ff 1f       	adc	r31, r31
    21f8:	a2 17       	cp	r26, r18
    21fa:	b3 07       	cpc	r27, r19
    21fc:	e4 07       	cpc	r30, r20
    21fe:	f5 07       	cpc	r31, r21
    2200:	20 f0       	brcs	.+8      	; 0x220a <__udivmodsi4_ep>
    2202:	a2 1b       	sub	r26, r18
    2204:	b3 0b       	sbc	r27, r19
    2206:	e4 0b       	sbc	r30, r20
    2208:	f5 0b       	sbc	r31, r21

0000220a <__udivmodsi4_ep>:
    220a:	66 1f       	adc	r22, r22
    220c:	77 1f       	adc	r23, r23
    220e:	88 1f       	adc	r24, r24
    2210:	99 1f       	adc	r25, r25
    2212:	1a 94       	dec	r1
    2214:	69 f7       	brne	.-38     	; 0x21f0 <__udivmodsi4_loop>
    2216:	60 95       	com	r22
    2218:	70 95       	com	r23
    221a:	80 95       	com	r24
    221c:	90 95       	com	r25
    221e:	9b 01       	movw	r18, r22
    2220:	ac 01       	movw	r20, r24
    2222:	bd 01       	movw	r22, r26
    2224:	cf 01       	movw	r24, r30
    2226:	08 95       	ret

00002228 <__prologue_saves__>:
    2228:	2f 92       	push	r2
    222a:	3f 92       	push	r3
    222c:	4f 92       	push	r4
    222e:	5f 92       	push	r5
    2230:	6f 92       	push	r6
    2232:	7f 92       	push	r7
    2234:	8f 92       	push	r8
    2236:	9f 92       	push	r9
    2238:	af 92       	push	r10
    223a:	bf 92       	push	r11
    223c:	cf 92       	push	r12
    223e:	df 92       	push	r13
    2240:	ef 92       	push	r14
    2242:	ff 92       	push	r15
    2244:	0f 93       	push	r16
    2246:	1f 93       	push	r17
    2248:	cf 93       	push	r28
    224a:	df 93       	push	r29
    224c:	cd b7       	in	r28, 0x3d	; 61
    224e:	de b7       	in	r29, 0x3e	; 62
    2250:	ca 1b       	sub	r28, r26
    2252:	db 0b       	sbc	r29, r27
    2254:	0f b6       	in	r0, 0x3f	; 63
    2256:	f8 94       	cli
    2258:	de bf       	out	0x3e, r29	; 62
    225a:	0f be       	out	0x3f, r0	; 63
    225c:	cd bf       	out	0x3d, r28	; 61
    225e:	09 94       	ijmp

00002260 <__epilogue_restores__>:
    2260:	2a 88       	ldd	r2, Y+18	; 0x12
    2262:	39 88       	ldd	r3, Y+17	; 0x11
    2264:	48 88       	ldd	r4, Y+16	; 0x10
    2266:	5f 84       	ldd	r5, Y+15	; 0x0f
    2268:	6e 84       	ldd	r6, Y+14	; 0x0e
    226a:	7d 84       	ldd	r7, Y+13	; 0x0d
    226c:	8c 84       	ldd	r8, Y+12	; 0x0c
    226e:	9b 84       	ldd	r9, Y+11	; 0x0b
    2270:	aa 84       	ldd	r10, Y+10	; 0x0a
    2272:	b9 84       	ldd	r11, Y+9	; 0x09
    2274:	c8 84       	ldd	r12, Y+8	; 0x08
    2276:	df 80       	ldd	r13, Y+7	; 0x07
    2278:	ee 80       	ldd	r14, Y+6	; 0x06
    227a:	fd 80       	ldd	r15, Y+5	; 0x05
    227c:	0c 81       	ldd	r16, Y+4	; 0x04
    227e:	1b 81       	ldd	r17, Y+3	; 0x03
    2280:	aa 81       	ldd	r26, Y+2	; 0x02
    2282:	b9 81       	ldd	r27, Y+1	; 0x01
    2284:	ce 0f       	add	r28, r30
    2286:	d1 1d       	adc	r29, r1
    2288:	0f b6       	in	r0, 0x3f	; 63
    228a:	f8 94       	cli
    228c:	de bf       	out	0x3e, r29	; 62
    228e:	0f be       	out	0x3f, r0	; 63
    2290:	cd bf       	out	0x3d, r28	; 61
    2292:	ed 01       	movw	r28, r26
    2294:	08 95       	ret

00002296 <_exit>:
    2296:	f8 94       	cli

00002298 <__stop_program>:
    2298:	ff cf       	rjmp	.-2      	; 0x2298 <__stop_program>
